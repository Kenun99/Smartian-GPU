; ModuleID = 'bc/IB.bin'
source_filename = "bc/IB.bin"
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v32:32:32-v64:64:64-v128:128:128-n16:32:64"
target triple = "nvptx64-nvidia-cuda"

%Slot_t = type { i256, i256 }

@__l2snap_lens = external addrspace(1) global [2 x i8], align 1
@__l2snaps = external addrspace(1) global [2 x [32 x %Slot_t]], align 32
@__l3snap_len = external addrspace(1) global i8, align 1
@__l3snap = external addrspace(1) global [32 x %Slot_t], align 32
@__bitmaps = external addrspace(1) global [2 x i8 addrspace(1)*], align 8
@__signals = external unnamed_addr addrspace(1) global [2 x i64], align 8
@SELFADDRESS = private unnamed_addr addrspace(4) global i160 0, align 32
@CALLER = private unnamed_addr addrspace(4) global i160 0, align 32
@ORIGIN = private unnamed_addr addrspace(4) global i160 0, align 32
@TIMESTAMP = private unnamed_addr addrspace(4) global i64 0, align 8
@BLOCKNUM = private unnamed_addr addrspace(4) global i64 0, align 8
@__evmCode = unnamed_addr addrspace(4) global [32769 x i8] c"`\80`@Rf\01}\FC\DE\CE@\00`\00U4\80\15a\00\1BW`\00\80\FD[Pf\01}\FC\DE\CE@\00`\01`\003s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 \81\90UPa\0C\E5\80a\00v`\009`\00\F3\00`\80`@R`\046\10a\00\C5W`\005|\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\90\04c\FF\FF\FF\FF\16\80c\06\FD\DE\03\14a\00\CAW\80c\09^\A7\B3\14a\01ZW\80c\18\16\0D\DD\14a\01\BFW\80c#\B8r\DD\14a\01\EAW\80c'\ED\F0\97\14a\02oW\80c1<\E5g\14a\02\A0W\80c7\8D\C3\DC\14a\02\D1W\80cB\96lh\14a\02\FCW\80cp\A0\821\14a\03AW\80cw\12\82\F6\14a\03\98W\80c\95\D8\9BA\14a\03\C3W\80c\A9\05\9C\BB\14a\04SW\80c\DDb\ED>\14a\04\B8W[`\00\80\FD[4\80\15a\00\D6W`\00\80\FD[Pa\00\DFa\05/V[`@Q\80\80` \01\82\81\03\82R\83\81\81Q\81R` \01\91P\80Q\90` \01\90\80\83\83`\00[\83\81\10\15a\01\1FW\80\82\01Q\81\84\01R` \81\01\90Pa\01\04V[PPPP\90P\90\81\01\90`\1F\16\80\15a\01LW\80\82\03\80Q`\01\83` \03a\01\00\0A\03\19\16\81R` \01\91P[P\92PPP`@Q\80\91\03\90\F3[4\80\15a\01fW`\00\80\FD[Pa\01\A5`\04\806\03\81\01\90\80\805s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\90` \01\90\92\91\90\805\90` \01\90\92\91\90PPPa\05hV[`@Q\80\82\15\15\15\15\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\01\CBW`\00\80\FD[Pa\01\D4a\06\EFV[`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\01\F6W`\00\80\FD[Pa\02U`\04\806\03\81\01\90\80\805s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\90` \01\90\92\91\90\805s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\90` \01\90\92\91\90\805\90` \01\90\92\91\90PPPa\06\F8V[`@Q\80\82\15\15\15\15\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\02{W`\00\80\FD[Pa\02\84a\08%V[`@Q\80\82`\FF\16`\FF\16\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\02\ACW`\00\80\FD[Pa\02\B5a\08*V[`@Q\80\82`\FF\16`\FF\16\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\02\DDW`\00\80\FD[Pa\02\E6a\08/V[`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\03\08W`\00\80\FD[Pa\03'`\04\806\03\81\01\90\80\805\90` \01\90\92\91\90PPPa\08:V[`@Q\80\82\15\15\15\15\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\03MW`\00\80\FD[Pa\03\82`\04\806\03\81\01\90\80\805s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\90` \01\90\92\91\90PPPa\09tV[`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\03\A4W`\00\80\FD[Pa\03\ADa\09\8CV[`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\03\CFW`\00\80\FD[Pa\03\D8a\09\92V[`@Q\80\80` \01\82\81\03\82R\83\81\81Q\81R` \01\91P\80Q\90` \01\90\80\83\83`\00[\83\81\10\15a\04\18W\80\82\01Q\81\84\01R` \81\01\90Pa\03\FDV[PPPP\90P\90\81\01\90`\1F\16\80\15a\04EW\80\82\03\80Q`\01\83` \03a\01\00\0A\03\19\16\81R` \01\91P[P\92PPP`@Q\80\91\03\90\F3[4\80\15a\04_W`\00\80\FD[Pa\04\9E`\04\806\03\81\01\90\80\805s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\90` \01\90\92\91\90\805\90` \01\90\92\91\90PPPa\09\CBV[`@Q\80\82\15\15\15\15\81R` \01\91PP`@Q\80\91\03\90\F3[4\80\15a\04\C4W`\00\80\FD[Pa\05\19`\04\806\03\81\01\90\80\805s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\90` \01\90\92\91\90\805s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\90` \01\90\92\91\90PPPa\09\E2V[`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\F3[`@\80Q\90\81\01`@R\80`\07\81R` \01\7FHexagon\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\81RP\81V[`\00\80\82\14\80a\05\F4WP`\00`\02`\003s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\85s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 T\14[\15\15a\05\FFW`\00\80\FD[\81`\02`\003s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\85s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 \81\90UP\82s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\163s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\7F\8C[\E1\E5\EB\EC}[\D1OqB}\1E\84\F3\DD\03\14\C0\F7\B2)\1E[ \0A\C8\C7\C3\B9%\84`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\A3`\01\90P\92\91PPV[`\00\80T\90P\90V[`\00\81`\02`\00\86s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\003s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 T\10\15\15\15a\07\85W`\00\80\FD[\81`\02`\00\86s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\003s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\82\82T\03\92PP\81\90UPa\08\1A\84\84\84a\0A\07V[`\01\90P\93\92PPPV[`\02\81V[`\04\81V[f\01}\FC\DE\CE@\00\81V[`\00\81`\01`\003s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 T\10\15\15\15a\08\8AW`\00\80\FD[\81`\01`\003s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\82\82T\03\92PP\81\90UP\81`\01`\00\80s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\82\82T\01\92PP\81\90UP\81`\00\80\82\82T\03\92PP\81\90UP3s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\7F\CC\16\F5\DB\B4\872\80\81\\\1E\E0\9D\BD\06sl\FF\CC\18D\12\CFzq\A0\FD\B7]9|\A5\83`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\A2`\01\90P\91\90PV[`\01` R\80`\00R`@`\00 `\00\91P\90PT\81V[`\00T\81V[`@\80Q\90\81\01`@R\80`\03\81R` \01\7FHXG\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\81RP\81V[`\00a\09\D83\84\84a\0A\07V[`\01\90P\92\91PPV[`\02` R\81`\00R`@`\00 ` R\80`\00R`@`\00 `\00\91P\91PPT\81V[`\00\82s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\14\15\15\15a\0A-W`\00\80\FD[`\02`\FF\16\81\01`\01`\00\85s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 T\10\15\15\15a\0A\81W`\00\80\FD[`\01`\00\83s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 T\81`\01`\00\85s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 T\01\11\15\15a\0B\0FW`\00\80\FD[`\02`\FF\16\81\01`\01`\00\85s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\82\82T\03\92PP\81\90UP\80`\01`\00\84s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\82\82T\01\92PP\81\90UP`\02`\FF\16`\01`\00\80s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\81R` \01\90\81R` \01`\00 `\00\82\82T\01\92PP\81\90UP`\02`\FF\16`\00\80\82\82T\03\92PP\81\90UP\82s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\7F\CC\16\F5\DB\B4\872\80\81\\\1E\E0\9D\BD\06sl\FF\CC\18D\12\CFzq\A0\FD\B7]9|\A5`\02`@Q\80\82`\FF\16\81R` \01\91PP`@Q\80\91\03\90\A2\81s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\83s\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\16\7F\DD\F2R\AD\1B\E2\C8\9Bi\C2\B0h\FC7\8D\AA\95+\A7\F1c\C4\A1\16(\F5ZM\F5#\B3\EF\83`@Q\80\82\81R` \01\91PP`@Q\80\91\03\90\A3PPPV\00\A1ebzzr0X SF\F13\B8\8C\CE\F9]u2\C5o%\BF=\1E\C6\B8\D5\AFv
@__evmCodeSize = unnamed_addr addrspace(4) global i32 3419

define internal i32 @get_thread_id() {
  %1 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  %2 = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  %3 = call i32 @llvm.nvvm.read.ptx.sreg.ntid.x()
  %4 = mul i32 %2, %3
  %5 = add i32 %1, %4
  ret i32 %5
}

; Function Attrs: nounwind readnone
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nounwind readnone
declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: nounwind readnone
declare i32 @llvm.nvvm.read.ptx.sreg.ntid.x() #0

define void @updateBits(i64 addrspace(1)* %0, i8 addrspace(1)* %1) {
  call void @__update_bits(i64 addrspace(1)* %0, i8 addrspace(1)* %1)
  ret void
}

declare void @__update_bits(i64 addrspace(1)*, i8 addrspace(1)*)

define internal i32 @contract(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i64 %2, i32 %3, i8 addrspace(1)* %4, i8 addrspace(1)* %__afl_area_ptr, i8 addrspace(1)* %5, i1 %6) {
Entry:
  %__afl_prev_loc = alloca i32
  store i32 0, i32* %__afl_prev_loc
  %__afl_state = alloca i32
  store i32 0, i32* %__afl_state
  %remaing_gas = alloca i64
  store i64 21000, i64* %remaing_gas
  %MEMORY = call i8* @malloc(i64 1448)
  %7 = call i8* @malloc(i64 4096)
  %STACK = bitcast i8* %7 to i256*
  %STACK_DEP_PTR = alloca i64
  store i64 0, i64* %STACK_DEP_PTR
  %JMP_TARGET_PTR = alloca i64
  store i64 0, i64* %JMP_TARGET_PTR
  br label %.0

.0:                                               ; preds = %Entry
  %8 = load i64, i64* %remaing_gas
  %9 = icmp ugt i64 96, %8
  br i1 %9, label %Abort, label %10

10:                                               ; preds = %.0
  %11 = load i32, i32* %__afl_state, !nosanitize !3
  %12 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %13 = xor i32 %12, 966
  %14 = xor i32 %11, %13
  %15 = and i32 %14, 4095
  %16 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %15
  %17 = load i8, i8 addrspace(1)* %16, !nosanitize !3
  %18 = add i8 %17, 1
  store i8 %18, i8 addrspace(1)* %16, !nosanitize !3
  store i32 483, i32* %__afl_prev_loc, !nosanitize !3
  %19 = sub i64 %8, 96
  store i64 %19, i64* %remaing_gas
  %20 = trunc i256 64 to i64
  %21 = alloca i256
  store i256 128, i256* %21
  %22 = bitcast i256* %21 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %20, i8* %22, i64 32)
  %23 = zext i32 %3 to i256
  %24 = icmp ult i256 %23, 4
  %25 = trunc i256 197 to i64
  %jump.check = icmp ne i1 %24, false
  store i64 %25, i64* %JMP_TARGET_PTR
  br i1 %jump.check, label %JumpTable, label %.13, !EVMBB !4

.13:                                              ; preds = %10
  %26 = load i64, i64* %remaing_gas
  %27 = icmp ugt i64 200, %26
  br i1 %27, label %Abort, label %28

28:                                               ; preds = %.13
  %29 = load i32, i32* %__afl_state, !nosanitize !3
  %30 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %31 = xor i32 %30, 2163
  %32 = xor i32 %29, %31
  %33 = and i32 %32, 4095
  %34 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %33
  %35 = load i8, i8 addrspace(1)* %34, !nosanitize !3
  %36 = add i8 %35, 1
  store i8 %36, i8 addrspace(1)* %34, !nosanitize !3
  store i32 1081, i32* %__afl_prev_loc, !nosanitize !3
  %37 = sub i64 %26, 200
  store i64 %37, i64* %remaing_gas
  %38 = trunc i256 0 to i64
  %39 = alloca i256
  %40 = bitcast i256* %39 to i8*
  call void @__device_calldataload(i8* %40, i8 addrspace(1)* %4, i64 %38)
  %41 = load i256, i256* %39
  %42 = alloca i256
  store i256 %41, i256* %42
  %43 = alloca i256
  store i256 26959946667150639794667015087019630673637144422540572481103610249216, i256* %43
  %44 = alloca i256
  call void @evm.udiv.i256(i256* %42, i256* %43, i256* %44), !pc !5, !intsan !6
  %45 = load i256, i256* %44
  %46 = and i256 4294967295, %45
  %47 = icmp eq i256 117300739, %46
  %48 = trunc i256 202 to i64
  %jump.check1 = icmp ne i1 %47, false
  store i64 %48, i64* %JMP_TARGET_PTR
  %49 = load i64, i64* %STACK_DEP_PTR
  %50 = add i64 %49, 1
  store i64 %50, i64* %STACK_DEP_PTR
  %51 = load i64, i64* %STACK_DEP_PTR
  %52 = getelementptr i256, i256* %STACK, i64 %51
  store i256 %46, i256* %52
  br i1 %jump.check1, label %JumpTable, label %.65, !EVMBB !4

.65:                                              ; preds = %28
  %53 = load i64, i64* %remaing_gas
  %54 = icmp ugt i64 120, %53
  br i1 %54, label %Abort, label %55

55:                                               ; preds = %.65
  %56 = load i32, i32* %__afl_state, !nosanitize !3
  %57 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %58 = xor i32 %57, 3327
  %59 = xor i32 %56, %58
  %60 = and i32 %59, 4095
  %61 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %60
  %62 = load i8, i8 addrspace(1)* %61, !nosanitize !3
  %63 = add i8 %62, 1
  store i8 %63, i8 addrspace(1)* %61, !nosanitize !3
  store i32 1663, i32* %__afl_prev_loc, !nosanitize !3
  %64 = sub i64 %53, 120
  store i64 %64, i64* %remaing_gas
  %65 = load i64, i64* %STACK_DEP_PTR
  %66 = sub i64 %65, 1
  store i64 %66, i64* %STACK_DEP_PTR
  %67 = icmp eq i256 157198259, %46
  %68 = trunc i256 346 to i64
  %jump.check2 = icmp ne i1 %67, false
  store i64 %68, i64* %JMP_TARGET_PTR
  %69 = load i64, i64* %STACK_DEP_PTR
  %70 = add i64 %69, 1
  store i64 %70, i64* %STACK_DEP_PTR
  %71 = load i64, i64* %STACK_DEP_PTR
  %72 = getelementptr i256, i256* %STACK, i64 %71
  store i256 %46, i256* %72
  br i1 %jump.check2, label %JumpTable, label %.76, !EVMBB !4

.76:                                              ; preds = %55
  %73 = load i64, i64* %remaing_gas
  %74 = icmp ugt i64 120, %73
  br i1 %74, label %Abort, label %75

75:                                               ; preds = %.76
  %76 = load i32, i32* %__afl_state, !nosanitize !3
  %77 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %78 = xor i32 %77, 2284
  %79 = xor i32 %76, %78
  %80 = and i32 %79, 4095
  %81 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %80
  %82 = load i8, i8 addrspace(1)* %81, !nosanitize !3
  %83 = add i8 %82, 1
  store i8 %83, i8 addrspace(1)* %81, !nosanitize !3
  store i32 1142, i32* %__afl_prev_loc, !nosanitize !3
  %84 = sub i64 %73, 120
  store i64 %84, i64* %remaing_gas
  %85 = load i64, i64* %STACK_DEP_PTR
  %86 = sub i64 %85, 1
  store i64 %86, i64* %STACK_DEP_PTR
  %87 = icmp eq i256 404098525, %46
  %88 = trunc i256 447 to i64
  %jump.check4 = icmp ne i1 %87, false
  store i64 %88, i64* %JMP_TARGET_PTR
  %89 = load i64, i64* %STACK_DEP_PTR
  %90 = add i64 %89, 1
  store i64 %90, i64* %STACK_DEP_PTR
  %91 = load i64, i64* %STACK_DEP_PTR
  %92 = getelementptr i256, i256* %STACK, i64 %91
  store i256 %46, i256* %92
  br i1 %jump.check4, label %JumpTable, label %.87, !EVMBB !4

.87:                                              ; preds = %75
  %93 = load i64, i64* %remaing_gas
  %94 = icmp ugt i64 120, %93
  br i1 %94, label %Abort, label %95

95:                                               ; preds = %.87
  %96 = load i32, i32* %__afl_state, !nosanitize !3
  %97 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %98 = xor i32 %97, 3277
  %99 = xor i32 %96, %98
  %100 = and i32 %99, 4095
  %101 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %100
  %102 = load i8, i8 addrspace(1)* %101, !nosanitize !3
  %103 = add i8 %102, 1
  store i8 %103, i8 addrspace(1)* %101, !nosanitize !3
  store i32 1638, i32* %__afl_prev_loc, !nosanitize !3
  %104 = sub i64 %93, 120
  store i64 %104, i64* %remaing_gas
  %105 = load i64, i64* %STACK_DEP_PTR
  %106 = sub i64 %105, 1
  store i64 %106, i64* %STACK_DEP_PTR
  %107 = icmp eq i256 599290589, %46
  %108 = trunc i256 490 to i64
  %jump.check6 = icmp ne i1 %107, false
  store i64 %108, i64* %JMP_TARGET_PTR
  %109 = load i64, i64* %STACK_DEP_PTR
  %110 = add i64 %109, 1
  store i64 %110, i64* %STACK_DEP_PTR
  %111 = load i64, i64* %STACK_DEP_PTR
  %112 = getelementptr i256, i256* %STACK, i64 %111
  store i256 %46, i256* %112
  br i1 %jump.check6, label %JumpTable, label %.98, !EVMBB !4

.98:                                              ; preds = %95
  %113 = load i64, i64* %remaing_gas
  %114 = icmp ugt i64 120, %113
  br i1 %114, label %Abort, label %115

115:                                              ; preds = %.98
  %116 = load i32, i32* %__afl_state, !nosanitize !3
  %117 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %118 = xor i32 %117, 1963
  %119 = xor i32 %116, %118
  %120 = and i32 %119, 4095
  %121 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %120
  %122 = load i8, i8 addrspace(1)* %121, !nosanitize !3
  %123 = add i8 %122, 1
  store i8 %123, i8 addrspace(1)* %121, !nosanitize !3
  store i32 981, i32* %__afl_prev_loc, !nosanitize !3
  %124 = sub i64 %113, 120
  store i64 %124, i64* %remaing_gas
  %125 = load i64, i64* %STACK_DEP_PTR
  %126 = sub i64 %125, 1
  store i64 %126, i64* %STACK_DEP_PTR
  %127 = icmp eq i256 669905047, %46
  %128 = trunc i256 623 to i64
  %jump.check8 = icmp ne i1 %127, false
  store i64 %128, i64* %JMP_TARGET_PTR
  %129 = load i64, i64* %STACK_DEP_PTR
  %130 = add i64 %129, 1
  store i64 %130, i64* %STACK_DEP_PTR
  %131 = load i64, i64* %STACK_DEP_PTR
  %132 = getelementptr i256, i256* %STACK, i64 %131
  store i256 %46, i256* %132
  br i1 %jump.check8, label %JumpTable, label %.109, !EVMBB !4

.109:                                             ; preds = %115
  %133 = load i64, i64* %remaing_gas
  %134 = icmp ugt i64 120, %133
  br i1 %134, label %Abort, label %135

135:                                              ; preds = %.109
  %136 = load i32, i32* %__afl_state, !nosanitize !3
  %137 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %138 = xor i32 %137, 3835
  %139 = xor i32 %136, %138
  %140 = and i32 %139, 4095
  %141 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %140
  %142 = load i8, i8 addrspace(1)* %141, !nosanitize !3
  %143 = add i8 %142, 1
  store i8 %143, i8 addrspace(1)* %141, !nosanitize !3
  store i32 1917, i32* %__afl_prev_loc, !nosanitize !3
  %144 = sub i64 %133, 120
  store i64 %144, i64* %remaing_gas
  %145 = load i64, i64* %STACK_DEP_PTR
  %146 = sub i64 %145, 1
  store i64 %146, i64* %STACK_DEP_PTR
  %147 = icmp eq i256 826074471, %46
  %148 = trunc i256 672 to i64
  %jump.check11 = icmp ne i1 %147, false
  store i64 %148, i64* %JMP_TARGET_PTR
  %149 = load i64, i64* %STACK_DEP_PTR
  %150 = add i64 %149, 1
  store i64 %150, i64* %STACK_DEP_PTR
  %151 = load i64, i64* %STACK_DEP_PTR
  %152 = getelementptr i256, i256* %STACK, i64 %151
  store i256 %46, i256* %152
  br i1 %jump.check11, label %JumpTable, label %.120, !EVMBB !4

.120:                                             ; preds = %135
  %153 = load i64, i64* %remaing_gas
  %154 = icmp ugt i64 120, %153
  br i1 %154, label %Abort, label %155

155:                                              ; preds = %.120
  %156 = load i32, i32* %__afl_state, !nosanitize !3
  %157 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %158 = xor i32 %157, 326
  %159 = xor i32 %156, %158
  %160 = and i32 %159, 4095
  %161 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %160
  %162 = load i8, i8 addrspace(1)* %161, !nosanitize !3
  %163 = add i8 %162, 1
  store i8 %163, i8 addrspace(1)* %161, !nosanitize !3
  store i32 163, i32* %__afl_prev_loc, !nosanitize !3
  %164 = sub i64 %153, 120
  store i64 %164, i64* %remaing_gas
  %165 = load i64, i64* %STACK_DEP_PTR
  %166 = sub i64 %165, 1
  store i64 %166, i64* %STACK_DEP_PTR
  %167 = icmp eq i256 932037596, %46
  %168 = trunc i256 721 to i64
  %jump.check14 = icmp ne i1 %167, false
  store i64 %168, i64* %JMP_TARGET_PTR
  %169 = load i64, i64* %STACK_DEP_PTR
  %170 = add i64 %169, 1
  store i64 %170, i64* %STACK_DEP_PTR
  %171 = load i64, i64* %STACK_DEP_PTR
  %172 = getelementptr i256, i256* %STACK, i64 %171
  store i256 %46, i256* %172
  br i1 %jump.check14, label %JumpTable, label %.131, !EVMBB !4

.131:                                             ; preds = %155
  %173 = load i64, i64* %remaing_gas
  %174 = icmp ugt i64 120, %173
  br i1 %174, label %Abort, label %175

175:                                              ; preds = %.131
  %176 = load i32, i32* %__afl_state, !nosanitize !3
  %177 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %178 = xor i32 %177, 706
  %179 = xor i32 %176, %178
  %180 = and i32 %179, 4095
  %181 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %180
  %182 = load i8, i8 addrspace(1)* %181, !nosanitize !3
  %183 = add i8 %182, 1
  store i8 %183, i8 addrspace(1)* %181, !nosanitize !3
  store i32 353, i32* %__afl_prev_loc, !nosanitize !3
  %184 = sub i64 %173, 120
  store i64 %184, i64* %remaing_gas
  %185 = load i64, i64* %STACK_DEP_PTR
  %186 = sub i64 %185, 1
  store i64 %186, i64* %STACK_DEP_PTR
  %187 = icmp eq i256 1117154408, %46
  %188 = trunc i256 764 to i64
  %jump.check17 = icmp ne i1 %187, false
  store i64 %188, i64* %JMP_TARGET_PTR
  %189 = load i64, i64* %STACK_DEP_PTR
  %190 = add i64 %189, 1
  store i64 %190, i64* %STACK_DEP_PTR
  %191 = load i64, i64* %STACK_DEP_PTR
  %192 = getelementptr i256, i256* %STACK, i64 %191
  store i256 %46, i256* %192
  br i1 %jump.check17, label %JumpTable, label %.142, !EVMBB !4

.142:                                             ; preds = %175
  %193 = load i64, i64* %remaing_gas
  %194 = icmp ugt i64 120, %193
  br i1 %194, label %Abort, label %195

195:                                              ; preds = %.142
  %196 = load i32, i32* %__afl_state, !nosanitize !3
  %197 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %198 = xor i32 %197, 2040
  %199 = xor i32 %196, %198
  %200 = and i32 %199, 4095
  %201 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %200
  %202 = load i8, i8 addrspace(1)* %201, !nosanitize !3
  %203 = add i8 %202, 1
  store i8 %203, i8 addrspace(1)* %201, !nosanitize !3
  store i32 1020, i32* %__afl_prev_loc, !nosanitize !3
  %204 = sub i64 %193, 120
  store i64 %204, i64* %remaing_gas
  %205 = load i64, i64* %STACK_DEP_PTR
  %206 = sub i64 %205, 1
  store i64 %206, i64* %STACK_DEP_PTR
  %207 = icmp eq i256 1889567281, %46
  %208 = trunc i256 833 to i64
  %jump.check19 = icmp ne i1 %207, false
  store i64 %208, i64* %JMP_TARGET_PTR
  %209 = load i64, i64* %STACK_DEP_PTR
  %210 = add i64 %209, 1
  store i64 %210, i64* %STACK_DEP_PTR
  %211 = load i64, i64* %STACK_DEP_PTR
  %212 = getelementptr i256, i256* %STACK, i64 %211
  store i256 %46, i256* %212
  br i1 %jump.check19, label %JumpTable, label %.153, !EVMBB !4

.153:                                             ; preds = %195
  %213 = load i64, i64* %remaing_gas
  %214 = icmp ugt i64 120, %213
  br i1 %214, label %Abort, label %215

215:                                              ; preds = %.153
  %216 = load i32, i32* %__afl_state, !nosanitize !3
  %217 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %218 = xor i32 %217, 2536
  %219 = xor i32 %216, %218
  %220 = and i32 %219, 4095
  %221 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %220
  %222 = load i8, i8 addrspace(1)* %221, !nosanitize !3
  %223 = add i8 %222, 1
  store i8 %223, i8 addrspace(1)* %221, !nosanitize !3
  store i32 1268, i32* %__afl_prev_loc, !nosanitize !3
  %224 = sub i64 %213, 120
  store i64 %224, i64* %remaing_gas
  %225 = load i64, i64* %STACK_DEP_PTR
  %226 = sub i64 %225, 1
  store i64 %226, i64* %STACK_DEP_PTR
  %227 = icmp eq i256 1997701878, %46
  %228 = trunc i256 920 to i64
  %jump.check22 = icmp ne i1 %227, false
  store i64 %228, i64* %JMP_TARGET_PTR
  %229 = load i64, i64* %STACK_DEP_PTR
  %230 = add i64 %229, 1
  store i64 %230, i64* %STACK_DEP_PTR
  %231 = load i64, i64* %STACK_DEP_PTR
  %232 = getelementptr i256, i256* %STACK, i64 %231
  store i256 %46, i256* %232
  br i1 %jump.check22, label %JumpTable, label %.164, !EVMBB !4

.164:                                             ; preds = %215
  %233 = load i64, i64* %remaing_gas
  %234 = icmp ugt i64 120, %233
  br i1 %234, label %Abort, label %235

235:                                              ; preds = %.164
  %236 = load i32, i32* %__afl_state, !nosanitize !3
  %237 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %238 = xor i32 %237, 909
  %239 = xor i32 %236, %238
  %240 = and i32 %239, 4095
  %241 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %240
  %242 = load i8, i8 addrspace(1)* %241, !nosanitize !3
  %243 = add i8 %242, 1
  store i8 %243, i8 addrspace(1)* %241, !nosanitize !3
  store i32 454, i32* %__afl_prev_loc, !nosanitize !3
  %244 = sub i64 %233, 120
  store i64 %244, i64* %remaing_gas
  %245 = load i64, i64* %STACK_DEP_PTR
  %246 = sub i64 %245, 1
  store i64 %246, i64* %STACK_DEP_PTR
  %247 = icmp eq i256 2514000705, %46
  %248 = trunc i256 963 to i64
  %jump.check25 = icmp ne i1 %247, false
  store i64 %248, i64* %JMP_TARGET_PTR
  %249 = load i64, i64* %STACK_DEP_PTR
  %250 = add i64 %249, 1
  store i64 %250, i64* %STACK_DEP_PTR
  %251 = load i64, i64* %STACK_DEP_PTR
  %252 = getelementptr i256, i256* %STACK, i64 %251
  store i256 %46, i256* %252
  br i1 %jump.check25, label %JumpTable, label %.175, !EVMBB !4

.175:                                             ; preds = %235
  %253 = load i64, i64* %remaing_gas
  %254 = icmp ugt i64 120, %253
  br i1 %254, label %Abort, label %255

255:                                              ; preds = %.175
  %256 = load i32, i32* %__afl_state, !nosanitize !3
  %257 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %258 = xor i32 %257, 1370
  %259 = xor i32 %256, %258
  %260 = and i32 %259, 4095
  %261 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %260
  %262 = load i8, i8 addrspace(1)* %261, !nosanitize !3
  %263 = add i8 %262, 1
  store i8 %263, i8 addrspace(1)* %261, !nosanitize !3
  store i32 685, i32* %__afl_prev_loc, !nosanitize !3
  %264 = sub i64 %253, 120
  store i64 %264, i64* %remaing_gas
  %265 = load i64, i64* %STACK_DEP_PTR
  %266 = sub i64 %265, 1
  store i64 %266, i64* %STACK_DEP_PTR
  %267 = icmp eq i256 2835717307, %46
  %268 = trunc i256 1107 to i64
  %jump.check29 = icmp ne i1 %267, false
  store i64 %268, i64* %JMP_TARGET_PTR
  %269 = load i64, i64* %STACK_DEP_PTR
  %270 = add i64 %269, 1
  store i64 %270, i64* %STACK_DEP_PTR
  %271 = load i64, i64* %STACK_DEP_PTR
  %272 = getelementptr i256, i256* %STACK, i64 %271
  store i256 %46, i256* %272
  br i1 %jump.check29, label %JumpTable, label %.186, !EVMBB !4

.186:                                             ; preds = %255
  %273 = load i64, i64* %remaing_gas
  %274 = icmp ugt i64 120, %273
  br i1 %274, label %Abort, label %275

275:                                              ; preds = %.186
  %276 = load i32, i32* %__afl_state, !nosanitize !3
  %277 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %278 = xor i32 %277, 611
  %279 = xor i32 %276, %278
  %280 = and i32 %279, 4095
  %281 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %280
  %282 = load i8, i8 addrspace(1)* %281, !nosanitize !3
  %283 = add i8 %282, 1
  store i8 %283, i8 addrspace(1)* %281, !nosanitize !3
  store i32 305, i32* %__afl_prev_loc, !nosanitize !3
  %284 = sub i64 %273, 120
  store i64 %284, i64* %remaing_gas
  %285 = load i64, i64* %STACK_DEP_PTR
  %286 = sub i64 %285, 1
  store i64 %286, i64* %STACK_DEP_PTR
  %287 = icmp eq i256 3714247998, %46
  %288 = trunc i256 1208 to i64
  %jump.check31 = icmp ne i1 %287, false
  store i64 %288, i64* %JMP_TARGET_PTR
  %289 = load i64, i64* %STACK_DEP_PTR
  %290 = add i64 %289, 1
  store i64 %290, i64* %STACK_DEP_PTR
  %291 = load i64, i64* %STACK_DEP_PTR
  %292 = getelementptr i256, i256* %STACK, i64 %291
  store i256 %46, i256* %292
  br i1 %jump.check31, label %JumpTable, label %.197, !EVMBB !4

.197:                                             ; preds = %JumpTableCase, %275
  %293 = load i64, i64* %remaing_gas
  %294 = icmp ugt i64 16, %293
  br i1 %294, label %Abort, label %295

295:                                              ; preds = %.197
  %296 = load i32, i32* %__afl_state, !nosanitize !3
  %297 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %298 = xor i32 %297, 1951
  %299 = xor i32 %296, %298
  %300 = and i32 %299, 4095
  %301 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %300
  %302 = load i8, i8 addrspace(1)* %301, !nosanitize !3
  %303 = add i8 %302, 1
  store i8 %303, i8 addrspace(1)* %301, !nosanitize !3
  store i32 975, i32* %__afl_prev_loc, !nosanitize !3
  %304 = sub i64 %293, 16
  store i64 %304, i64* %remaing_gas
  br label %Abort, !EVMBB !4

.202:                                             ; preds = %JumpTableCase38
  %305 = load i64, i64* %remaing_gas
  %306 = icmp ugt i64 104, %305
  br i1 %306, label %Abort, label %307

307:                                              ; preds = %.202
  %308 = load i32, i32* %__afl_state, !nosanitize !3
  %309 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %310 = xor i32 %309, 1946
  %311 = xor i32 %308, %310
  %312 = and i32 %311, 4095
  %313 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %312
  %314 = load i8, i8 addrspace(1)* %313, !nosanitize !3
  %315 = add i8 %314, 1
  store i8 %315, i8 addrspace(1)* %313, !nosanitize !3
  store i32 973, i32* %__afl_prev_loc, !nosanitize !3
  %316 = sub i64 %305, 104
  store i64 %316, i64* %remaing_gas
  %317 = icmp eq i64 %2, 0
  %318 = trunc i256 214 to i64
  %jump.check3 = icmp ne i1 %317, false
  store i64 %318, i64* %JMP_TARGET_PTR
  %319 = load i64, i64* %STACK_DEP_PTR
  %320 = add i64 %319, 1
  store i64 %320, i64* %STACK_DEP_PTR
  %321 = zext i64 %2 to i256
  %322 = load i64, i64* %STACK_DEP_PTR
  %323 = getelementptr i256, i256* %STACK, i64 %322
  store i256 %321, i256* %323
  br i1 %jump.check3, label %JumpTable, label %.210, !EVMBB !4

.210:                                             ; preds = %307
  %324 = load i64, i64* %remaing_gas
  %325 = icmp ugt i64 40, %324
  br i1 %325, label %Abort, label %326

326:                                              ; preds = %.210
  %327 = load i32, i32* %__afl_state, !nosanitize !3
  %328 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %329 = xor i32 %328, 3378
  %330 = xor i32 %327, %329
  %331 = and i32 %330, 4095
  %332 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %331
  %333 = load i8, i8 addrspace(1)* %332, !nosanitize !3
  %334 = add i8 %333, 1
  store i8 %334, i8 addrspace(1)* %332, !nosanitize !3
  store i32 1689, i32* %__afl_prev_loc, !nosanitize !3
  %335 = sub i64 %324, 40
  store i64 %335, i64* %remaing_gas
  %336 = load i64, i64* %STACK_DEP_PTR
  %337 = sub i64 %336, 0
  store i64 %337, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.214:                                             ; preds = %JumpTableCase40
  %338 = load i64, i64* %remaing_gas
  %339 = icmp ugt i64 128, %338
  br i1 %339, label %Abort, label %340

340:                                              ; preds = %.214
  %341 = load i32, i32* %__afl_state, !nosanitize !3
  %342 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %343 = xor i32 %342, 1975
  %344 = xor i32 %341, %343
  %345 = and i32 %344, 4095
  %346 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %345
  %347 = load i8, i8 addrspace(1)* %346, !nosanitize !3
  %348 = add i8 %347, 1
  store i8 %348, i8 addrspace(1)* %346, !nosanitize !3
  store i32 987, i32* %__afl_prev_loc, !nosanitize !3
  %349 = sub i64 %338, 128
  store i64 %349, i64* %remaing_gas
  %350 = load i64, i64* %STACK_DEP_PTR
  %351 = getelementptr i256, i256* %STACK, i64 %350
  %352 = load i256, i256* %351
  %353 = load i64, i64* %STACK_DEP_PTR
  %354 = sub i64 %353, 1
  store i64 %354, i64* %STACK_DEP_PTR
  %355 = trunc i256 1327 to i64
  store i64 %355, i64* %JMP_TARGET_PTR
  %356 = load i64, i64* %STACK_DEP_PTR
  %357 = add i64 %356, 1
  store i64 %357, i64* %STACK_DEP_PTR
  %358 = load i64, i64* %STACK_DEP_PTR
  %359 = getelementptr i256, i256* %STACK, i64 %358
  store i256 223, i256* %359
  br label %JumpTable, !EVMBB !4

.223:                                             ; preds = %JumpTableCase47
  %360 = load i64, i64* %STACK_DEP_PTR
  %361 = getelementptr i256, i256* %STACK, i64 %360
  %362 = load i256, i256* %361
  %363 = load i64, i64* %STACK_DEP_PTR
  %364 = sub i64 %363, 1
  store i64 %364, i64* %STACK_DEP_PTR
  %365 = trunc i256 64 to i64
  %366 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %365, i256* %366)
  %367 = load i256, i256* %366
  %368 = add i256 32, %367
  %"SUM < LHS" = icmp ult i256 %368, 32
  %369 = select i1 %"SUM < LHS", i8 4, i8 0
  %370 = call i32 @get_thread_id()
  call void @addBugSet(i32 %370, i8 %369, i32 231)
  %371 = add i256 32, %367, !pc !7, !intsan !8
  %"LHS < RHS" = icmp ult i256 %371, %367
  %372 = select i1 %"LHS < RHS", i8 4, i8 0
  %373 = call i32 @get_thread_id()
  call void @addBugSet(i32 %373, i8 %372, i32 234)
  %374 = sub i256 %371, %367, !pc !9, !intsan !10
  %375 = trunc i256 %367 to i64
  %376 = alloca i256
  store i256 %374, i256* %376
  %377 = bitcast i256* %376 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %375, i8* %377, i64 32)
  %378 = trunc i256 %362 to i64
  %379 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %378, i256* %379)
  %380 = load i256, i256* %379
  %381 = trunc i256 %371 to i64
  %382 = alloca i256
  store i256 %380, i256* %382
  %383 = bitcast i256* %382 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %381, i8* %383, i64 32)
  %384 = add i256 32, %371
  %"SUM < LHS106" = icmp ult i256 %384, 32
  %385 = select i1 %"SUM < LHS106", i8 4, i8 0
  %386 = call i32 @get_thread_id()
  call void @addBugSet(i32 %386, i8 %385, i32 245)
  %387 = add i256 32, %371, !pc !11, !intsan !8
  %388 = trunc i256 %362 to i64
  %389 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %388, i256* %389)
  %390 = load i256, i256* %389
  %391 = add i256 32, %362
  %"SUM < LHS107" = icmp ult i256 %391, 32
  %392 = select i1 %"SUM < LHS107", i8 4, i8 0
  %393 = call i32 @get_thread_id()
  call void @addBugSet(i32 %393, i8 %392, i32 253)
  %394 = add i256 32, %362, !pc !12, !intsan !8
  %395 = load i64, i64* %STACK_DEP_PTR
  %396 = add i64 %395, 1
  store i64 %396, i64* %STACK_DEP_PTR
  %397 = load i64, i64* %STACK_DEP_PTR
  %398 = getelementptr i256, i256* %STACK, i64 %397
  store i256 %362, i256* %398
  %399 = load i64, i64* %STACK_DEP_PTR
  %400 = add i64 %399, 1
  store i64 %400, i64* %STACK_DEP_PTR
  %401 = load i64, i64* %STACK_DEP_PTR
  %402 = getelementptr i256, i256* %STACK, i64 %401
  store i256 %367, i256* %402
  %403 = load i64, i64* %STACK_DEP_PTR
  %404 = add i64 %403, 1
  store i64 %404, i64* %STACK_DEP_PTR
  %405 = load i64, i64* %STACK_DEP_PTR
  %406 = getelementptr i256, i256* %STACK, i64 %405
  store i256 %367, i256* %406
  %407 = load i64, i64* %STACK_DEP_PTR
  %408 = add i64 %407, 1
  store i64 %408, i64* %STACK_DEP_PTR
  %409 = load i64, i64* %STACK_DEP_PTR
  %410 = getelementptr i256, i256* %STACK, i64 %409
  store i256 %387, i256* %410
  %411 = load i64, i64* %STACK_DEP_PTR
  %412 = add i64 %411, 1
  store i64 %412, i64* %STACK_DEP_PTR
  %413 = load i64, i64* %STACK_DEP_PTR
  %414 = getelementptr i256, i256* %STACK, i64 %413
  store i256 %394, i256* %414
  %415 = load i64, i64* %STACK_DEP_PTR
  %416 = add i64 %415, 1
  store i64 %416, i64* %STACK_DEP_PTR
  %417 = load i64, i64* %STACK_DEP_PTR
  %418 = getelementptr i256, i256* %STACK, i64 %417
  store i256 %390, i256* %418
  %419 = load i64, i64* %STACK_DEP_PTR
  %420 = add i64 %419, 1
  store i64 %420, i64* %STACK_DEP_PTR
  %421 = load i64, i64* %STACK_DEP_PTR
  %422 = getelementptr i256, i256* %STACK, i64 %421
  store i256 %390, i256* %422
  %423 = load i64, i64* %STACK_DEP_PTR
  %424 = add i64 %423, 1
  store i64 %424, i64* %STACK_DEP_PTR
  %425 = load i64, i64* %STACK_DEP_PTR
  %426 = getelementptr i256, i256* %STACK, i64 %425
  store i256 %387, i256* %426
  %427 = load i64, i64* %STACK_DEP_PTR
  %428 = add i64 %427, 1
  store i64 %428, i64* %STACK_DEP_PTR
  %429 = load i64, i64* %STACK_DEP_PTR
  %430 = getelementptr i256, i256* %STACK, i64 %429
  store i256 %394, i256* %430
  %431 = load i64, i64* %STACK_DEP_PTR
  %432 = add i64 %431, 1
  store i64 %432, i64* %STACK_DEP_PTR
  %433 = load i64, i64* %STACK_DEP_PTR
  %434 = getelementptr i256, i256* %STACK, i64 %433
  store i256 0, i256* %434
  br label %.260

.260:                                             ; preds = %JumpTableCase98, %.223
  %435 = load i64, i64* %remaing_gas
  %436 = icmp ugt i64 440, %435
  br i1 %436, label %Abort, label %437

437:                                              ; preds = %.260
  %438 = load i32, i32* %__afl_state, !nosanitize !3
  %439 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %440 = xor i32 %439, 1112
  %441 = xor i32 %438, %440
  %442 = and i32 %441, 4095
  %443 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %442
  %444 = load i8, i8 addrspace(1)* %443, !nosanitize !3
  %445 = add i8 %444, 1
  store i8 %445, i8 addrspace(1)* %443, !nosanitize !3
  store i32 556, i32* %__afl_prev_loc, !nosanitize !3
  %446 = sub i64 %435, 440
  store i64 %446, i64* %remaing_gas
  %447 = load i64, i64* %STACK_DEP_PTR
  %448 = getelementptr i256, i256* %STACK, i64 %447
  %449 = load i256, i256* %448
  %450 = load i64, i64* %STACK_DEP_PTR
  %451 = sub i64 %450, 1
  store i64 %451, i64* %STACK_DEP_PTR
  %452 = load i64, i64* %STACK_DEP_PTR
  %453 = getelementptr i256, i256* %STACK, i64 %452
  %454 = load i256, i256* %453
  %455 = load i64, i64* %STACK_DEP_PTR
  %456 = sub i64 %455, 1
  store i64 %456, i64* %STACK_DEP_PTR
  %457 = load i64, i64* %STACK_DEP_PTR
  %458 = getelementptr i256, i256* %STACK, i64 %457
  %459 = load i256, i256* %458
  %460 = load i64, i64* %STACK_DEP_PTR
  %461 = sub i64 %460, 1
  store i64 %461, i64* %STACK_DEP_PTR
  %462 = load i64, i64* %STACK_DEP_PTR
  %463 = getelementptr i256, i256* %STACK, i64 %462
  %464 = load i256, i256* %463
  %465 = load i64, i64* %STACK_DEP_PTR
  %466 = sub i64 %465, 1
  store i64 %466, i64* %STACK_DEP_PTR
  %467 = icmp ult i256 %449, %464
  %468 = icmp eq i1 %467, false
  %469 = trunc i256 287 to i64
  %jump.check34 = icmp ne i1 %468, false
  store i64 %469, i64* %JMP_TARGET_PTR
  %470 = load i64, i64* %STACK_DEP_PTR
  %471 = add i64 %470, 1
  store i64 %471, i64* %STACK_DEP_PTR
  %472 = load i64, i64* %STACK_DEP_PTR
  %473 = getelementptr i256, i256* %STACK, i64 %472
  store i256 %464, i256* %473
  %474 = load i64, i64* %STACK_DEP_PTR
  %475 = add i64 %474, 1
  store i64 %475, i64* %STACK_DEP_PTR
  %476 = load i64, i64* %STACK_DEP_PTR
  %477 = getelementptr i256, i256* %STACK, i64 %476
  store i256 %459, i256* %477
  %478 = load i64, i64* %STACK_DEP_PTR
  %479 = add i64 %478, 1
  store i64 %479, i64* %STACK_DEP_PTR
  %480 = load i64, i64* %STACK_DEP_PTR
  %481 = getelementptr i256, i256* %STACK, i64 %480
  store i256 %454, i256* %481
  %482 = load i64, i64* %STACK_DEP_PTR
  %483 = add i64 %482, 1
  store i64 %483, i64* %STACK_DEP_PTR
  %484 = load i64, i64* %STACK_DEP_PTR
  %485 = getelementptr i256, i256* %STACK, i64 %484
  store i256 %449, i256* %485
  br i1 %jump.check34, label %JumpTable, label %.269, !EVMBB !4

.269:                                             ; preds = %437
  %486 = load i64, i64* %remaing_gas
  %487 = icmp ugt i64 416, %486
  br i1 %487, label %Abort, label %488

488:                                              ; preds = %.269
  %489 = load i32, i32* %__afl_state, !nosanitize !3
  %490 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %491 = xor i32 %490, 2394
  %492 = xor i32 %489, %491
  %493 = and i32 %492, 4095
  %494 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %493
  %495 = load i8, i8 addrspace(1)* %494, !nosanitize !3
  %496 = add i8 %495, 1
  store i8 %496, i8 addrspace(1)* %494, !nosanitize !3
  store i32 1197, i32* %__afl_prev_loc, !nosanitize !3
  %497 = sub i64 %486, 416
  store i64 %497, i64* %remaing_gas
  %498 = load i64, i64* %STACK_DEP_PTR
  %499 = getelementptr i256, i256* %STACK, i64 %498
  %500 = load i256, i256* %499
  %501 = load i64, i64* %STACK_DEP_PTR
  %502 = sub i64 %501, 1
  store i64 %502, i64* %STACK_DEP_PTR
  %503 = load i64, i64* %STACK_DEP_PTR
  %504 = getelementptr i256, i256* %STACK, i64 %503
  %505 = load i256, i256* %504
  %506 = load i64, i64* %STACK_DEP_PTR
  %507 = sub i64 %506, 1
  store i64 %507, i64* %STACK_DEP_PTR
  %508 = load i64, i64* %STACK_DEP_PTR
  %509 = getelementptr i256, i256* %STACK, i64 %508
  %510 = load i256, i256* %509
  %511 = load i64, i64* %STACK_DEP_PTR
  %512 = sub i64 %511, 1
  store i64 %512, i64* %STACK_DEP_PTR
  %513 = add i256 %505, %500
  %"SUM < LHS108" = icmp ult i256 %513, %505
  %514 = select i1 %"SUM < LHS108", i8 4, i8 0
  %515 = call i32 @get_thread_id()
  call void @addBugSet(i32 %515, i8 %514, i32 271)
  %516 = add i256 %505, %500, !pc !13, !intsan !8
  %517 = trunc i256 %516 to i64
  %518 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %517, i256* %518)
  %519 = load i256, i256* %518
  %520 = add i256 %510, %500
  %"SUM < LHS109" = icmp ult i256 %520, %510
  %521 = select i1 %"SUM < LHS109", i8 4, i8 0
  %522 = call i32 @get_thread_id()
  call void @addBugSet(i32 %522, i8 %521, i32 275)
  %523 = add i256 %510, %500, !pc !14, !intsan !8
  %524 = trunc i256 %523 to i64
  %525 = alloca i256
  store i256 %519, i256* %525
  %526 = bitcast i256* %525 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %524, i8* %526, i64 32)
  %527 = add i256 %500, 32
  %"SUM < LHS110" = icmp ult i256 %527, %500
  %528 = select i1 %"SUM < LHS110", i8 4, i8 0
  %529 = call i32 @get_thread_id()
  call void @addBugSet(i32 %529, i8 %528, i32 280)
  %530 = add i256 %500, 32, !pc !15, !intsan !8
  %531 = trunc i256 260 to i64
  store i64 %531, i64* %JMP_TARGET_PTR
  %532 = load i64, i64* %STACK_DEP_PTR
  %533 = add i64 %532, 1
  store i64 %533, i64* %STACK_DEP_PTR
  %534 = load i64, i64* %STACK_DEP_PTR
  %535 = getelementptr i256, i256* %STACK, i64 %534
  store i256 %510, i256* %535
  %536 = load i64, i64* %STACK_DEP_PTR
  %537 = add i64 %536, 1
  store i64 %537, i64* %STACK_DEP_PTR
  %538 = load i64, i64* %STACK_DEP_PTR
  %539 = getelementptr i256, i256* %STACK, i64 %538
  store i256 %505, i256* %539
  %540 = load i64, i64* %STACK_DEP_PTR
  %541 = add i64 %540, 1
  store i64 %541, i64* %STACK_DEP_PTR
  %542 = load i64, i64* %STACK_DEP_PTR
  %543 = getelementptr i256, i256* %STACK, i64 %542
  store i256 %530, i256* %543
  br label %JumpTable, !EVMBB !4

.287:                                             ; preds = %JumpTableCase99
  %544 = load i64, i64* %remaing_gas
  %545 = icmp ugt i64 496, %544
  br i1 %545, label %Abort, label %546

546:                                              ; preds = %.287
  %547 = load i32, i32* %__afl_state, !nosanitize !3
  %548 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %549 = xor i32 %548, 2397
  %550 = xor i32 %547, %549
  %551 = and i32 %550, 4095
  %552 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %551
  %553 = load i8, i8 addrspace(1)* %552, !nosanitize !3
  %554 = add i8 %553, 1
  store i8 %554, i8 addrspace(1)* %552, !nosanitize !3
  store i32 1198, i32* %__afl_prev_loc, !nosanitize !3
  %555 = sub i64 %544, 496
  store i64 %555, i64* %remaing_gas
  %556 = load i64, i64* %STACK_DEP_PTR
  %557 = getelementptr i256, i256* %STACK, i64 %556
  %558 = load i256, i256* %557
  %559 = load i64, i64* %STACK_DEP_PTR
  %560 = sub i64 %559, 1
  store i64 %560, i64* %STACK_DEP_PTR
  %561 = load i64, i64* %STACK_DEP_PTR
  %562 = getelementptr i256, i256* %STACK, i64 %561
  %563 = load i256, i256* %562
  %564 = load i64, i64* %STACK_DEP_PTR
  %565 = sub i64 %564, 1
  store i64 %565, i64* %STACK_DEP_PTR
  %566 = load i64, i64* %STACK_DEP_PTR
  %567 = getelementptr i256, i256* %STACK, i64 %566
  %568 = load i256, i256* %567
  %569 = load i64, i64* %STACK_DEP_PTR
  %570 = sub i64 %569, 1
  store i64 %570, i64* %STACK_DEP_PTR
  %571 = load i64, i64* %STACK_DEP_PTR
  %572 = getelementptr i256, i256* %STACK, i64 %571
  %573 = load i256, i256* %572
  %574 = load i64, i64* %STACK_DEP_PTR
  %575 = sub i64 %574, 1
  store i64 %575, i64* %STACK_DEP_PTR
  %576 = load i64, i64* %STACK_DEP_PTR
  %577 = getelementptr i256, i256* %STACK, i64 %576
  %578 = load i256, i256* %577
  %579 = load i64, i64* %STACK_DEP_PTR
  %580 = sub i64 %579, 1
  store i64 %580, i64* %STACK_DEP_PTR
  %581 = load i64, i64* %STACK_DEP_PTR
  %582 = getelementptr i256, i256* %STACK, i64 %581
  %583 = load i256, i256* %582
  %584 = load i64, i64* %STACK_DEP_PTR
  %585 = sub i64 %584, 1
  store i64 %585, i64* %STACK_DEP_PTR
  %586 = load i64, i64* %STACK_DEP_PTR
  %587 = getelementptr i256, i256* %STACK, i64 %586
  %588 = load i256, i256* %587
  %589 = load i64, i64* %STACK_DEP_PTR
  %590 = sub i64 %589, 1
  store i64 %590, i64* %STACK_DEP_PTR
  %591 = add i256 %578, %588
  %"SUM < LHS111" = icmp ult i256 %591, %578
  %592 = select i1 %"SUM < LHS111", i8 4, i8 0
  %593 = call i32 @get_thread_id()
  call void @addBugSet(i32 %593, i8 %592, i32 296)
  %594 = add i256 %578, %588, !pc !16, !intsan !8
  %595 = and i256 31, %578
  %596 = icmp eq i256 %595, 0
  %597 = trunc i256 332 to i64
  %jump.check35 = icmp ne i1 %596, false
  store i64 %597, i64* %JMP_TARGET_PTR
  %598 = load i64, i64* %STACK_DEP_PTR
  %599 = add i64 %598, 1
  store i64 %599, i64* %STACK_DEP_PTR
  %600 = load i64, i64* %STACK_DEP_PTR
  %601 = getelementptr i256, i256* %STACK, i64 %600
  store i256 %594, i256* %601
  %602 = load i64, i64* %STACK_DEP_PTR
  %603 = add i64 %602, 1
  store i64 %603, i64* %STACK_DEP_PTR
  %604 = load i64, i64* %STACK_DEP_PTR
  %605 = getelementptr i256, i256* %STACK, i64 %604
  store i256 %595, i256* %605
  br i1 %jump.check35, label %JumpTable, label %.307, !EVMBB !4

.307:                                             ; preds = %546
  %606 = load i64, i64* %STACK_DEP_PTR
  %607 = getelementptr i256, i256* %STACK, i64 %606
  %608 = load i256, i256* %607
  %609 = load i64, i64* %STACK_DEP_PTR
  %610 = sub i64 %609, 1
  store i64 %610, i64* %STACK_DEP_PTR
  %611 = load i64, i64* %STACK_DEP_PTR
  %612 = getelementptr i256, i256* %STACK, i64 %611
  %613 = load i256, i256* %612
  %614 = load i64, i64* %STACK_DEP_PTR
  %615 = sub i64 %614, 1
  store i64 %615, i64* %STACK_DEP_PTR
  %"LHS < RHS112" = icmp ult i256 %613, %608
  %616 = select i1 %"LHS < RHS112", i8 4, i8 0
  %617 = call i32 @get_thread_id()
  call void @addBugSet(i32 %617, i8 %616, i32 309)
  %618 = sub i256 %613, %608, !pc !17, !intsan !10
  %619 = trunc i256 %618 to i64
  %620 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %619, i256* %620)
  %621 = load i256, i256* %620
  %"LHS < RHS113" = icmp ult i256 32, %608
  %622 = select i1 %"LHS < RHS113", i8 4, i8 0
  %623 = call i32 @get_thread_id()
  call void @addBugSet(i32 %623, i8 %622, i32 317)
  %624 = sub i256 32, %608, !pc !18, !intsan !10
  %625 = alloca i256
  store i256 256, i256* %625
  %626 = alloca i256
  store i256 %624, i256* %626
  %627 = alloca i256
  call void @__power_word(i256* %625, i256* %626, i256* %627)
  %628 = load volatile i256, i256* %627
  %"LHS < RHS114" = icmp ult i256 %628, 1
  %629 = select i1 %"LHS < RHS114", i8 4, i8 0
  %630 = call i32 @get_thread_id()
  call void @addBugSet(i32 %630, i8 %629, i32 322)
  %631 = sub i256 %628, 1, !pc !19, !intsan !10
  %632 = xor i256 %631, -1
  %633 = and i256 %632, %621
  %634 = trunc i256 %618 to i64
  %635 = alloca i256
  store i256 %633, i256* %635
  %636 = bitcast i256* %635 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %634, i8* %636, i64 32)
  %637 = add i256 32, %618
  %"SUM < LHS115" = icmp ult i256 %637, 32
  %638 = select i1 %"SUM < LHS115", i8 4, i8 0
  %639 = call i32 @get_thread_id()
  call void @addBugSet(i32 %639, i8 %638, i32 329)
  %640 = add i256 32, %618, !pc !20, !intsan !8
  %641 = load i64, i64* %STACK_DEP_PTR
  %642 = add i64 %641, 1
  store i64 %642, i64* %STACK_DEP_PTR
  %643 = load i64, i64* %STACK_DEP_PTR
  %644 = getelementptr i256, i256* %STACK, i64 %643
  store i256 %640, i256* %644
  %645 = load i64, i64* %STACK_DEP_PTR
  %646 = add i64 %645, 1
  store i64 %646, i64* %STACK_DEP_PTR
  %647 = load i64, i64* %STACK_DEP_PTR
  %648 = getelementptr i256, i256* %STACK, i64 %647
  store i256 %608, i256* %648
  br label %.332

.332:                                             ; preds = %JumpTableCase100, %.307
  %649 = load i64, i64* %remaing_gas
  %650 = icmp ugt i64 296, %649
  br i1 %650, label %Abort, label %651

651:                                              ; preds = %.332
  %652 = load i32, i32* %__afl_state, !nosanitize !3
  %653 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %654 = xor i32 %653, 791
  %655 = xor i32 %652, %654
  %656 = and i32 %655, 4095
  %657 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %656
  %658 = load i8, i8 addrspace(1)* %657, !nosanitize !3
  %659 = add i8 %658, 1
  store i8 %659, i8 addrspace(1)* %657, !nosanitize !3
  store i32 395, i32* %__afl_prev_loc, !nosanitize !3
  %660 = sub i64 %649, 296
  store i64 %660, i64* %remaing_gas
  %661 = load i64, i64* %STACK_DEP_PTR
  %662 = getelementptr i256, i256* %STACK, i64 %661
  %663 = load i256, i256* %662
  %664 = load i64, i64* %STACK_DEP_PTR
  %665 = sub i64 %664, 1
  store i64 %665, i64* %STACK_DEP_PTR
  %666 = load i64, i64* %STACK_DEP_PTR
  %667 = getelementptr i256, i256* %STACK, i64 %666
  %668 = load i256, i256* %667
  %669 = load i64, i64* %STACK_DEP_PTR
  %670 = sub i64 %669, 1
  store i64 %670, i64* %STACK_DEP_PTR
  %671 = load i64, i64* %STACK_DEP_PTR
  %672 = getelementptr i256, i256* %STACK, i64 %671
  %673 = load i256, i256* %672
  %674 = load i64, i64* %STACK_DEP_PTR
  %675 = sub i64 %674, 1
  store i64 %675, i64* %STACK_DEP_PTR
  %676 = load i64, i64* %STACK_DEP_PTR
  %677 = getelementptr i256, i256* %STACK, i64 %676
  %678 = load i256, i256* %677
  %679 = load i64, i64* %STACK_DEP_PTR
  %680 = sub i64 %679, 1
  store i64 %680, i64* %STACK_DEP_PTR
  %681 = load i64, i64* %STACK_DEP_PTR
  %682 = getelementptr i256, i256* %STACK, i64 %681
  %683 = load i256, i256* %682
  %684 = load i64, i64* %STACK_DEP_PTR
  %685 = sub i64 %684, 1
  store i64 %685, i64* %STACK_DEP_PTR
  %686 = trunc i256 64 to i64
  %687 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %686, i256* %687)
  %688 = load i256, i256* %687
  %"LHS < RHS116" = icmp ult i256 %668, %688
  %689 = select i1 %"LHS < RHS116", i8 4, i8 0
  %690 = call i32 @get_thread_id()
  call void @addBugSet(i32 %690, i8 %689, i32 343)
  %691 = sub i256 %668, %688, !pc !21, !intsan !10
  br label %Exit, !EVMBB !4

.346:                                             ; preds = %JumpTableCase39
  %692 = load i64, i64* %remaing_gas
  %693 = icmp ugt i64 104, %692
  br i1 %693, label %Abort, label %694

694:                                              ; preds = %.346
  %695 = load i32, i32* %__afl_state, !nosanitize !3
  %696 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %697 = xor i32 %696, 2793
  %698 = xor i32 %695, %697
  %699 = and i32 %698, 4095
  %700 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %699
  %701 = load i8, i8 addrspace(1)* %700, !nosanitize !3
  %702 = add i8 %701, 1
  store i8 %702, i8 addrspace(1)* %700, !nosanitize !3
  store i32 1396, i32* %__afl_prev_loc, !nosanitize !3
  %703 = sub i64 %692, 104
  store i64 %703, i64* %remaing_gas
  %704 = icmp eq i64 %2, 0
  %705 = trunc i256 358 to i64
  %jump.check5 = icmp ne i1 %704, false
  store i64 %705, i64* %JMP_TARGET_PTR
  %706 = load i64, i64* %STACK_DEP_PTR
  %707 = add i64 %706, 1
  store i64 %707, i64* %STACK_DEP_PTR
  %708 = zext i64 %2 to i256
  %709 = load i64, i64* %STACK_DEP_PTR
  %710 = getelementptr i256, i256* %STACK, i64 %709
  store i256 %708, i256* %710
  br i1 %jump.check5, label %JumpTable, label %.354, !EVMBB !4

.354:                                             ; preds = %694
  %711 = load i64, i64* %remaing_gas
  %712 = icmp ugt i64 40, %711
  br i1 %712, label %Abort, label %713

713:                                              ; preds = %.354
  %714 = load i32, i32* %__afl_state, !nosanitize !3
  %715 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %716 = xor i32 %715, 2260
  %717 = xor i32 %714, %716
  %718 = and i32 %717, 4095
  %719 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %718
  %720 = load i8, i8 addrspace(1)* %719, !nosanitize !3
  %721 = add i8 %720, 1
  store i8 %721, i8 addrspace(1)* %719, !nosanitize !3
  store i32 1130, i32* %__afl_prev_loc, !nosanitize !3
  %722 = sub i64 %711, 40
  store i64 %722, i64* %remaing_gas
  %723 = load i64, i64* %STACK_DEP_PTR
  %724 = sub i64 %723, 0
  store i64 %724, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.358:                                             ; preds = %JumpTableCase42
  %725 = load i64, i64* %remaing_gas
  %726 = icmp ugt i64 352, %725
  br i1 %726, label %Abort, label %727

727:                                              ; preds = %.358
  %728 = load i32, i32* %__afl_state, !nosanitize !3
  %729 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %730 = xor i32 %729, 3250
  %731 = xor i32 %728, %730
  %732 = and i32 %731, 4095
  %733 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %732
  %734 = load i8, i8 addrspace(1)* %733, !nosanitize !3
  %735 = add i8 %734, 1
  store i8 %735, i8 addrspace(1)* %733, !nosanitize !3
  store i32 1625, i32* %__afl_prev_loc, !nosanitize !3
  %736 = sub i64 %725, 352
  store i64 %736, i64* %remaing_gas
  %737 = load i64, i64* %STACK_DEP_PTR
  %738 = getelementptr i256, i256* %STACK, i64 %737
  %739 = load i256, i256* %738
  %740 = load i64, i64* %STACK_DEP_PTR
  %741 = sub i64 %740, 1
  store i64 %741, i64* %STACK_DEP_PTR
  %742 = zext i32 %3 to i256
  %"LHS < RHS117" = icmp ult i256 %742, 4
  %743 = select i1 %"LHS < RHS117", i8 4, i8 0
  %744 = call i32 @get_thread_id()
  call void @addBugSet(i32 %744, i8 %743, i32 367)
  %745 = sub i256 %742, 4, !pc !22, !intsan !10
  %746 = add i256 4, %745
  %"SUM < LHS118" = icmp ult i256 %746, 4
  %747 = select i1 %"SUM < LHS118", i8 4, i8 0
  %748 = call i32 @get_thread_id()
  call void @addBugSet(i32 %748, i8 %747, i32 369)
  %749 = add i256 4, %745, !pc !23, !intsan !8
  %750 = trunc i256 4 to i64
  %751 = alloca i256
  %752 = bitcast i256* %751 to i8*
  call void @__device_calldataload(i8* %752, i8 addrspace(1)* %4, i64 %750)
  %753 = load i256, i256* %751
  %754 = and i256 1461501637330902918203684832716283019655932542975, %753
  %755 = call i32 @get_thread_id()
  call void @addBugSet(i32 %755, i8 0, i32 399)
  %756 = add i256 32, 4, !pc !24, !intsan !8
  %757 = trunc i256 %756 to i64
  %758 = alloca i256
  %759 = bitcast i256* %758 to i8*
  call void @__device_calldataload(i8* %759, i8 addrspace(1)* %4, i64 %757)
  %760 = load i256, i256* %758
  %761 = add i256 32, %756
  %"SUM < LHS119" = icmp ult i256 %761, 32
  %762 = select i1 %"SUM < LHS119", i8 4, i8 0
  %763 = call i32 @get_thread_id()
  call void @addBugSet(i32 %763, i8 %762, i32 409)
  %764 = add i256 32, %756, !pc !25, !intsan !8
  %765 = trunc i256 1384 to i64
  store i64 %765, i64* %JMP_TARGET_PTR
  %766 = load i64, i64* %STACK_DEP_PTR
  %767 = add i64 %766, 1
  store i64 %767, i64* %STACK_DEP_PTR
  %768 = load i64, i64* %STACK_DEP_PTR
  %769 = getelementptr i256, i256* %STACK, i64 %768
  store i256 421, i256* %769
  %770 = load i64, i64* %STACK_DEP_PTR
  %771 = add i64 %770, 1
  store i64 %771, i64* %STACK_DEP_PTR
  %772 = load i64, i64* %STACK_DEP_PTR
  %773 = getelementptr i256, i256* %STACK, i64 %772
  store i256 %754, i256* %773
  %774 = load i64, i64* %STACK_DEP_PTR
  %775 = add i64 %774, 1
  store i64 %775, i64* %STACK_DEP_PTR
  %776 = load i64, i64* %STACK_DEP_PTR
  %777 = getelementptr i256, i256* %STACK, i64 %776
  store i256 %760, i256* %777
  br label %JumpTable, !EVMBB !4

.421:                                             ; preds = %JumpTableCase61
  %778 = load i64, i64* %remaing_gas
  %779 = icmp ugt i64 224, %778
  br i1 %779, label %Abort, label %780

780:                                              ; preds = %.421
  %781 = load i32, i32* %__afl_state, !nosanitize !3
  %782 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %783 = xor i32 %782, 198
  %784 = xor i32 %781, %783
  %785 = and i32 %784, 4095
  %786 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %785
  %787 = load i8, i8 addrspace(1)* %786, !nosanitize !3
  %788 = add i8 %787, 1
  store i8 %788, i8 addrspace(1)* %786, !nosanitize !3
  store i32 99, i32* %__afl_prev_loc, !nosanitize !3
  %789 = sub i64 %778, 224
  store i64 %789, i64* %remaing_gas
  %790 = load i64, i64* %STACK_DEP_PTR
  %791 = getelementptr i256, i256* %STACK, i64 %790
  %792 = load i256, i256* %791
  %793 = load i64, i64* %STACK_DEP_PTR
  %794 = sub i64 %793, 1
  store i64 %794, i64* %STACK_DEP_PTR
  %795 = trunc i256 64 to i64
  %796 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %795, i256* %796)
  %797 = load i256, i256* %796
  %798 = icmp eq i256 %792, 0
  %799 = icmp eq i1 %798, false
  %800 = icmp eq i1 %799, false
  %801 = icmp eq i1 %800, false
  %802 = trunc i256 %797 to i64
  %803 = zext i1 %801 to i256
  %804 = alloca i256
  store i256 %803, i256* %804
  %805 = bitcast i256* %804 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %802, i8* %805, i64 32)
  %806 = add i256 32, %797
  %"SUM < LHS120" = icmp ult i256 %806, 32
  %807 = select i1 %"SUM < LHS120", i8 4, i8 0
  %808 = call i32 @get_thread_id()
  call void @addBugSet(i32 %808, i8 %807, i32 435)
  %809 = add i256 32, %797, !pc !26, !intsan !8
  %810 = trunc i256 64 to i64
  %811 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %810, i256* %811)
  %812 = load i256, i256* %811
  %"LHS < RHS121" = icmp ult i256 %809, %812
  %813 = select i1 %"LHS < RHS121", i8 4, i8 0
  %814 = call i32 @get_thread_id()
  call void @addBugSet(i32 %814, i8 %813, i32 444)
  %815 = sub i256 %809, %812, !pc !27, !intsan !10
  br label %Exit, !EVMBB !4

.447:                                             ; preds = %JumpTableCase41
  %816 = load i64, i64* %remaing_gas
  %817 = icmp ugt i64 104, %816
  br i1 %817, label %Abort, label %818

818:                                              ; preds = %.447
  %819 = load i32, i32* %__afl_state, !nosanitize !3
  %820 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %821 = xor i32 %820, 3764
  %822 = xor i32 %819, %821
  %823 = and i32 %822, 4095
  %824 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %823
  %825 = load i8, i8 addrspace(1)* %824, !nosanitize !3
  %826 = add i8 %825, 1
  store i8 %826, i8 addrspace(1)* %824, !nosanitize !3
  store i32 1882, i32* %__afl_prev_loc, !nosanitize !3
  %827 = sub i64 %816, 104
  store i64 %827, i64* %remaing_gas
  %828 = icmp eq i64 %2, 0
  %829 = trunc i256 459 to i64
  %jump.check7 = icmp ne i1 %828, false
  store i64 %829, i64* %JMP_TARGET_PTR
  %830 = load i64, i64* %STACK_DEP_PTR
  %831 = add i64 %830, 1
  store i64 %831, i64* %STACK_DEP_PTR
  %832 = zext i64 %2 to i256
  %833 = load i64, i64* %STACK_DEP_PTR
  %834 = getelementptr i256, i256* %STACK, i64 %833
  store i256 %832, i256* %834
  br i1 %jump.check7, label %JumpTable, label %.455, !EVMBB !4

.455:                                             ; preds = %818
  %835 = load i64, i64* %remaing_gas
  %836 = icmp ugt i64 40, %835
  br i1 %836, label %Abort, label %837

837:                                              ; preds = %.455
  %838 = load i32, i32* %__afl_state, !nosanitize !3
  %839 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %840 = xor i32 %839, 1553
  %841 = xor i32 %838, %840
  %842 = and i32 %841, 4095
  %843 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %842
  %844 = load i8, i8 addrspace(1)* %843, !nosanitize !3
  %845 = add i8 %844, 1
  store i8 %845, i8 addrspace(1)* %843, !nosanitize !3
  store i32 776, i32* %__afl_prev_loc, !nosanitize !3
  %846 = sub i64 %835, 40
  store i64 %846, i64* %remaing_gas
  %847 = load i64, i64* %STACK_DEP_PTR
  %848 = sub i64 %847, 0
  store i64 %848, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.459:                                             ; preds = %JumpTableCase45
  %849 = load i64, i64* %remaing_gas
  %850 = icmp ugt i64 128, %849
  br i1 %850, label %Abort, label %851

851:                                              ; preds = %.459
  %852 = load i32, i32* %__afl_state, !nosanitize !3
  %853 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %854 = xor i32 %853, 3458
  %855 = xor i32 %852, %854
  %856 = and i32 %855, 4095
  %857 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %856
  %858 = load i8, i8 addrspace(1)* %857, !nosanitize !3
  %859 = add i8 %858, 1
  store i8 %859, i8 addrspace(1)* %857, !nosanitize !3
  store i32 1729, i32* %__afl_prev_loc, !nosanitize !3
  %860 = sub i64 %849, 128
  store i64 %860, i64* %remaing_gas
  %861 = load i64, i64* %STACK_DEP_PTR
  %862 = getelementptr i256, i256* %STACK, i64 %861
  %863 = load i256, i256* %862
  %864 = load i64, i64* %STACK_DEP_PTR
  %865 = sub i64 %864, 1
  store i64 %865, i64* %STACK_DEP_PTR
  %866 = trunc i256 1775 to i64
  store i64 %866, i64* %JMP_TARGET_PTR
  %867 = load i64, i64* %STACK_DEP_PTR
  %868 = add i64 %867, 1
  store i64 %868, i64* %STACK_DEP_PTR
  %869 = load i64, i64* %STACK_DEP_PTR
  %870 = getelementptr i256, i256* %STACK, i64 %869
  store i256 468, i256* %870
  br label %JumpTable, !EVMBB !4

.468:                                             ; preds = %JumpTableCase55
  %871 = load i64, i64* %remaing_gas
  %872 = icmp ugt i64 184, %871
  br i1 %872, label %Abort, label %873

873:                                              ; preds = %.468
  %874 = load i32, i32* %__afl_state, !nosanitize !3
  %875 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %876 = xor i32 %875, 1601
  %877 = xor i32 %874, %876
  %878 = and i32 %877, 4095
  %879 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %878
  %880 = load i8, i8 addrspace(1)* %879, !nosanitize !3
  %881 = add i8 %880, 1
  store i8 %881, i8 addrspace(1)* %879, !nosanitize !3
  store i32 800, i32* %__afl_prev_loc, !nosanitize !3
  %882 = sub i64 %871, 184
  store i64 %882, i64* %remaing_gas
  %883 = load i64, i64* %STACK_DEP_PTR
  %884 = getelementptr i256, i256* %STACK, i64 %883
  %885 = load i256, i256* %884
  %886 = load i64, i64* %STACK_DEP_PTR
  %887 = sub i64 %886, 1
  store i64 %887, i64* %STACK_DEP_PTR
  %888 = trunc i256 64 to i64
  %889 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %888, i256* %889)
  %890 = load i256, i256* %889
  %891 = trunc i256 %890 to i64
  %892 = alloca i256
  store i256 %885, i256* %892
  %893 = bitcast i256* %892 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %891, i8* %893, i64 32)
  %894 = add i256 32, %890
  %"SUM < LHS122" = icmp ult i256 %894, 32
  %895 = select i1 %"SUM < LHS122", i8 4, i8 0
  %896 = call i32 @get_thread_id()
  call void @addBugSet(i32 %896, i8 %895, i32 478)
  %897 = add i256 32, %890, !pc !28, !intsan !8
  %898 = trunc i256 64 to i64
  %899 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %898, i256* %899)
  %900 = load i256, i256* %899
  %"LHS < RHS123" = icmp ult i256 %897, %900
  %901 = select i1 %"LHS < RHS123", i8 4, i8 0
  %902 = call i32 @get_thread_id()
  call void @addBugSet(i32 %902, i8 %901, i32 487)
  %903 = sub i256 %897, %900, !pc !29, !intsan !10
  br label %Exit, !EVMBB !4

.490:                                             ; preds = %JumpTableCase44
  %904 = load i64, i64* %remaing_gas
  %905 = icmp ugt i64 104, %904
  br i1 %905, label %Abort, label %906

906:                                              ; preds = %.490
  %907 = load i32, i32* %__afl_state, !nosanitize !3
  %908 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %909 = xor i32 %908, 3389
  %910 = xor i32 %907, %909
  %911 = and i32 %910, 4095
  %912 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %911
  %913 = load i8, i8 addrspace(1)* %912, !nosanitize !3
  %914 = add i8 %913, 1
  store i8 %914, i8 addrspace(1)* %912, !nosanitize !3
  store i32 1694, i32* %__afl_prev_loc, !nosanitize !3
  %915 = sub i64 %904, 104
  store i64 %915, i64* %remaing_gas
  %916 = icmp eq i64 %2, 0
  %917 = trunc i256 502 to i64
  %jump.check9 = icmp ne i1 %916, false
  store i64 %917, i64* %JMP_TARGET_PTR
  %918 = load i64, i64* %STACK_DEP_PTR
  %919 = add i64 %918, 1
  store i64 %919, i64* %STACK_DEP_PTR
  %920 = zext i64 %2 to i256
  %921 = load i64, i64* %STACK_DEP_PTR
  %922 = getelementptr i256, i256* %STACK, i64 %921
  store i256 %920, i256* %922
  br i1 %jump.check9, label %JumpTable, label %.498, !EVMBB !4

.498:                                             ; preds = %906
  %923 = load i64, i64* %remaing_gas
  %924 = icmp ugt i64 40, %923
  br i1 %924, label %Abort, label %925

925:                                              ; preds = %.498
  %926 = load i32, i32* %__afl_state, !nosanitize !3
  %927 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %928 = xor i32 %927, 135
  %929 = xor i32 %926, %928
  %930 = and i32 %929, 4095
  %931 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %930
  %932 = load i8, i8 addrspace(1)* %931, !nosanitize !3
  %933 = add i8 %932, 1
  store i8 %933, i8 addrspace(1)* %931, !nosanitize !3
  store i32 67, i32* %__afl_prev_loc, !nosanitize !3
  %934 = sub i64 %923, 40
  store i64 %934, i64* %remaing_gas
  %935 = load i64, i64* %STACK_DEP_PTR
  %936 = sub i64 %935, 0
  store i64 %936, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.502:                                             ; preds = %JumpTableCase49
  %937 = load i64, i64* %remaing_gas
  %938 = icmp ugt i64 456, %937
  br i1 %938, label %Abort, label %939

939:                                              ; preds = %.502
  %940 = load i32, i32* %__afl_state, !nosanitize !3
  %941 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %942 = xor i32 %941, 3561
  %943 = xor i32 %940, %942
  %944 = and i32 %943, 4095
  %945 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %944
  %946 = load i8, i8 addrspace(1)* %945, !nosanitize !3
  %947 = add i8 %946, 1
  store i8 %947, i8 addrspace(1)* %945, !nosanitize !3
  store i32 1780, i32* %__afl_prev_loc, !nosanitize !3
  %948 = sub i64 %937, 456
  store i64 %948, i64* %remaing_gas
  %949 = load i64, i64* %STACK_DEP_PTR
  %950 = getelementptr i256, i256* %STACK, i64 %949
  %951 = load i256, i256* %950
  %952 = load i64, i64* %STACK_DEP_PTR
  %953 = sub i64 %952, 1
  store i64 %953, i64* %STACK_DEP_PTR
  %954 = zext i32 %3 to i256
  %"LHS < RHS124" = icmp ult i256 %954, 4
  %955 = select i1 %"LHS < RHS124", i8 4, i8 0
  %956 = call i32 @get_thread_id()
  call void @addBugSet(i32 %956, i8 %955, i32 511)
  %957 = sub i256 %954, 4, !pc !30, !intsan !10
  %958 = add i256 4, %957
  %"SUM < LHS125" = icmp ult i256 %958, 4
  %959 = select i1 %"SUM < LHS125", i8 4, i8 0
  %960 = call i32 @get_thread_id()
  call void @addBugSet(i32 %960, i8 %959, i32 513)
  %961 = add i256 4, %957, !pc !31, !intsan !8
  %962 = trunc i256 4 to i64
  %963 = alloca i256
  %964 = bitcast i256* %963 to i8*
  call void @__device_calldataload(i8* %964, i8 addrspace(1)* %4, i64 %962)
  %965 = load i256, i256* %963
  %966 = and i256 1461501637330902918203684832716283019655932542975, %965
  %967 = call i32 @get_thread_id()
  call void @addBugSet(i32 %967, i8 0, i32 543)
  %968 = add i256 32, 4, !pc !32, !intsan !8
  %969 = trunc i256 %968 to i64
  %970 = alloca i256
  %971 = bitcast i256* %970 to i8*
  call void @__device_calldataload(i8* %971, i8 addrspace(1)* %4, i64 %969)
  %972 = load i256, i256* %970
  %973 = and i256 1461501637330902918203684832716283019655932542975, %972
  %974 = add i256 32, %968
  %"SUM < LHS126" = icmp ult i256 %974, 32
  %975 = select i1 %"SUM < LHS126", i8 4, i8 0
  %976 = call i32 @get_thread_id()
  call void @addBugSet(i32 %976, i8 %975, i32 575)
  %977 = add i256 32, %968, !pc !33, !intsan !8
  %978 = trunc i256 %977 to i64
  %979 = alloca i256
  %980 = bitcast i256* %979 to i8*
  call void @__device_calldataload(i8* %980, i8 addrspace(1)* %4, i64 %978)
  %981 = load i256, i256* %979
  %982 = add i256 32, %977
  %"SUM < LHS127" = icmp ult i256 %982, 32
  %983 = select i1 %"SUM < LHS127", i8 4, i8 0
  %984 = call i32 @get_thread_id()
  call void @addBugSet(i32 %984, i8 %983, i32 585)
  %985 = add i256 32, %977, !pc !34, !intsan !8
  %986 = trunc i256 1784 to i64
  store i64 %986, i64* %JMP_TARGET_PTR
  %987 = load i64, i64* %STACK_DEP_PTR
  %988 = add i64 %987, 1
  store i64 %988, i64* %STACK_DEP_PTR
  %989 = load i64, i64* %STACK_DEP_PTR
  %990 = getelementptr i256, i256* %STACK, i64 %989
  store i256 597, i256* %990
  %991 = load i64, i64* %STACK_DEP_PTR
  %992 = add i64 %991, 1
  store i64 %992, i64* %STACK_DEP_PTR
  %993 = load i64, i64* %STACK_DEP_PTR
  %994 = getelementptr i256, i256* %STACK, i64 %993
  store i256 %966, i256* %994
  %995 = load i64, i64* %STACK_DEP_PTR
  %996 = add i64 %995, 1
  store i64 %996, i64* %STACK_DEP_PTR
  %997 = load i64, i64* %STACK_DEP_PTR
  %998 = getelementptr i256, i256* %STACK, i64 %997
  store i256 %973, i256* %998
  %999 = load i64, i64* %STACK_DEP_PTR
  %1000 = add i64 %999, 1
  store i64 %1000, i64* %STACK_DEP_PTR
  %1001 = load i64, i64* %STACK_DEP_PTR
  %1002 = getelementptr i256, i256* %STACK, i64 %1001
  store i256 %981, i256* %1002
  br label %JumpTable, !EVMBB !4

.597:                                             ; preds = %JumpTableCase92
  %1003 = load i64, i64* %remaing_gas
  %1004 = icmp ugt i64 224, %1003
  br i1 %1004, label %Abort, label %1005

1005:                                             ; preds = %.597
  %1006 = load i32, i32* %__afl_state, !nosanitize !3
  %1007 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1008 = xor i32 %1007, 1185
  %1009 = xor i32 %1006, %1008
  %1010 = and i32 %1009, 4095
  %1011 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1010
  %1012 = load i8, i8 addrspace(1)* %1011, !nosanitize !3
  %1013 = add i8 %1012, 1
  store i8 %1013, i8 addrspace(1)* %1011, !nosanitize !3
  store i32 592, i32* %__afl_prev_loc, !nosanitize !3
  %1014 = sub i64 %1003, 224
  store i64 %1014, i64* %remaing_gas
  %1015 = load i64, i64* %STACK_DEP_PTR
  %1016 = getelementptr i256, i256* %STACK, i64 %1015
  %1017 = load i256, i256* %1016
  %1018 = load i64, i64* %STACK_DEP_PTR
  %1019 = sub i64 %1018, 1
  store i64 %1019, i64* %STACK_DEP_PTR
  %1020 = trunc i256 64 to i64
  %1021 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1020, i256* %1021)
  %1022 = load i256, i256* %1021
  %1023 = icmp eq i256 %1017, 0
  %1024 = icmp eq i1 %1023, false
  %1025 = icmp eq i1 %1024, false
  %1026 = icmp eq i1 %1025, false
  %1027 = trunc i256 %1022 to i64
  %1028 = zext i1 %1026 to i256
  %1029 = alloca i256
  store i256 %1028, i256* %1029
  %1030 = bitcast i256* %1029 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1027, i8* %1030, i64 32)
  %1031 = add i256 32, %1022
  %"SUM < LHS128" = icmp ult i256 %1031, 32
  %1032 = select i1 %"SUM < LHS128", i8 4, i8 0
  %1033 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1033, i8 %1032, i32 611)
  %1034 = add i256 32, %1022, !pc !35, !intsan !8
  %1035 = trunc i256 64 to i64
  %1036 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1035, i256* %1036)
  %1037 = load i256, i256* %1036
  %"LHS < RHS129" = icmp ult i256 %1034, %1037
  %1038 = select i1 %"LHS < RHS129", i8 4, i8 0
  %1039 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1039, i8 %1038, i32 620)
  %1040 = sub i256 %1034, %1037, !pc !36, !intsan !10
  br label %Exit, !EVMBB !4

.623:                                             ; preds = %JumpTableCase48
  %1041 = load i64, i64* %remaing_gas
  %1042 = icmp ugt i64 104, %1041
  br i1 %1042, label %Abort, label %1043

1043:                                             ; preds = %.623
  %1044 = load i32, i32* %__afl_state, !nosanitize !3
  %1045 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1046 = xor i32 %1045, 2273
  %1047 = xor i32 %1044, %1046
  %1048 = and i32 %1047, 4095
  %1049 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1048
  %1050 = load i8, i8 addrspace(1)* %1049, !nosanitize !3
  %1051 = add i8 %1050, 1
  store i8 %1051, i8 addrspace(1)* %1049, !nosanitize !3
  store i32 1136, i32* %__afl_prev_loc, !nosanitize !3
  %1052 = sub i64 %1041, 104
  store i64 %1052, i64* %remaing_gas
  %1053 = icmp eq i64 %2, 0
  %1054 = trunc i256 635 to i64
  %jump.check12 = icmp ne i1 %1053, false
  store i64 %1054, i64* %JMP_TARGET_PTR
  %1055 = load i64, i64* %STACK_DEP_PTR
  %1056 = add i64 %1055, 1
  store i64 %1056, i64* %STACK_DEP_PTR
  %1057 = zext i64 %2 to i256
  %1058 = load i64, i64* %STACK_DEP_PTR
  %1059 = getelementptr i256, i256* %STACK, i64 %1058
  store i256 %1057, i256* %1059
  br i1 %jump.check12, label %JumpTable, label %.631, !EVMBB !4

.631:                                             ; preds = %1043
  %1060 = load i64, i64* %remaing_gas
  %1061 = icmp ugt i64 40, %1060
  br i1 %1061, label %Abort, label %1062

1062:                                             ; preds = %.631
  %1063 = load i32, i32* %__afl_state, !nosanitize !3
  %1064 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1065 = xor i32 %1064, 871
  %1066 = xor i32 %1063, %1065
  %1067 = and i32 %1066, 4095
  %1068 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1067
  %1069 = load i8, i8 addrspace(1)* %1068, !nosanitize !3
  %1070 = add i8 %1069, 1
  store i8 %1070, i8 addrspace(1)* %1068, !nosanitize !3
  store i32 435, i32* %__afl_prev_loc, !nosanitize !3
  %1071 = sub i64 %1060, 40
  store i64 %1071, i64* %remaing_gas
  %1072 = load i64, i64* %STACK_DEP_PTR
  %1073 = sub i64 %1072, 0
  store i64 %1073, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.635:                                             ; preds = %JumpTableCase53
  %1074 = load i64, i64* %remaing_gas
  %1075 = icmp ugt i64 128, %1074
  br i1 %1075, label %Abort, label %1076

1076:                                             ; preds = %.635
  %1077 = load i32, i32* %__afl_state, !nosanitize !3
  %1078 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1079 = xor i32 %1078, 3841
  %1080 = xor i32 %1077, %1079
  %1081 = and i32 %1080, 4095
  %1082 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1081
  %1083 = load i8, i8 addrspace(1)* %1082, !nosanitize !3
  %1084 = add i8 %1083, 1
  store i8 %1084, i8 addrspace(1)* %1082, !nosanitize !3
  store i32 1920, i32* %__afl_prev_loc, !nosanitize !3
  %1085 = sub i64 %1074, 128
  store i64 %1085, i64* %remaing_gas
  %1086 = load i64, i64* %STACK_DEP_PTR
  %1087 = getelementptr i256, i256* %STACK, i64 %1086
  %1088 = load i256, i256* %1087
  %1089 = load i64, i64* %STACK_DEP_PTR
  %1090 = sub i64 %1089, 1
  store i64 %1090, i64* %STACK_DEP_PTR
  %1091 = trunc i256 2085 to i64
  store i64 %1091, i64* %JMP_TARGET_PTR
  %1092 = load i64, i64* %STACK_DEP_PTR
  %1093 = add i64 %1092, 1
  store i64 %1093, i64* %STACK_DEP_PTR
  %1094 = load i64, i64* %STACK_DEP_PTR
  %1095 = getelementptr i256, i256* %STACK, i64 %1094
  store i256 644, i256* %1095
  br label %JumpTable, !EVMBB !4

.644:                                             ; preds = %JumpTableCase65
  %1096 = load i64, i64* %remaing_gas
  %1097 = icmp ugt i64 200, %1096
  br i1 %1097, label %Abort, label %1098

1098:                                             ; preds = %.644
  %1099 = load i32, i32* %__afl_state, !nosanitize !3
  %1100 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1101 = xor i32 %1100, 2711
  %1102 = xor i32 %1099, %1101
  %1103 = and i32 %1102, 4095
  %1104 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1103
  %1105 = load i8, i8 addrspace(1)* %1104, !nosanitize !3
  %1106 = add i8 %1105, 1
  store i8 %1106, i8 addrspace(1)* %1104, !nosanitize !3
  store i32 1355, i32* %__afl_prev_loc, !nosanitize !3
  %1107 = sub i64 %1096, 200
  store i64 %1107, i64* %remaing_gas
  %1108 = load i64, i64* %STACK_DEP_PTR
  %1109 = getelementptr i256, i256* %STACK, i64 %1108
  %1110 = load i256, i256* %1109
  %1111 = load i64, i64* %STACK_DEP_PTR
  %1112 = sub i64 %1111, 1
  store i64 %1112, i64* %STACK_DEP_PTR
  %1113 = trunc i256 64 to i64
  %1114 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1113, i256* %1114)
  %1115 = load i256, i256* %1114
  %1116 = and i256 255, %1110
  %1117 = and i256 255, %1116
  %1118 = trunc i256 %1115 to i64
  %1119 = alloca i256
  store i256 %1117, i256* %1119
  %1120 = bitcast i256* %1119 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1118, i8* %1120, i64 32)
  %1121 = add i256 32, %1115
  %"SUM < LHS130" = icmp ult i256 %1121, 32
  %1122 = select i1 %"SUM < LHS130", i8 4, i8 0
  %1123 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1123, i8 %1122, i32 660)
  %1124 = add i256 32, %1115, !pc !37, !intsan !8
  %1125 = trunc i256 64 to i64
  %1126 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1125, i256* %1126)
  %1127 = load i256, i256* %1126
  %"LHS < RHS131" = icmp ult i256 %1124, %1127
  %1128 = select i1 %"LHS < RHS131", i8 4, i8 0
  %1129 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1129, i8 %1128, i32 669)
  %1130 = sub i256 %1124, %1127, !pc !38, !intsan !10
  br label %Exit, !EVMBB !4

.672:                                             ; preds = %JumpTableCase52
  %1131 = load i64, i64* %remaing_gas
  %1132 = icmp ugt i64 104, %1131
  br i1 %1132, label %Abort, label %1133

1133:                                             ; preds = %.672
  %1134 = load i32, i32* %__afl_state, !nosanitize !3
  %1135 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1136 = xor i32 %1135, 2780
  %1137 = xor i32 %1134, %1136
  %1138 = and i32 %1137, 4095
  %1139 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1138
  %1140 = load i8, i8 addrspace(1)* %1139, !nosanitize !3
  %1141 = add i8 %1140, 1
  store i8 %1141, i8 addrspace(1)* %1139, !nosanitize !3
  store i32 1390, i32* %__afl_prev_loc, !nosanitize !3
  %1142 = sub i64 %1131, 104
  store i64 %1142, i64* %remaing_gas
  %1143 = icmp eq i64 %2, 0
  %1144 = trunc i256 684 to i64
  %jump.check15 = icmp ne i1 %1143, false
  store i64 %1144, i64* %JMP_TARGET_PTR
  %1145 = load i64, i64* %STACK_DEP_PTR
  %1146 = add i64 %1145, 1
  store i64 %1146, i64* %STACK_DEP_PTR
  %1147 = zext i64 %2 to i256
  %1148 = load i64, i64* %STACK_DEP_PTR
  %1149 = getelementptr i256, i256* %STACK, i64 %1148
  store i256 %1147, i256* %1149
  br i1 %jump.check15, label %JumpTable, label %.680, !EVMBB !4

.680:                                             ; preds = %1133
  %1150 = load i64, i64* %remaing_gas
  %1151 = icmp ugt i64 40, %1150
  br i1 %1151, label %Abort, label %1152

1152:                                             ; preds = %.680
  %1153 = load i32, i32* %__afl_state, !nosanitize !3
  %1154 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1155 = xor i32 %1154, 1942
  %1156 = xor i32 %1153, %1155
  %1157 = and i32 %1156, 4095
  %1158 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1157
  %1159 = load i8, i8 addrspace(1)* %1158, !nosanitize !3
  %1160 = add i8 %1159, 1
  store i8 %1160, i8 addrspace(1)* %1158, !nosanitize !3
  store i32 971, i32* %__afl_prev_loc, !nosanitize !3
  %1161 = sub i64 %1150, 40
  store i64 %1161, i64* %remaing_gas
  %1162 = load i64, i64* %STACK_DEP_PTR
  %1163 = sub i64 %1162, 0
  store i64 %1163, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.684:                                             ; preds = %JumpTableCase58
  %1164 = load i64, i64* %remaing_gas
  %1165 = icmp ugt i64 128, %1164
  br i1 %1165, label %Abort, label %1166

1166:                                             ; preds = %.684
  %1167 = load i32, i32* %__afl_state, !nosanitize !3
  %1168 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1169 = xor i32 %1168, 1080
  %1170 = xor i32 %1167, %1169
  %1171 = and i32 %1170, 4095
  %1172 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1171
  %1173 = load i8, i8 addrspace(1)* %1172, !nosanitize !3
  %1174 = add i8 %1173, 1
  store i8 %1174, i8 addrspace(1)* %1172, !nosanitize !3
  store i32 540, i32* %__afl_prev_loc, !nosanitize !3
  %1175 = sub i64 %1164, 128
  store i64 %1175, i64* %remaing_gas
  %1176 = load i64, i64* %STACK_DEP_PTR
  %1177 = getelementptr i256, i256* %STACK, i64 %1176
  %1178 = load i256, i256* %1177
  %1179 = load i64, i64* %STACK_DEP_PTR
  %1180 = sub i64 %1179, 1
  store i64 %1180, i64* %STACK_DEP_PTR
  %1181 = trunc i256 2090 to i64
  store i64 %1181, i64* %JMP_TARGET_PTR
  %1182 = load i64, i64* %STACK_DEP_PTR
  %1183 = add i64 %1182, 1
  store i64 %1183, i64* %STACK_DEP_PTR
  %1184 = load i64, i64* %STACK_DEP_PTR
  %1185 = getelementptr i256, i256* %STACK, i64 %1184
  store i256 693, i256* %1185
  br label %JumpTable, !EVMBB !4

.693:                                             ; preds = %JumpTableCase70
  %1186 = load i64, i64* %remaing_gas
  %1187 = icmp ugt i64 200, %1186
  br i1 %1187, label %Abort, label %1188

1188:                                             ; preds = %.693
  %1189 = load i32, i32* %__afl_state, !nosanitize !3
  %1190 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1191 = xor i32 %1190, 3626
  %1192 = xor i32 %1189, %1191
  %1193 = and i32 %1192, 4095
  %1194 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1193
  %1195 = load i8, i8 addrspace(1)* %1194, !nosanitize !3
  %1196 = add i8 %1195, 1
  store i8 %1196, i8 addrspace(1)* %1194, !nosanitize !3
  store i32 1813, i32* %__afl_prev_loc, !nosanitize !3
  %1197 = sub i64 %1186, 200
  store i64 %1197, i64* %remaing_gas
  %1198 = load i64, i64* %STACK_DEP_PTR
  %1199 = getelementptr i256, i256* %STACK, i64 %1198
  %1200 = load i256, i256* %1199
  %1201 = load i64, i64* %STACK_DEP_PTR
  %1202 = sub i64 %1201, 1
  store i64 %1202, i64* %STACK_DEP_PTR
  %1203 = trunc i256 64 to i64
  %1204 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1203, i256* %1204)
  %1205 = load i256, i256* %1204
  %1206 = and i256 255, %1200
  %1207 = and i256 255, %1206
  %1208 = trunc i256 %1205 to i64
  %1209 = alloca i256
  store i256 %1207, i256* %1209
  %1210 = bitcast i256* %1209 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1208, i8* %1210, i64 32)
  %1211 = add i256 32, %1205
  %"SUM < LHS132" = icmp ult i256 %1211, 32
  %1212 = select i1 %"SUM < LHS132", i8 4, i8 0
  %1213 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1213, i8 %1212, i32 709)
  %1214 = add i256 32, %1205, !pc !39, !intsan !8
  %1215 = trunc i256 64 to i64
  %1216 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1215, i256* %1216)
  %1217 = load i256, i256* %1216
  %"LHS < RHS133" = icmp ult i256 %1214, %1217
  %1218 = select i1 %"LHS < RHS133", i8 4, i8 0
  %1219 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1219, i8 %1218, i32 718)
  %1220 = sub i256 %1214, %1217, !pc !40, !intsan !10
  br label %Exit, !EVMBB !4

.721:                                             ; preds = %JumpTableCase57
  %1221 = load i64, i64* %remaing_gas
  %1222 = icmp ugt i64 104, %1221
  br i1 %1222, label %Abort, label %1223

1223:                                             ; preds = %.721
  %1224 = load i32, i32* %__afl_state, !nosanitize !3
  %1225 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1226 = xor i32 %1225, 3248
  %1227 = xor i32 %1224, %1226
  %1228 = and i32 %1227, 4095
  %1229 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1228
  %1230 = load i8, i8 addrspace(1)* %1229, !nosanitize !3
  %1231 = add i8 %1230, 1
  store i8 %1231, i8 addrspace(1)* %1229, !nosanitize !3
  store i32 1624, i32* %__afl_prev_loc, !nosanitize !3
  %1232 = sub i64 %1221, 104
  store i64 %1232, i64* %remaing_gas
  %1233 = icmp eq i64 %2, 0
  %1234 = trunc i256 733 to i64
  %jump.check18 = icmp ne i1 %1233, false
  store i64 %1234, i64* %JMP_TARGET_PTR
  %1235 = load i64, i64* %STACK_DEP_PTR
  %1236 = add i64 %1235, 1
  store i64 %1236, i64* %STACK_DEP_PTR
  %1237 = zext i64 %2 to i256
  %1238 = load i64, i64* %STACK_DEP_PTR
  %1239 = getelementptr i256, i256* %STACK, i64 %1238
  store i256 %1237, i256* %1239
  br i1 %jump.check18, label %JumpTable, label %.729, !EVMBB !4

.729:                                             ; preds = %1223
  %1240 = load i64, i64* %remaing_gas
  %1241 = icmp ugt i64 40, %1240
  br i1 %1241, label %Abort, label %1242

1242:                                             ; preds = %.729
  %1243 = load i32, i32* %__afl_state, !nosanitize !3
  %1244 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1245 = xor i32 %1244, 1787
  %1246 = xor i32 %1243, %1245
  %1247 = and i32 %1246, 4095
  %1248 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1247
  %1249 = load i8, i8 addrspace(1)* %1248, !nosanitize !3
  %1250 = add i8 %1249, 1
  store i8 %1250, i8 addrspace(1)* %1248, !nosanitize !3
  store i32 893, i32* %__afl_prev_loc, !nosanitize !3
  %1251 = sub i64 %1240, 40
  store i64 %1251, i64* %remaing_gas
  %1252 = load i64, i64* %STACK_DEP_PTR
  %1253 = sub i64 %1252, 0
  store i64 %1253, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.733:                                             ; preds = %JumpTableCase63
  %1254 = load i64, i64* %remaing_gas
  %1255 = icmp ugt i64 128, %1254
  br i1 %1255, label %Abort, label %1256

1256:                                             ; preds = %.733
  %1257 = load i32, i32* %__afl_state, !nosanitize !3
  %1258 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1259 = xor i32 %1258, 3247
  %1260 = xor i32 %1257, %1259
  %1261 = and i32 %1260, 4095
  %1262 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1261
  %1263 = load i8, i8 addrspace(1)* %1262, !nosanitize !3
  %1264 = add i8 %1263, 1
  store i8 %1264, i8 addrspace(1)* %1262, !nosanitize !3
  store i32 1623, i32* %__afl_prev_loc, !nosanitize !3
  %1265 = sub i64 %1254, 128
  store i64 %1265, i64* %remaing_gas
  %1266 = load i64, i64* %STACK_DEP_PTR
  %1267 = getelementptr i256, i256* %STACK, i64 %1266
  %1268 = load i256, i256* %1267
  %1269 = load i64, i64* %STACK_DEP_PTR
  %1270 = sub i64 %1269, 1
  store i64 %1270, i64* %STACK_DEP_PTR
  %1271 = trunc i256 2095 to i64
  store i64 %1271, i64* %JMP_TARGET_PTR
  %1272 = load i64, i64* %STACK_DEP_PTR
  %1273 = add i64 %1272, 1
  store i64 %1273, i64* %STACK_DEP_PTR
  %1274 = load i64, i64* %STACK_DEP_PTR
  %1275 = getelementptr i256, i256* %STACK, i64 %1274
  store i256 742, i256* %1275
  br label %JumpTable, !EVMBB !4

.742:                                             ; preds = %JumpTableCase75
  %1276 = load i64, i64* %remaing_gas
  %1277 = icmp ugt i64 184, %1276
  br i1 %1277, label %Abort, label %1278

1278:                                             ; preds = %.742
  %1279 = load i32, i32* %__afl_state, !nosanitize !3
  %1280 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1281 = xor i32 %1280, 3924
  %1282 = xor i32 %1279, %1281
  %1283 = and i32 %1282, 4095
  %1284 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1283
  %1285 = load i8, i8 addrspace(1)* %1284, !nosanitize !3
  %1286 = add i8 %1285, 1
  store i8 %1286, i8 addrspace(1)* %1284, !nosanitize !3
  store i32 1962, i32* %__afl_prev_loc, !nosanitize !3
  %1287 = sub i64 %1276, 184
  store i64 %1287, i64* %remaing_gas
  %1288 = load i64, i64* %STACK_DEP_PTR
  %1289 = getelementptr i256, i256* %STACK, i64 %1288
  %1290 = load i256, i256* %1289
  %1291 = load i64, i64* %STACK_DEP_PTR
  %1292 = sub i64 %1291, 1
  store i64 %1292, i64* %STACK_DEP_PTR
  %1293 = trunc i256 64 to i64
  %1294 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1293, i256* %1294)
  %1295 = load i256, i256* %1294
  %1296 = trunc i256 %1295 to i64
  %1297 = alloca i256
  store i256 %1290, i256* %1297
  %1298 = bitcast i256* %1297 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1296, i8* %1298, i64 32)
  %1299 = add i256 32, %1295
  %"SUM < LHS134" = icmp ult i256 %1299, 32
  %1300 = select i1 %"SUM < LHS134", i8 4, i8 0
  %1301 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1301, i8 %1300, i32 752)
  %1302 = add i256 32, %1295, !pc !41, !intsan !8
  %1303 = trunc i256 64 to i64
  %1304 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1303, i256* %1304)
  %1305 = load i256, i256* %1304
  %"LHS < RHS135" = icmp ult i256 %1302, %1305
  %1306 = select i1 %"LHS < RHS135", i8 4, i8 0
  %1307 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1307, i8 %1306, i32 761)
  %1308 = sub i256 %1302, %1305, !pc !42, !intsan !10
  br label %Exit, !EVMBB !4

.764:                                             ; preds = %JumpTableCase62
  %1309 = load i64, i64* %remaing_gas
  %1310 = icmp ugt i64 104, %1309
  br i1 %1310, label %Abort, label %1311

1311:                                             ; preds = %.764
  %1312 = load i32, i32* %__afl_state, !nosanitize !3
  %1313 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1314 = xor i32 %1313, 2840
  %1315 = xor i32 %1312, %1314
  %1316 = and i32 %1315, 4095
  %1317 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1316
  %1318 = load i8, i8 addrspace(1)* %1317, !nosanitize !3
  %1319 = add i8 %1318, 1
  store i8 %1319, i8 addrspace(1)* %1317, !nosanitize !3
  store i32 1420, i32* %__afl_prev_loc, !nosanitize !3
  %1320 = sub i64 %1309, 104
  store i64 %1320, i64* %remaing_gas
  %1321 = icmp eq i64 %2, 0
  %1322 = trunc i256 776 to i64
  %jump.check20 = icmp ne i1 %1321, false
  store i64 %1322, i64* %JMP_TARGET_PTR
  %1323 = load i64, i64* %STACK_DEP_PTR
  %1324 = add i64 %1323, 1
  store i64 %1324, i64* %STACK_DEP_PTR
  %1325 = zext i64 %2 to i256
  %1326 = load i64, i64* %STACK_DEP_PTR
  %1327 = getelementptr i256, i256* %STACK, i64 %1326
  store i256 %1325, i256* %1327
  br i1 %jump.check20, label %JumpTable, label %.772, !EVMBB !4

.772:                                             ; preds = %1311
  %1328 = load i64, i64* %remaing_gas
  %1329 = icmp ugt i64 40, %1328
  br i1 %1329, label %Abort, label %1330

1330:                                             ; preds = %.772
  %1331 = load i32, i32* %__afl_state, !nosanitize !3
  %1332 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1333 = xor i32 %1332, 1116
  %1334 = xor i32 %1331, %1333
  %1335 = and i32 %1334, 4095
  %1336 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1335
  %1337 = load i8, i8 addrspace(1)* %1336, !nosanitize !3
  %1338 = add i8 %1337, 1
  store i8 %1338, i8 addrspace(1)* %1336, !nosanitize !3
  store i32 558, i32* %__afl_prev_loc, !nosanitize !3
  %1339 = sub i64 %1328, 40
  store i64 %1339, i64* %remaing_gas
  %1340 = load i64, i64* %STACK_DEP_PTR
  %1341 = sub i64 %1340, 0
  store i64 %1341, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.776:                                             ; preds = %JumpTableCase68
  %1342 = load i64, i64* %remaing_gas
  %1343 = icmp ugt i64 248, %1342
  br i1 %1343, label %Abort, label %1344

1344:                                             ; preds = %.776
  %1345 = load i32, i32* %__afl_state, !nosanitize !3
  %1346 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1347 = xor i32 %1346, 2074
  %1348 = xor i32 %1345, %1347
  %1349 = and i32 %1348, 4095
  %1350 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1349
  %1351 = load i8, i8 addrspace(1)* %1350, !nosanitize !3
  %1352 = add i8 %1351, 1
  store i8 %1352, i8 addrspace(1)* %1350, !nosanitize !3
  store i32 1037, i32* %__afl_prev_loc, !nosanitize !3
  %1353 = sub i64 %1342, 248
  store i64 %1353, i64* %remaing_gas
  %1354 = load i64, i64* %STACK_DEP_PTR
  %1355 = getelementptr i256, i256* %STACK, i64 %1354
  %1356 = load i256, i256* %1355
  %1357 = load i64, i64* %STACK_DEP_PTR
  %1358 = sub i64 %1357, 1
  store i64 %1358, i64* %STACK_DEP_PTR
  %1359 = zext i32 %3 to i256
  %"LHS < RHS136" = icmp ult i256 %1359, 4
  %1360 = select i1 %"LHS < RHS136", i8 4, i8 0
  %1361 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1361, i8 %1360, i32 785)
  %1362 = sub i256 %1359, 4, !pc !43, !intsan !10
  %1363 = add i256 4, %1362
  %"SUM < LHS137" = icmp ult i256 %1363, 4
  %1364 = select i1 %"SUM < LHS137", i8 4, i8 0
  %1365 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1365, i8 %1364, i32 787)
  %1366 = add i256 4, %1362, !pc !44, !intsan !8
  %1367 = trunc i256 4 to i64
  %1368 = alloca i256
  %1369 = bitcast i256* %1368 to i8*
  call void @__device_calldataload(i8* %1369, i8 addrspace(1)* %4, i64 %1367)
  %1370 = load i256, i256* %1368
  %1371 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1371, i8 0, i32 795)
  %1372 = add i256 32, 4, !pc !45, !intsan !8
  %1373 = trunc i256 2106 to i64
  store i64 %1373, i64* %JMP_TARGET_PTR
  %1374 = load i64, i64* %STACK_DEP_PTR
  %1375 = add i64 %1374, 1
  store i64 %1375, i64* %STACK_DEP_PTR
  %1376 = load i64, i64* %STACK_DEP_PTR
  %1377 = getelementptr i256, i256* %STACK, i64 %1376
  store i256 807, i256* %1377
  %1378 = load i64, i64* %STACK_DEP_PTR
  %1379 = add i64 %1378, 1
  store i64 %1379, i64* %STACK_DEP_PTR
  %1380 = load i64, i64* %STACK_DEP_PTR
  %1381 = getelementptr i256, i256* %STACK, i64 %1380
  store i256 %1370, i256* %1381
  br label %JumpTable, !EVMBB !4

.807:                                             ; preds = %JumpTableCase86
  %1382 = load i64, i64* %remaing_gas
  %1383 = icmp ugt i64 224, %1382
  br i1 %1383, label %Abort, label %1384

1384:                                             ; preds = %.807
  %1385 = load i32, i32* %__afl_state, !nosanitize !3
  %1386 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1387 = xor i32 %1386, 2883
  %1388 = xor i32 %1385, %1387
  %1389 = and i32 %1388, 4095
  %1390 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1389
  %1391 = load i8, i8 addrspace(1)* %1390, !nosanitize !3
  %1392 = add i8 %1391, 1
  store i8 %1392, i8 addrspace(1)* %1390, !nosanitize !3
  store i32 1441, i32* %__afl_prev_loc, !nosanitize !3
  %1393 = sub i64 %1382, 224
  store i64 %1393, i64* %remaing_gas
  %1394 = load i64, i64* %STACK_DEP_PTR
  %1395 = getelementptr i256, i256* %STACK, i64 %1394
  %1396 = load i256, i256* %1395
  %1397 = load i64, i64* %STACK_DEP_PTR
  %1398 = sub i64 %1397, 1
  store i64 %1398, i64* %STACK_DEP_PTR
  %1399 = trunc i256 64 to i64
  %1400 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1399, i256* %1400)
  %1401 = load i256, i256* %1400
  %1402 = icmp eq i256 %1396, 0
  %1403 = icmp eq i1 %1402, false
  %1404 = icmp eq i1 %1403, false
  %1405 = icmp eq i1 %1404, false
  %1406 = trunc i256 %1401 to i64
  %1407 = zext i1 %1405 to i256
  %1408 = alloca i256
  store i256 %1407, i256* %1408
  %1409 = bitcast i256* %1408 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1406, i8* %1409, i64 32)
  %1410 = add i256 32, %1401
  %"SUM < LHS138" = icmp ult i256 %1410, 32
  %1411 = select i1 %"SUM < LHS138", i8 4, i8 0
  %1412 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1412, i8 %1411, i32 821)
  %1413 = add i256 32, %1401, !pc !46, !intsan !8
  %1414 = trunc i256 64 to i64
  %1415 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1414, i256* %1415)
  %1416 = load i256, i256* %1415
  %"LHS < RHS139" = icmp ult i256 %1413, %1416
  %1417 = select i1 %"LHS < RHS139", i8 4, i8 0
  %1418 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1418, i8 %1417, i32 830)
  %1419 = sub i256 %1413, %1416, !pc !47, !intsan !10
  br label %Exit, !EVMBB !4

.833:                                             ; preds = %JumpTableCase67
  %1420 = load i64, i64* %remaing_gas
  %1421 = icmp ugt i64 104, %1420
  br i1 %1421, label %Abort, label %1422

1422:                                             ; preds = %.833
  %1423 = load i32, i32* %__afl_state, !nosanitize !3
  %1424 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1425 = xor i32 %1424, 1786
  %1426 = xor i32 %1423, %1425
  %1427 = and i32 %1426, 4095
  %1428 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1427
  %1429 = load i8, i8 addrspace(1)* %1428, !nosanitize !3
  %1430 = add i8 %1429, 1
  store i8 %1430, i8 addrspace(1)* %1428, !nosanitize !3
  store i32 893, i32* %__afl_prev_loc, !nosanitize !3
  %1431 = sub i64 %1420, 104
  store i64 %1431, i64* %remaing_gas
  %1432 = icmp eq i64 %2, 0
  %1433 = trunc i256 845 to i64
  %jump.check23 = icmp ne i1 %1432, false
  store i64 %1433, i64* %JMP_TARGET_PTR
  %1434 = load i64, i64* %STACK_DEP_PTR
  %1435 = add i64 %1434, 1
  store i64 %1435, i64* %STACK_DEP_PTR
  %1436 = zext i64 %2 to i256
  %1437 = load i64, i64* %STACK_DEP_PTR
  %1438 = getelementptr i256, i256* %STACK, i64 %1437
  store i256 %1436, i256* %1438
  br i1 %jump.check23, label %JumpTable, label %.841, !EVMBB !4

.841:                                             ; preds = %1422
  %1439 = load i64, i64* %remaing_gas
  %1440 = icmp ugt i64 40, %1439
  br i1 %1440, label %Abort, label %1441

1441:                                             ; preds = %.841
  %1442 = load i32, i32* %__afl_state, !nosanitize !3
  %1443 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1444 = xor i32 %1443, 826
  %1445 = xor i32 %1442, %1444
  %1446 = and i32 %1445, 4095
  %1447 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1446
  %1448 = load i8, i8 addrspace(1)* %1447, !nosanitize !3
  %1449 = add i8 %1448, 1
  store i8 %1449, i8 addrspace(1)* %1447, !nosanitize !3
  store i32 413, i32* %__afl_prev_loc, !nosanitize !3
  %1450 = sub i64 %1439, 40
  store i64 %1450, i64* %remaing_gas
  %1451 = load i64, i64* %STACK_DEP_PTR
  %1452 = sub i64 %1451, 0
  store i64 %1452, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.845:                                             ; preds = %JumpTableCase73
  %1453 = load i64, i64* %remaing_gas
  %1454 = icmp ugt i64 256, %1453
  br i1 %1454, label %Abort, label %1455

1455:                                             ; preds = %.845
  %1456 = load i32, i32* %__afl_state, !nosanitize !3
  %1457 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1458 = xor i32 %1457, 1321
  %1459 = xor i32 %1456, %1458
  %1460 = and i32 %1459, 4095
  %1461 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1460
  %1462 = load i8, i8 addrspace(1)* %1461, !nosanitize !3
  %1463 = add i8 %1462, 1
  store i8 %1463, i8 addrspace(1)* %1461, !nosanitize !3
  store i32 660, i32* %__afl_prev_loc, !nosanitize !3
  %1464 = sub i64 %1453, 256
  store i64 %1464, i64* %remaing_gas
  %1465 = load i64, i64* %STACK_DEP_PTR
  %1466 = getelementptr i256, i256* %STACK, i64 %1465
  %1467 = load i256, i256* %1466
  %1468 = load i64, i64* %STACK_DEP_PTR
  %1469 = sub i64 %1468, 1
  store i64 %1469, i64* %STACK_DEP_PTR
  %1470 = zext i32 %3 to i256
  %"LHS < RHS140" = icmp ult i256 %1470, 4
  %1471 = select i1 %"LHS < RHS140", i8 4, i8 0
  %1472 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1472, i8 %1471, i32 854)
  %1473 = sub i256 %1470, 4, !pc !48, !intsan !10
  %1474 = add i256 4, %1473
  %"SUM < LHS141" = icmp ult i256 %1474, 4
  %1475 = select i1 %"SUM < LHS141", i8 4, i8 0
  %1476 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1476, i8 %1475, i32 856)
  %1477 = add i256 4, %1473, !pc !49, !intsan !8
  %1478 = trunc i256 4 to i64
  %1479 = alloca i256
  %1480 = bitcast i256* %1479 to i8*
  call void @__device_calldataload(i8* %1480, i8 addrspace(1)* %4, i64 %1478)
  %1481 = load i256, i256* %1479
  %1482 = and i256 1461501637330902918203684832716283019655932542975, %1481
  %1483 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1483, i8 0, i32 886)
  %1484 = add i256 32, 4, !pc !50, !intsan !8
  %1485 = trunc i256 2420 to i64
  store i64 %1485, i64* %JMP_TARGET_PTR
  %1486 = load i64, i64* %STACK_DEP_PTR
  %1487 = add i64 %1486, 1
  store i64 %1487, i64* %STACK_DEP_PTR
  %1488 = load i64, i64* %STACK_DEP_PTR
  %1489 = getelementptr i256, i256* %STACK, i64 %1488
  store i256 898, i256* %1489
  %1490 = load i64, i64* %STACK_DEP_PTR
  %1491 = add i64 %1490, 1
  store i64 %1491, i64* %STACK_DEP_PTR
  %1492 = load i64, i64* %STACK_DEP_PTR
  %1493 = getelementptr i256, i256* %STACK, i64 %1492
  store i256 %1482, i256* %1493
  br label %JumpTable, !EVMBB !4

.898:                                             ; preds = %JumpTableCase85
  %1494 = load i64, i64* %remaing_gas
  %1495 = icmp ugt i64 184, %1494
  br i1 %1495, label %Abort, label %1496

1496:                                             ; preds = %.898
  %1497 = load i32, i32* %__afl_state, !nosanitize !3
  %1498 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1499 = xor i32 %1498, 4070
  %1500 = xor i32 %1497, %1499
  %1501 = and i32 %1500, 4095
  %1502 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1501
  %1503 = load i8, i8 addrspace(1)* %1502, !nosanitize !3
  %1504 = add i8 %1503, 1
  store i8 %1504, i8 addrspace(1)* %1502, !nosanitize !3
  store i32 2035, i32* %__afl_prev_loc, !nosanitize !3
  %1505 = sub i64 %1494, 184
  store i64 %1505, i64* %remaing_gas
  %1506 = load i64, i64* %STACK_DEP_PTR
  %1507 = getelementptr i256, i256* %STACK, i64 %1506
  %1508 = load i256, i256* %1507
  %1509 = load i64, i64* %STACK_DEP_PTR
  %1510 = sub i64 %1509, 1
  store i64 %1510, i64* %STACK_DEP_PTR
  %1511 = trunc i256 64 to i64
  %1512 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1511, i256* %1512)
  %1513 = load i256, i256* %1512
  %1514 = trunc i256 %1513 to i64
  %1515 = alloca i256
  store i256 %1508, i256* %1515
  %1516 = bitcast i256* %1515 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1514, i8* %1516, i64 32)
  %1517 = add i256 32, %1513
  %"SUM < LHS142" = icmp ult i256 %1517, 32
  %1518 = select i1 %"SUM < LHS142", i8 4, i8 0
  %1519 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1519, i8 %1518, i32 908)
  %1520 = add i256 32, %1513, !pc !51, !intsan !8
  %1521 = trunc i256 64 to i64
  %1522 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1521, i256* %1522)
  %1523 = load i256, i256* %1522
  %"LHS < RHS143" = icmp ult i256 %1520, %1523
  %1524 = select i1 %"LHS < RHS143", i8 4, i8 0
  %1525 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1525, i8 %1524, i32 917)
  %1526 = sub i256 %1520, %1523, !pc !52, !intsan !10
  br label %Exit, !EVMBB !4

.920:                                             ; preds = %JumpTableCase72
  %1527 = load i64, i64* %remaing_gas
  %1528 = icmp ugt i64 104, %1527
  br i1 %1528, label %Abort, label %1529

1529:                                             ; preds = %.920
  %1530 = load i32, i32* %__afl_state, !nosanitize !3
  %1531 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1532 = xor i32 %1531, 316
  %1533 = xor i32 %1530, %1532
  %1534 = and i32 %1533, 4095
  %1535 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1534
  %1536 = load i8, i8 addrspace(1)* %1535, !nosanitize !3
  %1537 = add i8 %1536, 1
  store i8 %1537, i8 addrspace(1)* %1535, !nosanitize !3
  store i32 158, i32* %__afl_prev_loc, !nosanitize !3
  %1538 = sub i64 %1527, 104
  store i64 %1538, i64* %remaing_gas
  %1539 = icmp eq i64 %2, 0
  %1540 = trunc i256 932 to i64
  %jump.check26 = icmp ne i1 %1539, false
  store i64 %1540, i64* %JMP_TARGET_PTR
  %1541 = load i64, i64* %STACK_DEP_PTR
  %1542 = add i64 %1541, 1
  store i64 %1542, i64* %STACK_DEP_PTR
  %1543 = zext i64 %2 to i256
  %1544 = load i64, i64* %STACK_DEP_PTR
  %1545 = getelementptr i256, i256* %STACK, i64 %1544
  store i256 %1543, i256* %1545
  br i1 %jump.check26, label %JumpTable, label %.928, !EVMBB !4

.928:                                             ; preds = %1529
  %1546 = load i64, i64* %remaing_gas
  %1547 = icmp ugt i64 40, %1546
  br i1 %1547, label %Abort, label %1548

1548:                                             ; preds = %.928
  %1549 = load i32, i32* %__afl_state, !nosanitize !3
  %1550 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1551 = xor i32 %1550, 1940
  %1552 = xor i32 %1549, %1551
  %1553 = and i32 %1552, 4095
  %1554 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1553
  %1555 = load i8, i8 addrspace(1)* %1554, !nosanitize !3
  %1556 = add i8 %1555, 1
  store i8 %1556, i8 addrspace(1)* %1554, !nosanitize !3
  store i32 970, i32* %__afl_prev_loc, !nosanitize !3
  %1557 = sub i64 %1546, 40
  store i64 %1557, i64* %remaing_gas
  %1558 = load i64, i64* %STACK_DEP_PTR
  %1559 = sub i64 %1558, 0
  store i64 %1559, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.932:                                             ; preds = %JumpTableCase78
  %1560 = load i64, i64* %remaing_gas
  %1561 = icmp ugt i64 128, %1560
  br i1 %1561, label %Abort, label %1562

1562:                                             ; preds = %.932
  %1563 = load i32, i32* %__afl_state, !nosanitize !3
  %1564 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1565 = xor i32 %1564, 4056
  %1566 = xor i32 %1563, %1565
  %1567 = and i32 %1566, 4095
  %1568 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1567
  %1569 = load i8, i8 addrspace(1)* %1568, !nosanitize !3
  %1570 = add i8 %1569, 1
  store i8 %1570, i8 addrspace(1)* %1568, !nosanitize !3
  store i32 2028, i32* %__afl_prev_loc, !nosanitize !3
  %1571 = sub i64 %1560, 128
  store i64 %1571, i64* %remaing_gas
  %1572 = load i64, i64* %STACK_DEP_PTR
  %1573 = getelementptr i256, i256* %STACK, i64 %1572
  %1574 = load i256, i256* %1573
  %1575 = load i64, i64* %STACK_DEP_PTR
  %1576 = sub i64 %1575, 1
  store i64 %1576, i64* %STACK_DEP_PTR
  %1577 = trunc i256 2444 to i64
  store i64 %1577, i64* %JMP_TARGET_PTR
  %1578 = load i64, i64* %STACK_DEP_PTR
  %1579 = add i64 %1578, 1
  store i64 %1579, i64* %STACK_DEP_PTR
  %1580 = load i64, i64* %STACK_DEP_PTR
  %1581 = getelementptr i256, i256* %STACK, i64 %1580
  store i256 941, i256* %1581
  br label %JumpTable, !EVMBB !4

.941:                                             ; preds = %JumpTableCase91
  %1582 = load i64, i64* %remaing_gas
  %1583 = icmp ugt i64 184, %1582
  br i1 %1583, label %Abort, label %1584

1584:                                             ; preds = %.941
  %1585 = load i32, i32* %__afl_state, !nosanitize !3
  %1586 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1587 = xor i32 %1586, 2145
  %1588 = xor i32 %1585, %1587
  %1589 = and i32 %1588, 4095
  %1590 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1589
  %1591 = load i8, i8 addrspace(1)* %1590, !nosanitize !3
  %1592 = add i8 %1591, 1
  store i8 %1592, i8 addrspace(1)* %1590, !nosanitize !3
  store i32 1072, i32* %__afl_prev_loc, !nosanitize !3
  %1593 = sub i64 %1582, 184
  store i64 %1593, i64* %remaing_gas
  %1594 = load i64, i64* %STACK_DEP_PTR
  %1595 = getelementptr i256, i256* %STACK, i64 %1594
  %1596 = load i256, i256* %1595
  %1597 = load i64, i64* %STACK_DEP_PTR
  %1598 = sub i64 %1597, 1
  store i64 %1598, i64* %STACK_DEP_PTR
  %1599 = trunc i256 64 to i64
  %1600 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1599, i256* %1600)
  %1601 = load i256, i256* %1600
  %1602 = trunc i256 %1601 to i64
  %1603 = alloca i256
  store i256 %1596, i256* %1603
  %1604 = bitcast i256* %1603 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1602, i8* %1604, i64 32)
  %1605 = add i256 32, %1601
  %"SUM < LHS144" = icmp ult i256 %1605, 32
  %1606 = select i1 %"SUM < LHS144", i8 4, i8 0
  %1607 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1607, i8 %1606, i32 951)
  %1608 = add i256 32, %1601, !pc !53, !intsan !8
  %1609 = trunc i256 64 to i64
  %1610 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1609, i256* %1610)
  %1611 = load i256, i256* %1610
  %"LHS < RHS145" = icmp ult i256 %1608, %1611
  %1612 = select i1 %"LHS < RHS145", i8 4, i8 0
  %1613 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1613, i8 %1612, i32 960)
  %1614 = sub i256 %1608, %1611, !pc !54, !intsan !10
  br label %Exit, !EVMBB !4

.963:                                             ; preds = %JumpTableCase77
  %1615 = load i64, i64* %remaing_gas
  %1616 = icmp ugt i64 104, %1615
  br i1 %1616, label %Abort, label %1617

1617:                                             ; preds = %.963
  %1618 = load i32, i32* %__afl_state, !nosanitize !3
  %1619 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1620 = xor i32 %1619, 2553
  %1621 = xor i32 %1618, %1620
  %1622 = and i32 %1621, 4095
  %1623 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1622
  %1624 = load i8, i8 addrspace(1)* %1623, !nosanitize !3
  %1625 = add i8 %1624, 1
  store i8 %1625, i8 addrspace(1)* %1623, !nosanitize !3
  store i32 1276, i32* %__afl_prev_loc, !nosanitize !3
  %1626 = sub i64 %1615, 104
  store i64 %1626, i64* %remaing_gas
  %1627 = icmp eq i64 %2, 0
  %1628 = trunc i256 975 to i64
  %jump.check30 = icmp ne i1 %1627, false
  store i64 %1628, i64* %JMP_TARGET_PTR
  %1629 = load i64, i64* %STACK_DEP_PTR
  %1630 = add i64 %1629, 1
  store i64 %1630, i64* %STACK_DEP_PTR
  %1631 = zext i64 %2 to i256
  %1632 = load i64, i64* %STACK_DEP_PTR
  %1633 = getelementptr i256, i256* %STACK, i64 %1632
  store i256 %1631, i256* %1633
  br i1 %jump.check30, label %JumpTable, label %.971, !EVMBB !4

.971:                                             ; preds = %1617
  %1634 = load i64, i64* %remaing_gas
  %1635 = icmp ugt i64 40, %1634
  br i1 %1635, label %Abort, label %1636

1636:                                             ; preds = %.971
  %1637 = load i32, i32* %__afl_state, !nosanitize !3
  %1638 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1639 = xor i32 %1638, 1723
  %1640 = xor i32 %1637, %1639
  %1641 = and i32 %1640, 4095
  %1642 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1641
  %1643 = load i8, i8 addrspace(1)* %1642, !nosanitize !3
  %1644 = add i8 %1643, 1
  store i8 %1644, i8 addrspace(1)* %1642, !nosanitize !3
  store i32 861, i32* %__afl_prev_loc, !nosanitize !3
  %1645 = sub i64 %1634, 40
  store i64 %1645, i64* %remaing_gas
  %1646 = load i64, i64* %STACK_DEP_PTR
  %1647 = sub i64 %1646, 0
  store i64 %1647, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.975:                                             ; preds = %JumpTableCase83
  %1648 = load i64, i64* %remaing_gas
  %1649 = icmp ugt i64 128, %1648
  br i1 %1649, label %Abort, label %1650

1650:                                             ; preds = %.975
  %1651 = load i32, i32* %__afl_state, !nosanitize !3
  %1652 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1653 = xor i32 %1652, 3225
  %1654 = xor i32 %1651, %1653
  %1655 = and i32 %1654, 4095
  %1656 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1655
  %1657 = load i8, i8 addrspace(1)* %1656, !nosanitize !3
  %1658 = add i8 %1657, 1
  store i8 %1658, i8 addrspace(1)* %1656, !nosanitize !3
  store i32 1612, i32* %__afl_prev_loc, !nosanitize !3
  %1659 = sub i64 %1648, 128
  store i64 %1659, i64* %remaing_gas
  %1660 = load i64, i64* %STACK_DEP_PTR
  %1661 = getelementptr i256, i256* %STACK, i64 %1660
  %1662 = load i256, i256* %1661
  %1663 = load i64, i64* %STACK_DEP_PTR
  %1664 = sub i64 %1663, 1
  store i64 %1664, i64* %STACK_DEP_PTR
  %1665 = trunc i256 2450 to i64
  store i64 %1665, i64* %JMP_TARGET_PTR
  %1666 = load i64, i64* %STACK_DEP_PTR
  %1667 = add i64 %1666, 1
  store i64 %1667, i64* %STACK_DEP_PTR
  %1668 = load i64, i64* %STACK_DEP_PTR
  %1669 = getelementptr i256, i256* %STACK, i64 %1668
  store i256 984, i256* %1669
  br label %JumpTable, !EVMBB !4

.984:                                             ; preds = %JumpTableCase95
  %1670 = load i64, i64* %STACK_DEP_PTR
  %1671 = getelementptr i256, i256* %STACK, i64 %1670
  %1672 = load i256, i256* %1671
  %1673 = load i64, i64* %STACK_DEP_PTR
  %1674 = sub i64 %1673, 1
  store i64 %1674, i64* %STACK_DEP_PTR
  %1675 = trunc i256 64 to i64
  %1676 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1675, i256* %1676)
  %1677 = load i256, i256* %1676
  %1678 = add i256 32, %1677
  %"SUM < LHS146" = icmp ult i256 %1678, 32
  %1679 = select i1 %"SUM < LHS146", i8 4, i8 0
  %1680 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1680, i8 %1679, i32 992)
  %1681 = add i256 32, %1677, !pc !55, !intsan !8
  %"LHS < RHS147" = icmp ult i256 %1681, %1677
  %1682 = select i1 %"LHS < RHS147", i8 4, i8 0
  %1683 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1683, i8 %1682, i32 995)
  %1684 = sub i256 %1681, %1677, !pc !56, !intsan !10
  %1685 = trunc i256 %1677 to i64
  %1686 = alloca i256
  store i256 %1684, i256* %1686
  %1687 = bitcast i256* %1686 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1685, i8* %1687, i64 32)
  %1688 = trunc i256 %1672 to i64
  %1689 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1688, i256* %1689)
  %1690 = load i256, i256* %1689
  %1691 = trunc i256 %1681 to i64
  %1692 = alloca i256
  store i256 %1690, i256* %1692
  %1693 = bitcast i256* %1692 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1691, i8* %1693, i64 32)
  %1694 = add i256 32, %1681
  %"SUM < LHS148" = icmp ult i256 %1694, 32
  %1695 = select i1 %"SUM < LHS148", i8 4, i8 0
  %1696 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1696, i8 %1695, i32 1006)
  %1697 = add i256 32, %1681, !pc !57, !intsan !8
  %1698 = trunc i256 %1672 to i64
  %1699 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1698, i256* %1699)
  %1700 = load i256, i256* %1699
  %1701 = add i256 32, %1672
  %"SUM < LHS149" = icmp ult i256 %1701, 32
  %1702 = select i1 %"SUM < LHS149", i8 4, i8 0
  %1703 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1703, i8 %1702, i32 1014)
  %1704 = add i256 32, %1672, !pc !58, !intsan !8
  %1705 = load i64, i64* %STACK_DEP_PTR
  %1706 = add i64 %1705, 1
  store i64 %1706, i64* %STACK_DEP_PTR
  %1707 = load i64, i64* %STACK_DEP_PTR
  %1708 = getelementptr i256, i256* %STACK, i64 %1707
  store i256 %1672, i256* %1708
  %1709 = load i64, i64* %STACK_DEP_PTR
  %1710 = add i64 %1709, 1
  store i64 %1710, i64* %STACK_DEP_PTR
  %1711 = load i64, i64* %STACK_DEP_PTR
  %1712 = getelementptr i256, i256* %STACK, i64 %1711
  store i256 %1677, i256* %1712
  %1713 = load i64, i64* %STACK_DEP_PTR
  %1714 = add i64 %1713, 1
  store i64 %1714, i64* %STACK_DEP_PTR
  %1715 = load i64, i64* %STACK_DEP_PTR
  %1716 = getelementptr i256, i256* %STACK, i64 %1715
  store i256 %1677, i256* %1716
  %1717 = load i64, i64* %STACK_DEP_PTR
  %1718 = add i64 %1717, 1
  store i64 %1718, i64* %STACK_DEP_PTR
  %1719 = load i64, i64* %STACK_DEP_PTR
  %1720 = getelementptr i256, i256* %STACK, i64 %1719
  store i256 %1697, i256* %1720
  %1721 = load i64, i64* %STACK_DEP_PTR
  %1722 = add i64 %1721, 1
  store i64 %1722, i64* %STACK_DEP_PTR
  %1723 = load i64, i64* %STACK_DEP_PTR
  %1724 = getelementptr i256, i256* %STACK, i64 %1723
  store i256 %1704, i256* %1724
  %1725 = load i64, i64* %STACK_DEP_PTR
  %1726 = add i64 %1725, 1
  store i64 %1726, i64* %STACK_DEP_PTR
  %1727 = load i64, i64* %STACK_DEP_PTR
  %1728 = getelementptr i256, i256* %STACK, i64 %1727
  store i256 %1700, i256* %1728
  %1729 = load i64, i64* %STACK_DEP_PTR
  %1730 = add i64 %1729, 1
  store i64 %1730, i64* %STACK_DEP_PTR
  %1731 = load i64, i64* %STACK_DEP_PTR
  %1732 = getelementptr i256, i256* %STACK, i64 %1731
  store i256 %1700, i256* %1732
  %1733 = load i64, i64* %STACK_DEP_PTR
  %1734 = add i64 %1733, 1
  store i64 %1734, i64* %STACK_DEP_PTR
  %1735 = load i64, i64* %STACK_DEP_PTR
  %1736 = getelementptr i256, i256* %STACK, i64 %1735
  store i256 %1697, i256* %1736
  %1737 = load i64, i64* %STACK_DEP_PTR
  %1738 = add i64 %1737, 1
  store i64 %1738, i64* %STACK_DEP_PTR
  %1739 = load i64, i64* %STACK_DEP_PTR
  %1740 = getelementptr i256, i256* %STACK, i64 %1739
  store i256 %1704, i256* %1740
  %1741 = load i64, i64* %STACK_DEP_PTR
  %1742 = add i64 %1741, 1
  store i64 %1742, i64* %STACK_DEP_PTR
  %1743 = load i64, i64* %STACK_DEP_PTR
  %1744 = getelementptr i256, i256* %STACK, i64 %1743
  store i256 0, i256* %1744
  br label %.1021

.1021:                                            ; preds = %JumpTableCase101, %.984
  %1745 = load i64, i64* %remaing_gas
  %1746 = icmp ugt i64 440, %1745
  br i1 %1746, label %Abort, label %1747

1747:                                             ; preds = %.1021
  %1748 = load i32, i32* %__afl_state, !nosanitize !3
  %1749 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1750 = xor i32 %1749, 149
  %1751 = xor i32 %1748, %1750
  %1752 = and i32 %1751, 4095
  %1753 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1752
  %1754 = load i8, i8 addrspace(1)* %1753, !nosanitize !3
  %1755 = add i8 %1754, 1
  store i8 %1755, i8 addrspace(1)* %1753, !nosanitize !3
  store i32 74, i32* %__afl_prev_loc, !nosanitize !3
  %1756 = sub i64 %1745, 440
  store i64 %1756, i64* %remaing_gas
  %1757 = load i64, i64* %STACK_DEP_PTR
  %1758 = getelementptr i256, i256* %STACK, i64 %1757
  %1759 = load i256, i256* %1758
  %1760 = load i64, i64* %STACK_DEP_PTR
  %1761 = sub i64 %1760, 1
  store i64 %1761, i64* %STACK_DEP_PTR
  %1762 = load i64, i64* %STACK_DEP_PTR
  %1763 = getelementptr i256, i256* %STACK, i64 %1762
  %1764 = load i256, i256* %1763
  %1765 = load i64, i64* %STACK_DEP_PTR
  %1766 = sub i64 %1765, 1
  store i64 %1766, i64* %STACK_DEP_PTR
  %1767 = load i64, i64* %STACK_DEP_PTR
  %1768 = getelementptr i256, i256* %STACK, i64 %1767
  %1769 = load i256, i256* %1768
  %1770 = load i64, i64* %STACK_DEP_PTR
  %1771 = sub i64 %1770, 1
  store i64 %1771, i64* %STACK_DEP_PTR
  %1772 = load i64, i64* %STACK_DEP_PTR
  %1773 = getelementptr i256, i256* %STACK, i64 %1772
  %1774 = load i256, i256* %1773
  %1775 = load i64, i64* %STACK_DEP_PTR
  %1776 = sub i64 %1775, 1
  store i64 %1776, i64* %STACK_DEP_PTR
  %1777 = icmp ult i256 %1759, %1774
  %1778 = icmp eq i1 %1777, false
  %1779 = trunc i256 1048 to i64
  %jump.check36 = icmp ne i1 %1778, false
  store i64 %1779, i64* %JMP_TARGET_PTR
  %1780 = load i64, i64* %STACK_DEP_PTR
  %1781 = add i64 %1780, 1
  store i64 %1781, i64* %STACK_DEP_PTR
  %1782 = load i64, i64* %STACK_DEP_PTR
  %1783 = getelementptr i256, i256* %STACK, i64 %1782
  store i256 %1774, i256* %1783
  %1784 = load i64, i64* %STACK_DEP_PTR
  %1785 = add i64 %1784, 1
  store i64 %1785, i64* %STACK_DEP_PTR
  %1786 = load i64, i64* %STACK_DEP_PTR
  %1787 = getelementptr i256, i256* %STACK, i64 %1786
  store i256 %1769, i256* %1787
  %1788 = load i64, i64* %STACK_DEP_PTR
  %1789 = add i64 %1788, 1
  store i64 %1789, i64* %STACK_DEP_PTR
  %1790 = load i64, i64* %STACK_DEP_PTR
  %1791 = getelementptr i256, i256* %STACK, i64 %1790
  store i256 %1764, i256* %1791
  %1792 = load i64, i64* %STACK_DEP_PTR
  %1793 = add i64 %1792, 1
  store i64 %1793, i64* %STACK_DEP_PTR
  %1794 = load i64, i64* %STACK_DEP_PTR
  %1795 = getelementptr i256, i256* %STACK, i64 %1794
  store i256 %1759, i256* %1795
  br i1 %jump.check36, label %JumpTable, label %.1030, !EVMBB !4

.1030:                                            ; preds = %1747
  %1796 = load i64, i64* %remaing_gas
  %1797 = icmp ugt i64 416, %1796
  br i1 %1797, label %Abort, label %1798

1798:                                             ; preds = %.1030
  %1799 = load i32, i32* %__afl_state, !nosanitize !3
  %1800 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1801 = xor i32 %1800, 1515
  %1802 = xor i32 %1799, %1801
  %1803 = and i32 %1802, 4095
  %1804 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1803
  %1805 = load i8, i8 addrspace(1)* %1804, !nosanitize !3
  %1806 = add i8 %1805, 1
  store i8 %1806, i8 addrspace(1)* %1804, !nosanitize !3
  store i32 757, i32* %__afl_prev_loc, !nosanitize !3
  %1807 = sub i64 %1796, 416
  store i64 %1807, i64* %remaing_gas
  %1808 = load i64, i64* %STACK_DEP_PTR
  %1809 = getelementptr i256, i256* %STACK, i64 %1808
  %1810 = load i256, i256* %1809
  %1811 = load i64, i64* %STACK_DEP_PTR
  %1812 = sub i64 %1811, 1
  store i64 %1812, i64* %STACK_DEP_PTR
  %1813 = load i64, i64* %STACK_DEP_PTR
  %1814 = getelementptr i256, i256* %STACK, i64 %1813
  %1815 = load i256, i256* %1814
  %1816 = load i64, i64* %STACK_DEP_PTR
  %1817 = sub i64 %1816, 1
  store i64 %1817, i64* %STACK_DEP_PTR
  %1818 = load i64, i64* %STACK_DEP_PTR
  %1819 = getelementptr i256, i256* %STACK, i64 %1818
  %1820 = load i256, i256* %1819
  %1821 = load i64, i64* %STACK_DEP_PTR
  %1822 = sub i64 %1821, 1
  store i64 %1822, i64* %STACK_DEP_PTR
  %1823 = add i256 %1815, %1810
  %"SUM < LHS150" = icmp ult i256 %1823, %1815
  %1824 = select i1 %"SUM < LHS150", i8 4, i8 0
  %1825 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1825, i8 %1824, i32 1032)
  %1826 = add i256 %1815, %1810, !pc !59, !intsan !8
  %1827 = trunc i256 %1826 to i64
  %1828 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1827, i256* %1828)
  %1829 = load i256, i256* %1828
  %1830 = add i256 %1820, %1810
  %"SUM < LHS151" = icmp ult i256 %1830, %1820
  %1831 = select i1 %"SUM < LHS151", i8 4, i8 0
  %1832 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1832, i8 %1831, i32 1036)
  %1833 = add i256 %1820, %1810, !pc !60, !intsan !8
  %1834 = trunc i256 %1833 to i64
  %1835 = alloca i256
  store i256 %1829, i256* %1835
  %1836 = bitcast i256* %1835 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1834, i8* %1836, i64 32)
  %1837 = add i256 %1810, 32
  %"SUM < LHS152" = icmp ult i256 %1837, %1810
  %1838 = select i1 %"SUM < LHS152", i8 4, i8 0
  %1839 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1839, i8 %1838, i32 1041)
  %1840 = add i256 %1810, 32, !pc !61, !intsan !8
  %1841 = trunc i256 1021 to i64
  store i64 %1841, i64* %JMP_TARGET_PTR
  %1842 = load i64, i64* %STACK_DEP_PTR
  %1843 = add i64 %1842, 1
  store i64 %1843, i64* %STACK_DEP_PTR
  %1844 = load i64, i64* %STACK_DEP_PTR
  %1845 = getelementptr i256, i256* %STACK, i64 %1844
  store i256 %1820, i256* %1845
  %1846 = load i64, i64* %STACK_DEP_PTR
  %1847 = add i64 %1846, 1
  store i64 %1847, i64* %STACK_DEP_PTR
  %1848 = load i64, i64* %STACK_DEP_PTR
  %1849 = getelementptr i256, i256* %STACK, i64 %1848
  store i256 %1815, i256* %1849
  %1850 = load i64, i64* %STACK_DEP_PTR
  %1851 = add i64 %1850, 1
  store i64 %1851, i64* %STACK_DEP_PTR
  %1852 = load i64, i64* %STACK_DEP_PTR
  %1853 = getelementptr i256, i256* %STACK, i64 %1852
  store i256 %1840, i256* %1853
  br label %JumpTable, !EVMBB !4

.1048:                                            ; preds = %JumpTableCase102
  %1854 = load i64, i64* %remaing_gas
  %1855 = icmp ugt i64 496, %1854
  br i1 %1855, label %Abort, label %1856

1856:                                             ; preds = %.1048
  %1857 = load i32, i32* %__afl_state, !nosanitize !3
  %1858 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1859 = xor i32 %1858, 179
  %1860 = xor i32 %1857, %1859
  %1861 = and i32 %1860, 4095
  %1862 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1861
  %1863 = load i8, i8 addrspace(1)* %1862, !nosanitize !3
  %1864 = add i8 %1863, 1
  store i8 %1864, i8 addrspace(1)* %1862, !nosanitize !3
  store i32 89, i32* %__afl_prev_loc, !nosanitize !3
  %1865 = sub i64 %1854, 496
  store i64 %1865, i64* %remaing_gas
  %1866 = load i64, i64* %STACK_DEP_PTR
  %1867 = getelementptr i256, i256* %STACK, i64 %1866
  %1868 = load i256, i256* %1867
  %1869 = load i64, i64* %STACK_DEP_PTR
  %1870 = sub i64 %1869, 1
  store i64 %1870, i64* %STACK_DEP_PTR
  %1871 = load i64, i64* %STACK_DEP_PTR
  %1872 = getelementptr i256, i256* %STACK, i64 %1871
  %1873 = load i256, i256* %1872
  %1874 = load i64, i64* %STACK_DEP_PTR
  %1875 = sub i64 %1874, 1
  store i64 %1875, i64* %STACK_DEP_PTR
  %1876 = load i64, i64* %STACK_DEP_PTR
  %1877 = getelementptr i256, i256* %STACK, i64 %1876
  %1878 = load i256, i256* %1877
  %1879 = load i64, i64* %STACK_DEP_PTR
  %1880 = sub i64 %1879, 1
  store i64 %1880, i64* %STACK_DEP_PTR
  %1881 = load i64, i64* %STACK_DEP_PTR
  %1882 = getelementptr i256, i256* %STACK, i64 %1881
  %1883 = load i256, i256* %1882
  %1884 = load i64, i64* %STACK_DEP_PTR
  %1885 = sub i64 %1884, 1
  store i64 %1885, i64* %STACK_DEP_PTR
  %1886 = load i64, i64* %STACK_DEP_PTR
  %1887 = getelementptr i256, i256* %STACK, i64 %1886
  %1888 = load i256, i256* %1887
  %1889 = load i64, i64* %STACK_DEP_PTR
  %1890 = sub i64 %1889, 1
  store i64 %1890, i64* %STACK_DEP_PTR
  %1891 = load i64, i64* %STACK_DEP_PTR
  %1892 = getelementptr i256, i256* %STACK, i64 %1891
  %1893 = load i256, i256* %1892
  %1894 = load i64, i64* %STACK_DEP_PTR
  %1895 = sub i64 %1894, 1
  store i64 %1895, i64* %STACK_DEP_PTR
  %1896 = load i64, i64* %STACK_DEP_PTR
  %1897 = getelementptr i256, i256* %STACK, i64 %1896
  %1898 = load i256, i256* %1897
  %1899 = load i64, i64* %STACK_DEP_PTR
  %1900 = sub i64 %1899, 1
  store i64 %1900, i64* %STACK_DEP_PTR
  %1901 = add i256 %1888, %1898
  %"SUM < LHS153" = icmp ult i256 %1901, %1888
  %1902 = select i1 %"SUM < LHS153", i8 4, i8 0
  %1903 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1903, i8 %1902, i32 1057)
  %1904 = add i256 %1888, %1898, !pc !62, !intsan !8
  %1905 = and i256 31, %1888
  %1906 = icmp eq i256 %1905, 0
  %1907 = trunc i256 1093 to i64
  %jump.check37 = icmp ne i1 %1906, false
  store i64 %1907, i64* %JMP_TARGET_PTR
  %1908 = load i64, i64* %STACK_DEP_PTR
  %1909 = add i64 %1908, 1
  store i64 %1909, i64* %STACK_DEP_PTR
  %1910 = load i64, i64* %STACK_DEP_PTR
  %1911 = getelementptr i256, i256* %STACK, i64 %1910
  store i256 %1904, i256* %1911
  %1912 = load i64, i64* %STACK_DEP_PTR
  %1913 = add i64 %1912, 1
  store i64 %1913, i64* %STACK_DEP_PTR
  %1914 = load i64, i64* %STACK_DEP_PTR
  %1915 = getelementptr i256, i256* %STACK, i64 %1914
  store i256 %1905, i256* %1915
  br i1 %jump.check37, label %JumpTable, label %.1068, !EVMBB !4

.1068:                                            ; preds = %1856
  %1916 = load i64, i64* %STACK_DEP_PTR
  %1917 = getelementptr i256, i256* %STACK, i64 %1916
  %1918 = load i256, i256* %1917
  %1919 = load i64, i64* %STACK_DEP_PTR
  %1920 = sub i64 %1919, 1
  store i64 %1920, i64* %STACK_DEP_PTR
  %1921 = load i64, i64* %STACK_DEP_PTR
  %1922 = getelementptr i256, i256* %STACK, i64 %1921
  %1923 = load i256, i256* %1922
  %1924 = load i64, i64* %STACK_DEP_PTR
  %1925 = sub i64 %1924, 1
  store i64 %1925, i64* %STACK_DEP_PTR
  %"LHS < RHS154" = icmp ult i256 %1923, %1918
  %1926 = select i1 %"LHS < RHS154", i8 4, i8 0
  %1927 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1927, i8 %1926, i32 1070)
  %1928 = sub i256 %1923, %1918, !pc !63, !intsan !10
  %1929 = trunc i256 %1928 to i64
  %1930 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1929, i256* %1930)
  %1931 = load i256, i256* %1930
  %"LHS < RHS155" = icmp ult i256 32, %1918
  %1932 = select i1 %"LHS < RHS155", i8 4, i8 0
  %1933 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1933, i8 %1932, i32 1078)
  %1934 = sub i256 32, %1918, !pc !64, !intsan !10
  %1935 = alloca i256
  store i256 256, i256* %1935
  %1936 = alloca i256
  store i256 %1934, i256* %1936
  %1937 = alloca i256
  call void @__power_word(i256* %1935, i256* %1936, i256* %1937)
  %1938 = load volatile i256, i256* %1937
  %"LHS < RHS156" = icmp ult i256 %1938, 1
  %1939 = select i1 %"LHS < RHS156", i8 4, i8 0
  %1940 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1940, i8 %1939, i32 1083)
  %1941 = sub i256 %1938, 1, !pc !65, !intsan !10
  %1942 = xor i256 %1941, -1
  %1943 = and i256 %1942, %1931
  %1944 = trunc i256 %1928 to i64
  %1945 = alloca i256
  store i256 %1943, i256* %1945
  %1946 = bitcast i256* %1945 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %1944, i8* %1946, i64 32)
  %1947 = add i256 32, %1928
  %"SUM < LHS157" = icmp ult i256 %1947, 32
  %1948 = select i1 %"SUM < LHS157", i8 4, i8 0
  %1949 = call i32 @get_thread_id()
  call void @addBugSet(i32 %1949, i8 %1948, i32 1090)
  %1950 = add i256 32, %1928, !pc !66, !intsan !8
  %1951 = load i64, i64* %STACK_DEP_PTR
  %1952 = add i64 %1951, 1
  store i64 %1952, i64* %STACK_DEP_PTR
  %1953 = load i64, i64* %STACK_DEP_PTR
  %1954 = getelementptr i256, i256* %STACK, i64 %1953
  store i256 %1950, i256* %1954
  %1955 = load i64, i64* %STACK_DEP_PTR
  %1956 = add i64 %1955, 1
  store i64 %1956, i64* %STACK_DEP_PTR
  %1957 = load i64, i64* %STACK_DEP_PTR
  %1958 = getelementptr i256, i256* %STACK, i64 %1957
  store i256 %1918, i256* %1958
  br label %.1093

.1093:                                            ; preds = %JumpTableCase103, %.1068
  %1959 = load i64, i64* %remaing_gas
  %1960 = icmp ugt i64 296, %1959
  br i1 %1960, label %Abort, label %1961

1961:                                             ; preds = %.1093
  %1962 = load i32, i32* %__afl_state, !nosanitize !3
  %1963 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %1964 = xor i32 %1963, 3567
  %1965 = xor i32 %1962, %1964
  %1966 = and i32 %1965, 4095
  %1967 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %1966
  %1968 = load i8, i8 addrspace(1)* %1967, !nosanitize !3
  %1969 = add i8 %1968, 1
  store i8 %1969, i8 addrspace(1)* %1967, !nosanitize !3
  store i32 1783, i32* %__afl_prev_loc, !nosanitize !3
  %1970 = sub i64 %1959, 296
  store i64 %1970, i64* %remaing_gas
  %1971 = load i64, i64* %STACK_DEP_PTR
  %1972 = getelementptr i256, i256* %STACK, i64 %1971
  %1973 = load i256, i256* %1972
  %1974 = load i64, i64* %STACK_DEP_PTR
  %1975 = sub i64 %1974, 1
  store i64 %1975, i64* %STACK_DEP_PTR
  %1976 = load i64, i64* %STACK_DEP_PTR
  %1977 = getelementptr i256, i256* %STACK, i64 %1976
  %1978 = load i256, i256* %1977
  %1979 = load i64, i64* %STACK_DEP_PTR
  %1980 = sub i64 %1979, 1
  store i64 %1980, i64* %STACK_DEP_PTR
  %1981 = load i64, i64* %STACK_DEP_PTR
  %1982 = getelementptr i256, i256* %STACK, i64 %1981
  %1983 = load i256, i256* %1982
  %1984 = load i64, i64* %STACK_DEP_PTR
  %1985 = sub i64 %1984, 1
  store i64 %1985, i64* %STACK_DEP_PTR
  %1986 = load i64, i64* %STACK_DEP_PTR
  %1987 = getelementptr i256, i256* %STACK, i64 %1986
  %1988 = load i256, i256* %1987
  %1989 = load i64, i64* %STACK_DEP_PTR
  %1990 = sub i64 %1989, 1
  store i64 %1990, i64* %STACK_DEP_PTR
  %1991 = load i64, i64* %STACK_DEP_PTR
  %1992 = getelementptr i256, i256* %STACK, i64 %1991
  %1993 = load i256, i256* %1992
  %1994 = load i64, i64* %STACK_DEP_PTR
  %1995 = sub i64 %1994, 1
  store i64 %1995, i64* %STACK_DEP_PTR
  %1996 = trunc i256 64 to i64
  %1997 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %1996, i256* %1997)
  %1998 = load i256, i256* %1997
  %"LHS < RHS158" = icmp ult i256 %1978, %1998
  %1999 = select i1 %"LHS < RHS158", i8 4, i8 0
  %2000 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2000, i8 %1999, i32 1104)
  %2001 = sub i256 %1978, %1998, !pc !67, !intsan !10
  br label %Exit, !EVMBB !4

.1107:                                            ; preds = %JumpTableCase82
  %2002 = load i64, i64* %remaing_gas
  %2003 = icmp ugt i64 104, %2002
  br i1 %2003, label %Abort, label %2004

2004:                                             ; preds = %.1107
  %2005 = load i32, i32* %__afl_state, !nosanitize !3
  %2006 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2007 = xor i32 %2006, 3840
  %2008 = xor i32 %2005, %2007
  %2009 = and i32 %2008, 4095
  %2010 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2009
  %2011 = load i8, i8 addrspace(1)* %2010, !nosanitize !3
  %2012 = add i8 %2011, 1
  store i8 %2012, i8 addrspace(1)* %2010, !nosanitize !3
  store i32 1920, i32* %__afl_prev_loc, !nosanitize !3
  %2013 = sub i64 %2002, 104
  store i64 %2013, i64* %remaing_gas
  %2014 = icmp eq i64 %2, 0
  %2015 = trunc i256 1119 to i64
  %jump.check32 = icmp ne i1 %2014, false
  store i64 %2015, i64* %JMP_TARGET_PTR
  %2016 = load i64, i64* %STACK_DEP_PTR
  %2017 = add i64 %2016, 1
  store i64 %2017, i64* %STACK_DEP_PTR
  %2018 = zext i64 %2 to i256
  %2019 = load i64, i64* %STACK_DEP_PTR
  %2020 = getelementptr i256, i256* %STACK, i64 %2019
  store i256 %2018, i256* %2020
  br i1 %jump.check32, label %JumpTable, label %.1115, !EVMBB !4

.1115:                                            ; preds = %2004
  %2021 = load i64, i64* %remaing_gas
  %2022 = icmp ugt i64 40, %2021
  br i1 %2022, label %Abort, label %2023

2023:                                             ; preds = %.1115
  %2024 = load i32, i32* %__afl_state, !nosanitize !3
  %2025 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2026 = xor i32 %2025, 2721
  %2027 = xor i32 %2024, %2026
  %2028 = and i32 %2027, 4095
  %2029 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2028
  %2030 = load i8, i8 addrspace(1)* %2029, !nosanitize !3
  %2031 = add i8 %2030, 1
  store i8 %2031, i8 addrspace(1)* %2029, !nosanitize !3
  store i32 1360, i32* %__afl_prev_loc, !nosanitize !3
  %2032 = sub i64 %2021, 40
  store i64 %2032, i64* %remaing_gas
  %2033 = load i64, i64* %STACK_DEP_PTR
  %2034 = sub i64 %2033, 0
  store i64 %2034, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.1119:                                            ; preds = %JumpTableCase89
  %2035 = load i64, i64* %remaing_gas
  %2036 = icmp ugt i64 352, %2035
  br i1 %2036, label %Abort, label %2037

2037:                                             ; preds = %.1119
  %2038 = load i32, i32* %__afl_state, !nosanitize !3
  %2039 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2040 = xor i32 %2039, 2789
  %2041 = xor i32 %2038, %2040
  %2042 = and i32 %2041, 4095
  %2043 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2042
  %2044 = load i8, i8 addrspace(1)* %2043, !nosanitize !3
  %2045 = add i8 %2044, 1
  store i8 %2045, i8 addrspace(1)* %2043, !nosanitize !3
  store i32 1394, i32* %__afl_prev_loc, !nosanitize !3
  %2046 = sub i64 %2035, 352
  store i64 %2046, i64* %remaing_gas
  %2047 = load i64, i64* %STACK_DEP_PTR
  %2048 = getelementptr i256, i256* %STACK, i64 %2047
  %2049 = load i256, i256* %2048
  %2050 = load i64, i64* %STACK_DEP_PTR
  %2051 = sub i64 %2050, 1
  store i64 %2051, i64* %STACK_DEP_PTR
  %2052 = zext i32 %3 to i256
  %"LHS < RHS159" = icmp ult i256 %2052, 4
  %2053 = select i1 %"LHS < RHS159", i8 4, i8 0
  %2054 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2054, i8 %2053, i32 1128)
  %2055 = sub i256 %2052, 4, !pc !68, !intsan !10
  %2056 = add i256 4, %2055
  %"SUM < LHS160" = icmp ult i256 %2056, 4
  %2057 = select i1 %"SUM < LHS160", i8 4, i8 0
  %2058 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2058, i8 %2057, i32 1130)
  %2059 = add i256 4, %2055, !pc !69, !intsan !8
  %2060 = trunc i256 4 to i64
  %2061 = alloca i256
  %2062 = bitcast i256* %2061 to i8*
  call void @__device_calldataload(i8* %2062, i8 addrspace(1)* %4, i64 %2060)
  %2063 = load i256, i256* %2061
  %2064 = and i256 1461501637330902918203684832716283019655932542975, %2063
  %2065 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2065, i8 0, i32 1160)
  %2066 = add i256 32, 4, !pc !70, !intsan !8
  %2067 = trunc i256 %2066 to i64
  %2068 = alloca i256
  %2069 = bitcast i256* %2068 to i8*
  call void @__device_calldataload(i8* %2069, i8 addrspace(1)* %4, i64 %2067)
  %2070 = load i256, i256* %2068
  %2071 = add i256 32, %2066
  %"SUM < LHS161" = icmp ult i256 %2071, 32
  %2072 = select i1 %"SUM < LHS161", i8 4, i8 0
  %2073 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2073, i8 %2072, i32 1170)
  %2074 = add i256 32, %2066, !pc !71, !intsan !8
  %2075 = trunc i256 2507 to i64
  store i64 %2075, i64* %JMP_TARGET_PTR
  %2076 = load i64, i64* %STACK_DEP_PTR
  %2077 = add i64 %2076, 1
  store i64 %2077, i64* %STACK_DEP_PTR
  %2078 = load i64, i64* %STACK_DEP_PTR
  %2079 = getelementptr i256, i256* %STACK, i64 %2078
  store i256 1182, i256* %2079
  %2080 = load i64, i64* %STACK_DEP_PTR
  %2081 = add i64 %2080, 1
  store i64 %2081, i64* %STACK_DEP_PTR
  %2082 = load i64, i64* %STACK_DEP_PTR
  %2083 = getelementptr i256, i256* %STACK, i64 %2082
  store i256 %2064, i256* %2083
  %2084 = load i64, i64* %STACK_DEP_PTR
  %2085 = add i64 %2084, 1
  store i64 %2085, i64* %STACK_DEP_PTR
  %2086 = load i64, i64* %STACK_DEP_PTR
  %2087 = getelementptr i256, i256* %STACK, i64 %2086
  store i256 %2070, i256* %2087
  br label %JumpTable, !EVMBB !4

.1182:                                            ; preds = %JumpTableCase104
  %2088 = load i64, i64* %remaing_gas
  %2089 = icmp ugt i64 224, %2088
  br i1 %2089, label %Abort, label %2090

2090:                                             ; preds = %.1182
  %2091 = load i32, i32* %__afl_state, !nosanitize !3
  %2092 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2093 = xor i32 %2092, 11
  %2094 = xor i32 %2091, %2093
  %2095 = and i32 %2094, 4095
  %2096 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2095
  %2097 = load i8, i8 addrspace(1)* %2096, !nosanitize !3
  %2098 = add i8 %2097, 1
  store i8 %2098, i8 addrspace(1)* %2096, !nosanitize !3
  store i32 5, i32* %__afl_prev_loc, !nosanitize !3
  %2099 = sub i64 %2088, 224
  store i64 %2099, i64* %remaing_gas
  %2100 = load i64, i64* %STACK_DEP_PTR
  %2101 = getelementptr i256, i256* %STACK, i64 %2100
  %2102 = load i256, i256* %2101
  %2103 = load i64, i64* %STACK_DEP_PTR
  %2104 = sub i64 %2103, 1
  store i64 %2104, i64* %STACK_DEP_PTR
  %2105 = trunc i256 64 to i64
  %2106 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %2105, i256* %2106)
  %2107 = load i256, i256* %2106
  %2108 = icmp eq i256 %2102, 0
  %2109 = icmp eq i1 %2108, false
  %2110 = icmp eq i1 %2109, false
  %2111 = icmp eq i1 %2110, false
  %2112 = trunc i256 %2107 to i64
  %2113 = zext i1 %2111 to i256
  %2114 = alloca i256
  store i256 %2113, i256* %2114
  %2115 = bitcast i256* %2114 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2112, i8* %2115, i64 32)
  %2116 = add i256 32, %2107
  %"SUM < LHS162" = icmp ult i256 %2116, 32
  %2117 = select i1 %"SUM < LHS162", i8 4, i8 0
  %2118 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2118, i8 %2117, i32 1196)
  %2119 = add i256 32, %2107, !pc !72, !intsan !8
  %2120 = trunc i256 64 to i64
  %2121 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %2120, i256* %2121)
  %2122 = load i256, i256* %2121
  %"LHS < RHS163" = icmp ult i256 %2119, %2122
  %2123 = select i1 %"LHS < RHS163", i8 4, i8 0
  %2124 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2124, i8 %2123, i32 1205)
  %2125 = sub i256 %2119, %2122, !pc !73, !intsan !10
  br label %Exit, !EVMBB !4

.1208:                                            ; preds = %JumpTableCase88
  %2126 = load i64, i64* %remaing_gas
  %2127 = icmp ugt i64 104, %2126
  br i1 %2127, label %Abort, label %2128

2128:                                             ; preds = %.1208
  %2129 = load i32, i32* %__afl_state, !nosanitize !3
  %2130 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2131 = xor i32 %2130, 4048
  %2132 = xor i32 %2129, %2131
  %2133 = and i32 %2132, 4095
  %2134 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2133
  %2135 = load i8, i8 addrspace(1)* %2134, !nosanitize !3
  %2136 = add i8 %2135, 1
  store i8 %2136, i8 addrspace(1)* %2134, !nosanitize !3
  store i32 2024, i32* %__afl_prev_loc, !nosanitize !3
  %2137 = sub i64 %2126, 104
  store i64 %2137, i64* %remaing_gas
  %2138 = icmp eq i64 %2, 0
  %2139 = trunc i256 1220 to i64
  %jump.check33 = icmp ne i1 %2138, false
  store i64 %2139, i64* %JMP_TARGET_PTR
  %2140 = load i64, i64* %STACK_DEP_PTR
  %2141 = add i64 %2140, 1
  store i64 %2141, i64* %STACK_DEP_PTR
  %2142 = zext i64 %2 to i256
  %2143 = load i64, i64* %STACK_DEP_PTR
  %2144 = getelementptr i256, i256* %STACK, i64 %2143
  store i256 %2142, i256* %2144
  br i1 %jump.check33, label %JumpTable, label %.1216, !EVMBB !4

.1216:                                            ; preds = %2128
  %2145 = load i64, i64* %remaing_gas
  %2146 = icmp ugt i64 40, %2145
  br i1 %2146, label %Abort, label %2147

2147:                                             ; preds = %.1216
  %2148 = load i32, i32* %__afl_state, !nosanitize !3
  %2149 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2150 = xor i32 %2149, 583
  %2151 = xor i32 %2148, %2150
  %2152 = and i32 %2151, 4095
  %2153 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2152
  %2154 = load i8, i8 addrspace(1)* %2153, !nosanitize !3
  %2155 = add i8 %2154, 1
  store i8 %2155, i8 addrspace(1)* %2153, !nosanitize !3
  store i32 291, i32* %__afl_prev_loc, !nosanitize !3
  %2156 = sub i64 %2145, 40
  store i64 %2156, i64* %remaing_gas
  %2157 = load i64, i64* %STACK_DEP_PTR
  %2158 = sub i64 %2157, 0
  store i64 %2158, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.1220:                                            ; preds = %JumpTableCase93
  %2159 = load i64, i64* %remaing_gas
  %2160 = icmp ugt i64 360, %2159
  br i1 %2160, label %Abort, label %2161

2161:                                             ; preds = %.1220
  %2162 = load i32, i32* %__afl_state, !nosanitize !3
  %2163 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2164 = xor i32 %2163, 1725
  %2165 = xor i32 %2162, %2164
  %2166 = and i32 %2165, 4095
  %2167 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2166
  %2168 = load i8, i8 addrspace(1)* %2167, !nosanitize !3
  %2169 = add i8 %2168, 1
  store i8 %2169, i8 addrspace(1)* %2167, !nosanitize !3
  store i32 862, i32* %__afl_prev_loc, !nosanitize !3
  %2170 = sub i64 %2159, 360
  store i64 %2170, i64* %remaing_gas
  %2171 = load i64, i64* %STACK_DEP_PTR
  %2172 = getelementptr i256, i256* %STACK, i64 %2171
  %2173 = load i256, i256* %2172
  %2174 = load i64, i64* %STACK_DEP_PTR
  %2175 = sub i64 %2174, 1
  store i64 %2175, i64* %STACK_DEP_PTR
  %2176 = zext i32 %3 to i256
  %"LHS < RHS164" = icmp ult i256 %2176, 4
  %2177 = select i1 %"LHS < RHS164", i8 4, i8 0
  %2178 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2178, i8 %2177, i32 1229)
  %2179 = sub i256 %2176, 4, !pc !74, !intsan !10
  %2180 = add i256 4, %2179
  %"SUM < LHS165" = icmp ult i256 %2180, 4
  %2181 = select i1 %"SUM < LHS165", i8 4, i8 0
  %2182 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2182, i8 %2181, i32 1231)
  %2183 = add i256 4, %2179, !pc !75, !intsan !8
  %2184 = trunc i256 4 to i64
  %2185 = alloca i256
  %2186 = bitcast i256* %2185 to i8*
  call void @__device_calldataload(i8* %2186, i8 addrspace(1)* %4, i64 %2184)
  %2187 = load i256, i256* %2185
  %2188 = and i256 1461501637330902918203684832716283019655932542975, %2187
  %2189 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2189, i8 0, i32 1261)
  %2190 = add i256 32, 4, !pc !76, !intsan !8
  %2191 = trunc i256 %2190 to i64
  %2192 = alloca i256
  %2193 = bitcast i256* %2192 to i8*
  call void @__device_calldataload(i8* %2193, i8 addrspace(1)* %4, i64 %2191)
  %2194 = load i256, i256* %2192
  %2195 = and i256 1461501637330902918203684832716283019655932542975, %2194
  %2196 = add i256 32, %2190
  %"SUM < LHS166" = icmp ult i256 %2196, 32
  %2197 = select i1 %"SUM < LHS166", i8 4, i8 0
  %2198 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2198, i8 %2197, i32 1293)
  %2199 = add i256 32, %2190, !pc !77, !intsan !8
  %2200 = trunc i256 2530 to i64
  store i64 %2200, i64* %JMP_TARGET_PTR
  %2201 = load i64, i64* %STACK_DEP_PTR
  %2202 = add i64 %2201, 1
  store i64 %2202, i64* %STACK_DEP_PTR
  %2203 = load i64, i64* %STACK_DEP_PTR
  %2204 = getelementptr i256, i256* %STACK, i64 %2203
  store i256 1305, i256* %2204
  %2205 = load i64, i64* %STACK_DEP_PTR
  %2206 = add i64 %2205, 1
  store i64 %2206, i64* %STACK_DEP_PTR
  %2207 = load i64, i64* %STACK_DEP_PTR
  %2208 = getelementptr i256, i256* %STACK, i64 %2207
  store i256 %2188, i256* %2208
  %2209 = load i64, i64* %STACK_DEP_PTR
  %2210 = add i64 %2209, 1
  store i64 %2210, i64* %STACK_DEP_PTR
  %2211 = load i64, i64* %STACK_DEP_PTR
  %2212 = getelementptr i256, i256* %STACK, i64 %2211
  store i256 %2195, i256* %2212
  br label %JumpTable, !EVMBB !4

.1305:                                            ; preds = %JumpTableCase97
  %2213 = load i64, i64* %remaing_gas
  %2214 = icmp ugt i64 184, %2213
  br i1 %2214, label %Abort, label %2215

2215:                                             ; preds = %.1305
  %2216 = load i32, i32* %__afl_state, !nosanitize !3
  %2217 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2218 = xor i32 %2217, 3363
  %2219 = xor i32 %2216, %2218
  %2220 = and i32 %2219, 4095
  %2221 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2220
  %2222 = load i8, i8 addrspace(1)* %2221, !nosanitize !3
  %2223 = add i8 %2222, 1
  store i8 %2223, i8 addrspace(1)* %2221, !nosanitize !3
  store i32 1681, i32* %__afl_prev_loc, !nosanitize !3
  %2224 = sub i64 %2213, 184
  store i64 %2224, i64* %remaing_gas
  %2225 = load i64, i64* %STACK_DEP_PTR
  %2226 = getelementptr i256, i256* %STACK, i64 %2225
  %2227 = load i256, i256* %2226
  %2228 = load i64, i64* %STACK_DEP_PTR
  %2229 = sub i64 %2228, 1
  store i64 %2229, i64* %STACK_DEP_PTR
  %2230 = trunc i256 64 to i64
  %2231 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %2230, i256* %2231)
  %2232 = load i256, i256* %2231
  %2233 = trunc i256 %2232 to i64
  %2234 = alloca i256
  store i256 %2227, i256* %2234
  %2235 = bitcast i256* %2234 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2233, i8* %2235, i64 32)
  %2236 = add i256 32, %2232
  %"SUM < LHS167" = icmp ult i256 %2236, 32
  %2237 = select i1 %"SUM < LHS167", i8 4, i8 0
  %2238 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2238, i8 %2237, i32 1315)
  %2239 = add i256 32, %2232, !pc !78, !intsan !8
  %2240 = trunc i256 64 to i64
  %2241 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %2240, i256* %2241)
  %2242 = load i256, i256* %2241
  %"LHS < RHS168" = icmp ult i256 %2239, %2242
  %2243 = select i1 %"LHS < RHS168", i8 4, i8 0
  %2244 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2244, i8 %2243, i32 1324)
  %2245 = sub i256 %2239, %2242, !pc !79, !intsan !10
  br label %Exit, !EVMBB !4

.1327:                                            ; preds = %JumpTableCase43
  %2246 = load i64, i64* %remaing_gas
  %2247 = icmp ugt i64 344, %2246
  br i1 %2247, label %Abort, label %2248

2248:                                             ; preds = %.1327
  %2249 = load i32, i32* %__afl_state, !nosanitize !3
  %2250 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2251 = xor i32 %2250, 3752
  %2252 = xor i32 %2249, %2251
  %2253 = and i32 %2252, 4095
  %2254 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2253
  %2255 = load i8, i8 addrspace(1)* %2254, !nosanitize !3
  %2256 = add i8 %2255, 1
  store i8 %2256, i8 addrspace(1)* %2254, !nosanitize !3
  store i32 1876, i32* %__afl_prev_loc, !nosanitize !3
  %2257 = sub i64 %2246, 344
  store i64 %2257, i64* %remaing_gas
  %2258 = load i64, i64* %STACK_DEP_PTR
  %2259 = getelementptr i256, i256* %STACK, i64 %2258
  %2260 = load i256, i256* %2259
  %2261 = load i64, i64* %STACK_DEP_PTR
  %2262 = sub i64 %2261, 1
  store i64 %2262, i64* %STACK_DEP_PTR
  %2263 = trunc i256 64 to i64
  %2264 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %2263, i256* %2264)
  %2265 = load i256, i256* %2264
  %2266 = add i256 %2265, 64
  %"SUM < LHS169" = icmp ult i256 %2266, %2265
  %2267 = select i1 %"SUM < LHS169", i8 4, i8 0
  %2268 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2268, i8 %2267, i32 1334)
  %2269 = add i256 %2265, 64, !pc !80, !intsan !8
  %2270 = trunc i256 64 to i64
  %2271 = alloca i256
  store i256 %2269, i256* %2271
  %2272 = bitcast i256* %2271 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2270, i8* %2272, i64 32)
  %2273 = trunc i256 %2265 to i64
  %2274 = alloca i256
  store i256 7, i256* %2274
  %2275 = bitcast i256* %2274 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2273, i8* %2275, i64 32)
  %2276 = add i256 32, %2265
  %"SUM < LHS170" = icmp ult i256 %2276, 32
  %2277 = select i1 %"SUM < LHS170", i8 4, i8 0
  %2278 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2278, i8 %2277, i32 1345)
  %2279 = add i256 32, %2265, !pc !81, !intsan !8
  %2280 = trunc i256 %2279 to i64
  %2281 = alloca i256
  store i256 32745807487107243917945727021158112399853407069921258772547084306127010136064, i256* %2281
  %2282 = bitcast i256* %2281 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2280, i8* %2282, i64 32)
  %2283 = trunc i256 %2260 to i64
  store i64 %2283, i64* %JMP_TARGET_PTR
  %2284 = load i64, i64* %STACK_DEP_PTR
  %2285 = add i64 %2284, 1
  store i64 %2285, i64* %STACK_DEP_PTR
  %2286 = load i64, i64* %STACK_DEP_PTR
  %2287 = getelementptr i256, i256* %STACK, i64 %2286
  store i256 %2260, i256* %2287
  %2288 = load i64, i64* %STACK_DEP_PTR
  %2289 = add i64 %2288, 1
  store i64 %2289, i64* %STACK_DEP_PTR
  %2290 = load i64, i64* %STACK_DEP_PTR
  %2291 = getelementptr i256, i256* %STACK, i64 %2290
  store i256 %2265, i256* %2291
  br label %JumpTable, !EVMBB !4

.1384:                                            ; preds = %JumpTableCase46
  %2292 = load i64, i64* %remaing_gas
  %2293 = icmp ugt i64 248, %2292
  br i1 %2293, label %Abort, label %2294

2294:                                             ; preds = %.1384
  %2295 = load i32, i32* %__afl_state, !nosanitize !3
  %2296 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2297 = xor i32 %2296, 3707
  %2298 = xor i32 %2295, %2297
  %2299 = and i32 %2298, 4095
  %2300 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2299
  %2301 = load i8, i8 addrspace(1)* %2300, !nosanitize !3
  %2302 = add i8 %2301, 1
  store i8 %2302, i8 addrspace(1)* %2300, !nosanitize !3
  store i32 1853, i32* %__afl_prev_loc, !nosanitize !3
  %2303 = sub i64 %2292, 248
  store i64 %2303, i64* %remaing_gas
  %2304 = load i64, i64* %STACK_DEP_PTR
  %2305 = getelementptr i256, i256* %STACK, i64 %2304
  %2306 = load i256, i256* %2305
  %2307 = load i64, i64* %STACK_DEP_PTR
  %2308 = sub i64 %2307, 1
  store i64 %2308, i64* %STACK_DEP_PTR
  %2309 = icmp eq i256 %2306, 0
  %2310 = trunc i256 1524 to i64
  %jump.check10 = icmp ne i1 %2309, false
  store i64 %2310, i64* %JMP_TARGET_PTR
  %2311 = load i64, i64* %STACK_DEP_PTR
  %2312 = add i64 %2311, 1
  store i64 %2312, i64* %STACK_DEP_PTR
  %2313 = load i64, i64* %STACK_DEP_PTR
  %2314 = getelementptr i256, i256* %STACK, i64 %2313
  store i256 %2306, i256* %2314
  %2315 = load i64, i64* %STACK_DEP_PTR
  %2316 = add i64 %2315, 1
  store i64 %2316, i64* %STACK_DEP_PTR
  %2317 = load i64, i64* %STACK_DEP_PTR
  %2318 = getelementptr i256, i256* %STACK, i64 %2317
  store i256 0, i256* %2318
  %2319 = load i64, i64* %STACK_DEP_PTR
  %2320 = add i64 %2319, 1
  store i64 %2320, i64* %STACK_DEP_PTR
  %2321 = zext i1 %2309 to i256
  %2322 = load i64, i64* %STACK_DEP_PTR
  %2323 = getelementptr i256, i256* %STACK, i64 %2322
  store i256 %2321, i256* %2323
  br i1 %jump.check10, label %JumpTable, label %.1395, !EVMBB !4

.1395:                                            ; preds = %2294
  %2324 = load i64, i64* %STACK_DEP_PTR
  %2325 = sub i64 %2324, 3
  store i64 %2325, i64* %STACK_DEP_PTR
  %2326 = load i64, i64* %STACK_DEP_PTR
  %2327 = getelementptr i256, i256* %STACK, i64 %2326
  %2328 = load i256, i256* %2327
  %2329 = load i64, i64* %STACK_DEP_PTR
  %2330 = sub i64 %2329, 1
  store i64 %2330, i64* %STACK_DEP_PTR
  %2331 = load i160, i160 addrspace(4)* @CALLER
  %2332 = zext i160 %2331 to i256
  %2333 = and i256 1461501637330902918203684832716283019655932542975, %2332
  %2334 = and i256 1461501637330902918203684832716283019655932542975, %2333
  %2335 = trunc i256 0 to i64
  %2336 = alloca i256
  store i256 %2334, i256* %2336
  %2337 = bitcast i256* %2336 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2335, i8* %2337, i64 32)
  %2338 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2338, i8 0, i32 1451)
  %2339 = add i256 32, 0, !pc !82, !intsan !8
  %2340 = trunc i256 %2339 to i64
  %2341 = alloca i256
  store i256 2, i256* %2341
  %2342 = bitcast i256* %2341 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2340, i8* %2342, i64 32)
  %2343 = add i256 32, %2339
  %"SUM < LHS171" = icmp ult i256 %2343, 32
  %2344 = select i1 %"SUM < LHS171", i8 4, i8 0
  %2345 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2345, i8 %2344, i32 1457)
  %2346 = add i256 32, %2339, !pc !83, !intsan !8
  %2347 = getelementptr i8, i8* %MEMORY, i256 0
  %2348 = trunc i256 %2346 to i32
  %2349 = alloca i256
  %2350 = bitcast i256* %2349 to i8*
  call void @__device_sha3(i8* %2347, i32 %2348, i8* %2350)
  %2351 = load i256, i256* %2349
  %2352 = and i256 1461501637330902918203684832716283019655932542975, %2328
  %2353 = and i256 1461501637330902918203684832716283019655932542975, %2352
  %2354 = trunc i256 0 to i64
  %2355 = alloca i256
  store i256 %2353, i256* %2355
  %2356 = bitcast i256* %2355 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2354, i8* %2356, i64 32)
  %2357 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2357, i8 0, i32 1512)
  %2358 = add i256 32, 0, !pc !84, !intsan !8
  %2359 = trunc i256 %2358 to i64
  %2360 = alloca i256
  store i256 %2351, i256* %2360
  %2361 = bitcast i256* %2360 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2359, i8* %2361, i64 32)
  %2362 = add i256 32, %2358
  %"SUM < LHS172" = icmp ult i256 %2362, 32
  %2363 = select i1 %"SUM < LHS172", i8 4, i8 0
  %2364 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2364, i8 %2363, i32 1518)
  %2365 = add i256 32, %2358, !pc !85, !intsan !8
  %2366 = getelementptr i8, i8* %MEMORY, i256 0
  %2367 = trunc i256 %2365 to i32
  %2368 = alloca i256
  %2369 = bitcast i256* %2368 to i8*
  call void @__device_sha3(i8* %2366, i32 %2367, i8* %2369)
  %2370 = load i256, i256* %2368
  %2371 = alloca i256
  store i256 %2370, i256* %2371
  %2372 = alloca i256
  %2373 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %2373, i256* %2371, i256* %2372)
  %2374 = bitcast i256* %2371 to i32*
  %2375 = call i32 @__hashword(i32* %2374)
  %2376 = bitcast i256* %2372 to i32*
  %2377 = call i32 @__hashword(i32* %2376)
  %2378 = xor i32 %2375, %2377
  store i32 %2378, i32* %__afl_state, !nosanitize !3
  %2379 = load i256, i256* %2372
  %2380 = icmp eq i256 %2379, 0
  %2381 = load i64, i64* %STACK_DEP_PTR
  %2382 = add i64 %2381, 1
  store i64 %2382, i64* %STACK_DEP_PTR
  %2383 = load i64, i64* %STACK_DEP_PTR
  %2384 = getelementptr i256, i256* %STACK, i64 %2383
  store i256 %2328, i256* %2384
  %2385 = load i64, i64* %STACK_DEP_PTR
  %2386 = add i64 %2385, 1
  store i64 %2386, i64* %STACK_DEP_PTR
  %2387 = load i64, i64* %STACK_DEP_PTR
  %2388 = getelementptr i256, i256* %STACK, i64 %2387
  store i256 %2306, i256* %2388
  %2389 = load i64, i64* %STACK_DEP_PTR
  %2390 = add i64 %2389, 1
  store i64 %2390, i64* %STACK_DEP_PTR
  %2391 = load i64, i64* %STACK_DEP_PTR
  %2392 = getelementptr i256, i256* %STACK, i64 %2391
  store i256 0, i256* %2392
  %2393 = load i64, i64* %STACK_DEP_PTR
  %2394 = add i64 %2393, 1
  store i64 %2394, i64* %STACK_DEP_PTR
  %2395 = zext i1 %2380 to i256
  %2396 = load i64, i64* %STACK_DEP_PTR
  %2397 = getelementptr i256, i256* %STACK, i64 %2396
  store i256 %2395, i256* %2397
  br label %.1524

.1524:                                            ; preds = %JumpTableCase51, %.1395
  %2398 = load i64, i64* %remaing_gas
  %2399 = icmp ugt i64 104, %2398
  br i1 %2399, label %Abort, label %2400

2400:                                             ; preds = %.1524
  %2401 = load i32, i32* %__afl_state, !nosanitize !3
  %2402 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2403 = xor i32 %2402, 3525
  %2404 = xor i32 %2401, %2403
  %2405 = and i32 %2404, 4095
  %2406 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2405
  %2407 = load i8, i8 addrspace(1)* %2406, !nosanitize !3
  %2408 = add i8 %2407, 1
  store i8 %2408, i8 addrspace(1)* %2406, !nosanitize !3
  store i32 1762, i32* %__afl_prev_loc, !nosanitize !3
  %2409 = sub i64 %2398, 104
  store i64 %2409, i64* %remaing_gas
  %2410 = load i64, i64* %STACK_DEP_PTR
  %2411 = getelementptr i256, i256* %STACK, i64 %2410
  %2412 = load i256, i256* %2411
  %2413 = load i64, i64* %STACK_DEP_PTR
  %2414 = sub i64 %2413, 1
  store i64 %2414, i64* %STACK_DEP_PTR
  %2415 = icmp eq i256 %2412, 0
  %2416 = icmp eq i1 %2415, false
  %2417 = trunc i256 1535 to i64
  %jump.check13 = icmp ne i1 %2416, false
  store i64 %2417, i64* %JMP_TARGET_PTR
  br i1 %jump.check13, label %JumpTable, label %.1531, !EVMBB !4

.1531:                                            ; preds = %2400
  %2418 = load i64, i64* %remaing_gas
  %2419 = icmp ugt i64 16, %2418
  br i1 %2419, label %Abort, label %2420

2420:                                             ; preds = %.1531
  %2421 = load i32, i32* %__afl_state, !nosanitize !3
  %2422 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2423 = xor i32 %2422, 2931
  %2424 = xor i32 %2421, %2423
  %2425 = and i32 %2424, 4095
  %2426 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2425
  %2427 = load i8, i8 addrspace(1)* %2426, !nosanitize !3
  %2428 = add i8 %2427, 1
  store i8 %2428, i8 addrspace(1)* %2426, !nosanitize !3
  store i32 1465, i32* %__afl_prev_loc, !nosanitize !3
  %2429 = sub i64 %2418, 16
  store i64 %2429, i64* %remaing_gas
  br label %Abort, !EVMBB !4

.1535:                                            ; preds = %JumpTableCase56
  %2430 = load i64, i64* %remaing_gas
  %2431 = icmp ugt i64 800, %2430
  br i1 %2431, label %Abort, label %2432

2432:                                             ; preds = %.1535
  %2433 = load i32, i32* %__afl_state, !nosanitize !3
  %2434 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2435 = xor i32 %2434, 709
  %2436 = xor i32 %2433, %2435
  %2437 = and i32 %2436, 4095
  %2438 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2437
  %2439 = load i8, i8 addrspace(1)* %2438, !nosanitize !3
  %2440 = add i8 %2439, 1
  store i8 %2440, i8 addrspace(1)* %2438, !nosanitize !3
  store i32 354, i32* %__afl_prev_loc, !nosanitize !3
  %2441 = sub i64 %2430, 800
  store i64 %2441, i64* %remaing_gas
  %2442 = load i64, i64* %STACK_DEP_PTR
  %2443 = getelementptr i256, i256* %STACK, i64 %2442
  %2444 = load i256, i256* %2443
  %2445 = load i64, i64* %STACK_DEP_PTR
  %2446 = sub i64 %2445, 1
  store i64 %2446, i64* %STACK_DEP_PTR
  %2447 = load i64, i64* %STACK_DEP_PTR
  %2448 = getelementptr i256, i256* %STACK, i64 %2447
  %2449 = load i256, i256* %2448
  %2450 = load i64, i64* %STACK_DEP_PTR
  %2451 = sub i64 %2450, 1
  store i64 %2451, i64* %STACK_DEP_PTR
  %2452 = load i64, i64* %STACK_DEP_PTR
  %2453 = getelementptr i256, i256* %STACK, i64 %2452
  %2454 = load i256, i256* %2453
  %2455 = load i64, i64* %STACK_DEP_PTR
  %2456 = sub i64 %2455, 1
  store i64 %2456, i64* %STACK_DEP_PTR
  %2457 = load i64, i64* %STACK_DEP_PTR
  %2458 = getelementptr i256, i256* %STACK, i64 %2457
  %2459 = load i256, i256* %2458
  %2460 = load i64, i64* %STACK_DEP_PTR
  %2461 = sub i64 %2460, 1
  store i64 %2461, i64* %STACK_DEP_PTR
  %2462 = load i160, i160 addrspace(4)* @CALLER
  %2463 = zext i160 %2462 to i256
  %2464 = and i256 1461501637330902918203684832716283019655932542975, %2463
  %2465 = and i256 1461501637330902918203684832716283019655932542975, %2464
  %2466 = trunc i256 0 to i64
  %2467 = alloca i256
  store i256 %2465, i256* %2467
  %2468 = bitcast i256* %2467 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2466, i8* %2468, i64 32)
  %2469 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2469, i8 0, i32 1590)
  %2470 = add i256 32, 0, !pc !86, !intsan !8
  %2471 = trunc i256 %2470 to i64
  %2472 = alloca i256
  store i256 2, i256* %2472
  %2473 = bitcast i256* %2472 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2471, i8* %2473, i64 32)
  %2474 = add i256 32, %2470
  %"SUM < LHS173" = icmp ult i256 %2474, 32
  %2475 = select i1 %"SUM < LHS173", i8 4, i8 0
  %2476 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2476, i8 %2475, i32 1596)
  %2477 = add i256 32, %2470, !pc !87, !intsan !8
  %2478 = getelementptr i8, i8* %MEMORY, i256 0
  %2479 = trunc i256 %2477 to i32
  %2480 = alloca i256
  %2481 = bitcast i256* %2480 to i8*
  call void @__device_sha3(i8* %2478, i32 %2479, i8* %2481)
  %2482 = load i256, i256* %2480
  %2483 = and i256 1461501637330902918203684832716283019655932542975, %2454
  %2484 = and i256 1461501637330902918203684832716283019655932542975, %2483
  %2485 = trunc i256 0 to i64
  %2486 = alloca i256
  store i256 %2484, i256* %2486
  %2487 = bitcast i256* %2486 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2485, i8* %2487, i64 32)
  %2488 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2488, i8 0, i32 1651)
  %2489 = add i256 32, 0, !pc !88, !intsan !8
  %2490 = trunc i256 %2489 to i64
  %2491 = alloca i256
  store i256 %2482, i256* %2491
  %2492 = bitcast i256* %2491 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2490, i8* %2492, i64 32)
  %2493 = add i256 32, %2489
  %"SUM < LHS174" = icmp ult i256 %2493, 32
  %2494 = select i1 %"SUM < LHS174", i8 4, i8 0
  %2495 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2495, i8 %2494, i32 1657)
  %2496 = add i256 32, %2489, !pc !89, !intsan !8
  %2497 = getelementptr i8, i8* %MEMORY, i256 0
  %2498 = trunc i256 %2496 to i32
  %2499 = alloca i256
  %2500 = bitcast i256* %2499 to i8*
  call void @__device_sha3(i8* %2497, i32 %2498, i8* %2500)
  %2501 = load i256, i256* %2499
  %2502 = alloca i256
  store i256 %2501, i256* %2502
  %2503 = alloca i256
  store i256 %2449, i256* %2503
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %2502, i256* %2503)
  %2504 = and i256 1461501637330902918203684832716283019655932542975, %2454
  %2505 = load i160, i160 addrspace(4)* @CALLER
  %2506 = zext i160 %2505 to i256
  %2507 = and i256 1461501637330902918203684832716283019655932542975, %2506
  %2508 = trunc i256 64 to i64
  %2509 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %2508, i256* %2509)
  %2510 = load i256, i256* %2509
  %2511 = trunc i256 %2510 to i64
  %2512 = alloca i256
  store i256 %2449, i256* %2512
  %2513 = bitcast i256* %2512 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2511, i8* %2513, i64 32)
  %2514 = add i256 32, %2510
  %"SUM < LHS175" = icmp ult i256 %2514, 32
  %2515 = select i1 %"SUM < LHS175", i8 4, i8 0
  %2516 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2516, i8 %2515, i32 1754)
  %2517 = add i256 32, %2510, !pc !90, !intsan !8
  %2518 = trunc i256 64 to i64
  %2519 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %2518, i256* %2519)
  %2520 = load i256, i256* %2519
  %"LHS < RHS176" = icmp ult i256 %2517, %2520
  %2521 = select i1 %"LHS < RHS176", i8 4, i8 0
  %2522 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2522, i8 %2521, i32 1763)
  %2523 = sub i256 %2517, %2520, !pc !91, !intsan !10
  %2524 = trunc i256 %2459 to i64
  store i64 %2524, i64* %JMP_TARGET_PTR
  %2525 = load i64, i64* %STACK_DEP_PTR
  %2526 = add i64 %2525, 1
  store i64 %2526, i64* %STACK_DEP_PTR
  %2527 = load i64, i64* %STACK_DEP_PTR
  %2528 = getelementptr i256, i256* %STACK, i64 %2527
  store i256 1, i256* %2528
  br label %JumpTable, !EVMBB !4

.1775:                                            ; preds = %JumpTableCase50
  %2529 = load i64, i64* %remaing_gas
  %2530 = icmp ugt i64 176, %2529
  br i1 %2530, label %Abort, label %2531

2531:                                             ; preds = %.1775
  %2532 = load i32, i32* %__afl_state, !nosanitize !3
  %2533 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2534 = xor i32 %2533, 843
  %2535 = xor i32 %2532, %2534
  %2536 = and i32 %2535, 4095
  %2537 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2536
  %2538 = load i8, i8 addrspace(1)* %2537, !nosanitize !3
  %2539 = add i8 %2538, 1
  store i8 %2539, i8 addrspace(1)* %2537, !nosanitize !3
  store i32 421, i32* %__afl_prev_loc, !nosanitize !3
  %2540 = sub i64 %2529, 176
  store i64 %2540, i64* %remaing_gas
  %2541 = load i64, i64* %STACK_DEP_PTR
  %2542 = getelementptr i256, i256* %STACK, i64 %2541
  %2543 = load i256, i256* %2542
  %2544 = load i64, i64* %STACK_DEP_PTR
  %2545 = sub i64 %2544, 1
  store i64 %2545, i64* %STACK_DEP_PTR
  %2546 = alloca i256
  store i256 0, i256* %2546
  %2547 = alloca i256
  %2548 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %2548, i256* %2546, i256* %2547)
  %2549 = load i256, i256* %2547
  %2550 = trunc i256 %2543 to i64
  store i64 %2550, i64* %JMP_TARGET_PTR
  %2551 = load i64, i64* %STACK_DEP_PTR
  %2552 = add i64 %2551, 1
  store i64 %2552, i64* %STACK_DEP_PTR
  %2553 = load i64, i64* %STACK_DEP_PTR
  %2554 = getelementptr i256, i256* %STACK, i64 %2553
  store i256 %2549, i256* %2554
  br label %JumpTable, !EVMBB !4

.1784:                                            ; preds = %JumpTableCase54
  %2555 = load i64, i64* %remaing_gas
  %2556 = icmp ugt i64 792, %2555
  br i1 %2556, label %Abort, label %2557

2557:                                             ; preds = %.1784
  %2558 = load i32, i32* %__afl_state, !nosanitize !3
  %2559 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2560 = xor i32 %2559, 3939
  %2561 = xor i32 %2558, %2560
  %2562 = and i32 %2561, 4095
  %2563 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2562
  %2564 = load i8, i8 addrspace(1)* %2563, !nosanitize !3
  %2565 = add i8 %2564, 1
  store i8 %2565, i8 addrspace(1)* %2563, !nosanitize !3
  store i32 1969, i32* %__afl_prev_loc, !nosanitize !3
  %2566 = sub i64 %2555, 792
  store i64 %2566, i64* %remaing_gas
  %2567 = load i64, i64* %STACK_DEP_PTR
  %2568 = getelementptr i256, i256* %STACK, i64 %2567
  %2569 = load i256, i256* %2568
  %2570 = load i64, i64* %STACK_DEP_PTR
  %2571 = sub i64 %2570, 1
  store i64 %2571, i64* %STACK_DEP_PTR
  %2572 = load i64, i64* %STACK_DEP_PTR
  %2573 = getelementptr i256, i256* %STACK, i64 %2572
  %2574 = load i256, i256* %2573
  %2575 = load i64, i64* %STACK_DEP_PTR
  %2576 = sub i64 %2575, 1
  store i64 %2576, i64* %STACK_DEP_PTR
  %2577 = load i64, i64* %STACK_DEP_PTR
  %2578 = getelementptr i256, i256* %STACK, i64 %2577
  %2579 = load i256, i256* %2578
  %2580 = load i64, i64* %STACK_DEP_PTR
  %2581 = sub i64 %2580, 1
  store i64 %2581, i64* %STACK_DEP_PTR
  %2582 = and i256 1461501637330902918203684832716283019655932542975, %2579
  %2583 = and i256 1461501637330902918203684832716283019655932542975, %2582
  %2584 = trunc i256 0 to i64
  %2585 = alloca i256
  store i256 %2583, i256* %2585
  %2586 = bitcast i256* %2585 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2584, i8* %2586, i64 32)
  %2587 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2587, i8 0, i32 1841)
  %2588 = add i256 32, 0, !pc !92, !intsan !8
  %2589 = trunc i256 %2588 to i64
  %2590 = alloca i256
  store i256 2, i256* %2590
  %2591 = bitcast i256* %2590 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2589, i8* %2591, i64 32)
  %2592 = add i256 32, %2588
  %"SUM < LHS177" = icmp ult i256 %2592, 32
  %2593 = select i1 %"SUM < LHS177", i8 4, i8 0
  %2594 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2594, i8 %2593, i32 1847)
  %2595 = add i256 32, %2588, !pc !93, !intsan !8
  %2596 = getelementptr i8, i8* %MEMORY, i256 0
  %2597 = trunc i256 %2595 to i32
  %2598 = alloca i256
  %2599 = bitcast i256* %2598 to i8*
  call void @__device_sha3(i8* %2596, i32 %2597, i8* %2599)
  %2600 = load i256, i256* %2598
  %2601 = load i160, i160 addrspace(4)* @CALLER
  %2602 = zext i160 %2601 to i256
  %2603 = and i256 1461501637330902918203684832716283019655932542975, %2602
  %2604 = and i256 1461501637330902918203684832716283019655932542975, %2603
  %2605 = trunc i256 0 to i64
  %2606 = alloca i256
  store i256 %2604, i256* %2606
  %2607 = bitcast i256* %2606 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2605, i8* %2607, i64 32)
  %2608 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2608, i8 0, i32 1902)
  %2609 = add i256 32, 0, !pc !94, !intsan !8
  %2610 = trunc i256 %2609 to i64
  %2611 = alloca i256
  store i256 %2600, i256* %2611
  %2612 = bitcast i256* %2611 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2610, i8* %2612, i64 32)
  %2613 = add i256 32, %2609
  %"SUM < LHS178" = icmp ult i256 %2613, 32
  %2614 = select i1 %"SUM < LHS178", i8 4, i8 0
  %2615 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2615, i8 %2614, i32 1908)
  %2616 = add i256 32, %2609, !pc !95, !intsan !8
  %2617 = getelementptr i8, i8* %MEMORY, i256 0
  %2618 = trunc i256 %2616 to i32
  %2619 = alloca i256
  %2620 = bitcast i256* %2619 to i8*
  call void @__device_sha3(i8* %2617, i32 %2618, i8* %2620)
  %2621 = load i256, i256* %2619
  %2622 = alloca i256
  store i256 %2621, i256* %2622
  %2623 = alloca i256
  %2624 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %2624, i256* %2622, i256* %2623)
  %2625 = bitcast i256* %2622 to i32*
  %2626 = call i32 @__hashword(i32* %2625)
  %2627 = bitcast i256* %2623 to i32*
  %2628 = call i32 @__hashword(i32* %2627)
  %2629 = xor i32 %2626, %2628
  store i32 %2629, i32* %__afl_state, !nosanitize !3
  %2630 = load i256, i256* %2623
  %2631 = icmp ult i256 %2630, %2569
  %2632 = icmp eq i1 %2631, false
  %2633 = icmp eq i1 %2632, false
  %2634 = icmp eq i1 %2633, false
  %2635 = trunc i256 1925 to i64
  %jump.check16 = icmp ne i1 %2634, false
  store i64 %2635, i64* %JMP_TARGET_PTR
  %2636 = load i64, i64* %STACK_DEP_PTR
  %2637 = add i64 %2636, 1
  store i64 %2637, i64* %STACK_DEP_PTR
  %2638 = load i64, i64* %STACK_DEP_PTR
  %2639 = getelementptr i256, i256* %STACK, i64 %2638
  store i256 %2579, i256* %2639
  %2640 = load i64, i64* %STACK_DEP_PTR
  %2641 = add i64 %2640, 1
  store i64 %2641, i64* %STACK_DEP_PTR
  %2642 = load i64, i64* %STACK_DEP_PTR
  %2643 = getelementptr i256, i256* %STACK, i64 %2642
  store i256 %2574, i256* %2643
  %2644 = load i64, i64* %STACK_DEP_PTR
  %2645 = add i64 %2644, 1
  store i64 %2645, i64* %STACK_DEP_PTR
  %2646 = load i64, i64* %STACK_DEP_PTR
  %2647 = getelementptr i256, i256* %STACK, i64 %2646
  store i256 %2569, i256* %2647
  %2648 = load i64, i64* %STACK_DEP_PTR
  %2649 = add i64 %2648, 1
  store i64 %2649, i64* %STACK_DEP_PTR
  %2650 = load i64, i64* %STACK_DEP_PTR
  %2651 = getelementptr i256, i256* %STACK, i64 %2650
  store i256 0, i256* %2651
  br i1 %jump.check16, label %JumpTable, label %.1921, !EVMBB !4

.1921:                                            ; preds = %2557
  %2652 = load i64, i64* %remaing_gas
  %2653 = icmp ugt i64 40, %2652
  br i1 %2653, label %Abort, label %2654

2654:                                             ; preds = %.1921
  %2655 = load i32, i32* %__afl_state, !nosanitize !3
  %2656 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2657 = xor i32 %2656, 3952
  %2658 = xor i32 %2655, %2657
  %2659 = and i32 %2658, 4095
  %2660 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2659
  %2661 = load i8, i8 addrspace(1)* %2660, !nosanitize !3
  %2662 = add i8 %2661, 1
  store i8 %2662, i8 addrspace(1)* %2660, !nosanitize !3
  store i32 1976, i32* %__afl_prev_loc, !nosanitize !3
  %2663 = sub i64 %2652, 40
  store i64 %2663, i64* %remaing_gas
  %2664 = load i64, i64* %STACK_DEP_PTR
  %2665 = sub i64 %2664, 0
  store i64 %2665, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.1925:                                            ; preds = %JumpTableCase60
  %2666 = load i64, i64* %remaing_gas
  %2667 = icmp ugt i64 1040, %2666
  br i1 %2667, label %Abort, label %2668

2668:                                             ; preds = %.1925
  %2669 = load i32, i32* %__afl_state, !nosanitize !3
  %2670 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2671 = xor i32 %2670, 1572
  %2672 = xor i32 %2669, %2671
  %2673 = and i32 %2672, 4095
  %2674 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2673
  %2675 = load i8, i8 addrspace(1)* %2674, !nosanitize !3
  %2676 = add i8 %2675, 1
  store i8 %2676, i8 addrspace(1)* %2674, !nosanitize !3
  store i32 786, i32* %__afl_prev_loc, !nosanitize !3
  %2677 = sub i64 %2666, 1040
  store i64 %2677, i64* %remaing_gas
  %2678 = load i64, i64* %STACK_DEP_PTR
  %2679 = getelementptr i256, i256* %STACK, i64 %2678
  %2680 = load i256, i256* %2679
  %2681 = load i64, i64* %STACK_DEP_PTR
  %2682 = sub i64 %2681, 1
  store i64 %2682, i64* %STACK_DEP_PTR
  %2683 = load i64, i64* %STACK_DEP_PTR
  %2684 = getelementptr i256, i256* %STACK, i64 %2683
  %2685 = load i256, i256* %2684
  %2686 = load i64, i64* %STACK_DEP_PTR
  %2687 = sub i64 %2686, 1
  store i64 %2687, i64* %STACK_DEP_PTR
  %2688 = load i64, i64* %STACK_DEP_PTR
  %2689 = getelementptr i256, i256* %STACK, i64 %2688
  %2690 = load i256, i256* %2689
  %2691 = load i64, i64* %STACK_DEP_PTR
  %2692 = sub i64 %2691, 1
  store i64 %2692, i64* %STACK_DEP_PTR
  %2693 = load i64, i64* %STACK_DEP_PTR
  %2694 = getelementptr i256, i256* %STACK, i64 %2693
  %2695 = load i256, i256* %2694
  %2696 = load i64, i64* %STACK_DEP_PTR
  %2697 = sub i64 %2696, 1
  store i64 %2697, i64* %STACK_DEP_PTR
  %2698 = and i256 1461501637330902918203684832716283019655932542975, %2695
  %2699 = and i256 1461501637330902918203684832716283019655932542975, %2698
  %2700 = trunc i256 0 to i64
  %2701 = alloca i256
  store i256 %2699, i256* %2701
  %2702 = bitcast i256* %2701 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2700, i8* %2702, i64 32)
  %2703 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2703, i8 0, i32 1980)
  %2704 = add i256 32, 0, !pc !96, !intsan !8
  %2705 = trunc i256 %2704 to i64
  %2706 = alloca i256
  store i256 2, i256* %2706
  %2707 = bitcast i256* %2706 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2705, i8* %2707, i64 32)
  %2708 = add i256 32, %2704
  %"SUM < LHS179" = icmp ult i256 %2708, 32
  %2709 = select i1 %"SUM < LHS179", i8 4, i8 0
  %2710 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2710, i8 %2709, i32 1986)
  %2711 = add i256 32, %2704, !pc !97, !intsan !8
  %2712 = getelementptr i8, i8* %MEMORY, i256 0
  %2713 = trunc i256 %2711 to i32
  %2714 = alloca i256
  %2715 = bitcast i256* %2714 to i8*
  call void @__device_sha3(i8* %2712, i32 %2713, i8* %2715)
  %2716 = load i256, i256* %2714
  %2717 = load i160, i160 addrspace(4)* @CALLER
  %2718 = zext i160 %2717 to i256
  %2719 = and i256 1461501637330902918203684832716283019655932542975, %2718
  %2720 = and i256 1461501637330902918203684832716283019655932542975, %2719
  %2721 = trunc i256 0 to i64
  %2722 = alloca i256
  store i256 %2720, i256* %2722
  %2723 = bitcast i256* %2722 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2721, i8* %2723, i64 32)
  %2724 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2724, i8 0, i32 2041)
  %2725 = add i256 32, 0, !pc !98, !intsan !8
  %2726 = trunc i256 %2725 to i64
  %2727 = alloca i256
  store i256 %2716, i256* %2727
  %2728 = bitcast i256* %2727 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2726, i8* %2728, i64 32)
  %2729 = add i256 32, %2725
  %"SUM < LHS180" = icmp ult i256 %2729, 32
  %2730 = select i1 %"SUM < LHS180", i8 4, i8 0
  %2731 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2731, i8 %2730, i32 2047)
  %2732 = add i256 32, %2725, !pc !99, !intsan !8
  %2733 = getelementptr i8, i8* %MEMORY, i256 0
  %2734 = trunc i256 %2732 to i32
  %2735 = alloca i256
  %2736 = bitcast i256* %2735 to i8*
  call void @__device_sha3(i8* %2733, i32 %2734, i8* %2736)
  %2737 = load i256, i256* %2735
  %2738 = alloca i256
  store i256 %2737, i256* %2738
  %2739 = alloca i256
  %2740 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %2740, i256* %2738, i256* %2739)
  %2741 = load i256, i256* %2739
  %"LHS < RHS181" = icmp ult i256 %2741, %2685
  %2742 = select i1 %"LHS < RHS181", i8 4, i8 0
  %2743 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2743, i8 %2742, i32 2056)
  %2744 = sub i256 %2741, %2685, !pc !100, !intsan !10
  %2745 = alloca i256
  store i256 %2737, i256* %2745
  %2746 = alloca i256
  store i256 %2744, i256* %2746
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %2745, i256* %2746)
  %2747 = trunc i256 2567 to i64
  store i64 %2747, i64* %JMP_TARGET_PTR
  %2748 = load i64, i64* %STACK_DEP_PTR
  %2749 = add i64 %2748, 1
  store i64 %2749, i64* %STACK_DEP_PTR
  %2750 = load i64, i64* %STACK_DEP_PTR
  %2751 = getelementptr i256, i256* %STACK, i64 %2750
  store i256 %2695, i256* %2751
  %2752 = load i64, i64* %STACK_DEP_PTR
  %2753 = add i64 %2752, 1
  store i64 %2753, i64* %STACK_DEP_PTR
  %2754 = load i64, i64* %STACK_DEP_PTR
  %2755 = getelementptr i256, i256* %STACK, i64 %2754
  store i256 %2690, i256* %2755
  %2756 = load i64, i64* %STACK_DEP_PTR
  %2757 = add i64 %2756, 1
  store i64 %2757, i64* %STACK_DEP_PTR
  %2758 = load i64, i64* %STACK_DEP_PTR
  %2759 = getelementptr i256, i256* %STACK, i64 %2758
  store i256 %2685, i256* %2759
  %2760 = load i64, i64* %STACK_DEP_PTR
  %2761 = add i64 %2760, 1
  store i64 %2761, i64* %STACK_DEP_PTR
  %2762 = load i64, i64* %STACK_DEP_PTR
  %2763 = getelementptr i256, i256* %STACK, i64 %2762
  store i256 %2680, i256* %2763
  %2764 = load i64, i64* %STACK_DEP_PTR
  %2765 = add i64 %2764, 1
  store i64 %2765, i64* %STACK_DEP_PTR
  %2766 = load i64, i64* %STACK_DEP_PTR
  %2767 = getelementptr i256, i256* %STACK, i64 %2766
  store i256 2074, i256* %2767
  %2768 = load i64, i64* %STACK_DEP_PTR
  %2769 = add i64 %2768, 1
  store i64 %2769, i64* %STACK_DEP_PTR
  %2770 = load i64, i64* %STACK_DEP_PTR
  %2771 = getelementptr i256, i256* %STACK, i64 %2770
  store i256 %2695, i256* %2771
  %2772 = load i64, i64* %STACK_DEP_PTR
  %2773 = add i64 %2772, 1
  store i64 %2773, i64* %STACK_DEP_PTR
  %2774 = load i64, i64* %STACK_DEP_PTR
  %2775 = getelementptr i256, i256* %STACK, i64 %2774
  store i256 %2690, i256* %2775
  %2776 = load i64, i64* %STACK_DEP_PTR
  %2777 = add i64 %2776, 1
  store i64 %2777, i64* %STACK_DEP_PTR
  %2778 = load i64, i64* %STACK_DEP_PTR
  %2779 = getelementptr i256, i256* %STACK, i64 %2778
  store i256 %2685, i256* %2779
  br label %JumpTable, !EVMBB !4

.2074:                                            ; preds = %JumpTableCase87
  %2780 = load i64, i64* %remaing_gas
  %2781 = icmp ugt i64 320, %2780
  br i1 %2781, label %Abort, label %2782

2782:                                             ; preds = %.2074
  %2783 = load i32, i32* %__afl_state, !nosanitize !3
  %2784 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2785 = xor i32 %2784, 158
  %2786 = xor i32 %2783, %2785
  %2787 = and i32 %2786, 4095
  %2788 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2787
  %2789 = load i8, i8 addrspace(1)* %2788, !nosanitize !3
  %2790 = add i8 %2789, 1
  store i8 %2790, i8 addrspace(1)* %2788, !nosanitize !3
  store i32 79, i32* %__afl_prev_loc, !nosanitize !3
  %2791 = sub i64 %2780, 320
  store i64 %2791, i64* %remaing_gas
  %2792 = load i64, i64* %STACK_DEP_PTR
  %2793 = getelementptr i256, i256* %STACK, i64 %2792
  %2794 = load i256, i256* %2793
  %2795 = load i64, i64* %STACK_DEP_PTR
  %2796 = sub i64 %2795, 1
  store i64 %2796, i64* %STACK_DEP_PTR
  %2797 = load i64, i64* %STACK_DEP_PTR
  %2798 = getelementptr i256, i256* %STACK, i64 %2797
  %2799 = load i256, i256* %2798
  %2800 = load i64, i64* %STACK_DEP_PTR
  %2801 = sub i64 %2800, 1
  store i64 %2801, i64* %STACK_DEP_PTR
  %2802 = load i64, i64* %STACK_DEP_PTR
  %2803 = getelementptr i256, i256* %STACK, i64 %2802
  %2804 = load i256, i256* %2803
  %2805 = load i64, i64* %STACK_DEP_PTR
  %2806 = sub i64 %2805, 1
  store i64 %2806, i64* %STACK_DEP_PTR
  %2807 = load i64, i64* %STACK_DEP_PTR
  %2808 = getelementptr i256, i256* %STACK, i64 %2807
  %2809 = load i256, i256* %2808
  %2810 = load i64, i64* %STACK_DEP_PTR
  %2811 = sub i64 %2810, 1
  store i64 %2811, i64* %STACK_DEP_PTR
  %2812 = load i64, i64* %STACK_DEP_PTR
  %2813 = getelementptr i256, i256* %STACK, i64 %2812
  %2814 = load i256, i256* %2813
  %2815 = load i64, i64* %STACK_DEP_PTR
  %2816 = sub i64 %2815, 1
  store i64 %2816, i64* %STACK_DEP_PTR
  %2817 = trunc i256 %2814 to i64
  store i64 %2817, i64* %JMP_TARGET_PTR
  %2818 = load i64, i64* %STACK_DEP_PTR
  %2819 = add i64 %2818, 1
  store i64 %2819, i64* %STACK_DEP_PTR
  %2820 = load i64, i64* %STACK_DEP_PTR
  %2821 = getelementptr i256, i256* %STACK, i64 %2820
  store i256 1, i256* %2821
  br label %JumpTable, !EVMBB !4

.2085:                                            ; preds = %JumpTableCase59
  %2822 = load i64, i64* %remaing_gas
  %2823 = icmp ugt i64 176, %2822
  br i1 %2823, label %Abort, label %2824

2824:                                             ; preds = %.2085
  %2825 = load i32, i32* %__afl_state, !nosanitize !3
  %2826 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2827 = xor i32 %2826, 2524
  %2828 = xor i32 %2825, %2827
  %2829 = and i32 %2828, 4095
  %2830 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2829
  %2831 = load i8, i8 addrspace(1)* %2830, !nosanitize !3
  %2832 = add i8 %2831, 1
  store i8 %2832, i8 addrspace(1)* %2830, !nosanitize !3
  store i32 1262, i32* %__afl_prev_loc, !nosanitize !3
  %2833 = sub i64 %2822, 176
  store i64 %2833, i64* %remaing_gas
  %2834 = load i64, i64* %STACK_DEP_PTR
  %2835 = getelementptr i256, i256* %STACK, i64 %2834
  %2836 = load i256, i256* %2835
  %2837 = load i64, i64* %STACK_DEP_PTR
  %2838 = sub i64 %2837, 1
  store i64 %2838, i64* %STACK_DEP_PTR
  %2839 = trunc i256 %2836 to i64
  store i64 %2839, i64* %JMP_TARGET_PTR
  %2840 = load i64, i64* %STACK_DEP_PTR
  %2841 = add i64 %2840, 1
  store i64 %2841, i64* %STACK_DEP_PTR
  %2842 = load i64, i64* %STACK_DEP_PTR
  %2843 = getelementptr i256, i256* %STACK, i64 %2842
  store i256 %2836, i256* %2843
  %2844 = load i64, i64* %STACK_DEP_PTR
  %2845 = add i64 %2844, 1
  store i64 %2845, i64* %STACK_DEP_PTR
  %2846 = load i64, i64* %STACK_DEP_PTR
  %2847 = getelementptr i256, i256* %STACK, i64 %2846
  store i256 2, i256* %2847
  br label %JumpTable, !EVMBB !4

.2090:                                            ; preds = %JumpTableCase64
  %2848 = load i64, i64* %remaing_gas
  %2849 = icmp ugt i64 176, %2848
  br i1 %2849, label %Abort, label %2850

2850:                                             ; preds = %.2090
  %2851 = load i32, i32* %__afl_state, !nosanitize !3
  %2852 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2853 = xor i32 %2852, 3028
  %2854 = xor i32 %2851, %2853
  %2855 = and i32 %2854, 4095
  %2856 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2855
  %2857 = load i8, i8 addrspace(1)* %2856, !nosanitize !3
  %2858 = add i8 %2857, 1
  store i8 %2858, i8 addrspace(1)* %2856, !nosanitize !3
  store i32 1514, i32* %__afl_prev_loc, !nosanitize !3
  %2859 = sub i64 %2848, 176
  store i64 %2859, i64* %remaing_gas
  %2860 = load i64, i64* %STACK_DEP_PTR
  %2861 = getelementptr i256, i256* %STACK, i64 %2860
  %2862 = load i256, i256* %2861
  %2863 = load i64, i64* %STACK_DEP_PTR
  %2864 = sub i64 %2863, 1
  store i64 %2864, i64* %STACK_DEP_PTR
  %2865 = trunc i256 %2862 to i64
  store i64 %2865, i64* %JMP_TARGET_PTR
  %2866 = load i64, i64* %STACK_DEP_PTR
  %2867 = add i64 %2866, 1
  store i64 %2867, i64* %STACK_DEP_PTR
  %2868 = load i64, i64* %STACK_DEP_PTR
  %2869 = getelementptr i256, i256* %STACK, i64 %2868
  store i256 %2862, i256* %2869
  %2870 = load i64, i64* %STACK_DEP_PTR
  %2871 = add i64 %2870, 1
  store i64 %2871, i64* %STACK_DEP_PTR
  %2872 = load i64, i64* %STACK_DEP_PTR
  %2873 = getelementptr i256, i256* %STACK, i64 %2872
  store i256 4, i256* %2873
  br label %JumpTable, !EVMBB !4

.2095:                                            ; preds = %JumpTableCase69
  %2874 = load i64, i64* %remaing_gas
  %2875 = icmp ugt i64 176, %2874
  br i1 %2875, label %Abort, label %2876

2876:                                             ; preds = %.2095
  %2877 = load i32, i32* %__afl_state, !nosanitize !3
  %2878 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2879 = xor i32 %2878, 498
  %2880 = xor i32 %2877, %2879
  %2881 = and i32 %2880, 4095
  %2882 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2881
  %2883 = load i8, i8 addrspace(1)* %2882, !nosanitize !3
  %2884 = add i8 %2883, 1
  store i8 %2884, i8 addrspace(1)* %2882, !nosanitize !3
  store i32 249, i32* %__afl_prev_loc, !nosanitize !3
  %2885 = sub i64 %2874, 176
  store i64 %2885, i64* %remaing_gas
  %2886 = load i64, i64* %STACK_DEP_PTR
  %2887 = getelementptr i256, i256* %STACK, i64 %2886
  %2888 = load i256, i256* %2887
  %2889 = load i64, i64* %STACK_DEP_PTR
  %2890 = sub i64 %2889, 1
  store i64 %2890, i64* %STACK_DEP_PTR
  %2891 = trunc i256 %2888 to i64
  store i64 %2891, i64* %JMP_TARGET_PTR
  %2892 = load i64, i64* %STACK_DEP_PTR
  %2893 = add i64 %2892, 1
  store i64 %2893, i64* %STACK_DEP_PTR
  %2894 = load i64, i64* %STACK_DEP_PTR
  %2895 = getelementptr i256, i256* %STACK, i64 %2894
  store i256 %2888, i256* %2895
  %2896 = load i64, i64* %STACK_DEP_PTR
  %2897 = add i64 %2896, 1
  store i64 %2897, i64* %STACK_DEP_PTR
  %2898 = load i64, i64* %STACK_DEP_PTR
  %2899 = getelementptr i256, i256* %STACK, i64 %2898
  store i256 420000000000000, i256* %2899
  br label %JumpTable, !EVMBB !4

.2106:                                            ; preds = %JumpTableCase74
  %2900 = load i64, i64* %remaing_gas
  %2901 = icmp ugt i64 440, %2900
  br i1 %2901, label %Abort, label %2902

2902:                                             ; preds = %.2106
  %2903 = load i32, i32* %__afl_state, !nosanitize !3
  %2904 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2905 = xor i32 %2904, 272
  %2906 = xor i32 %2903, %2905
  %2907 = and i32 %2906, 4095
  %2908 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2907
  %2909 = load i8, i8 addrspace(1)* %2908, !nosanitize !3
  %2910 = add i8 %2909, 1
  store i8 %2910, i8 addrspace(1)* %2908, !nosanitize !3
  store i32 136, i32* %__afl_prev_loc, !nosanitize !3
  %2911 = sub i64 %2900, 440
  store i64 %2911, i64* %remaing_gas
  %2912 = load i64, i64* %STACK_DEP_PTR
  %2913 = getelementptr i256, i256* %STACK, i64 %2912
  %2914 = load i256, i256* %2913
  %2915 = load i64, i64* %STACK_DEP_PTR
  %2916 = sub i64 %2915, 1
  store i64 %2916, i64* %STACK_DEP_PTR
  %2917 = load i160, i160 addrspace(4)* @CALLER
  %2918 = zext i160 %2917 to i256
  %2919 = and i256 1461501637330902918203684832716283019655932542975, %2918
  %2920 = and i256 1461501637330902918203684832716283019655932542975, %2919
  %2921 = trunc i256 0 to i64
  %2922 = alloca i256
  store i256 %2920, i256* %2922
  %2923 = bitcast i256* %2922 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2921, i8* %2923, i64 32)
  %2924 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2924, i8 0, i32 2163)
  %2925 = add i256 32, 0, !pc !101, !intsan !8
  %2926 = trunc i256 %2925 to i64
  %2927 = alloca i256
  store i256 1, i256* %2927
  %2928 = bitcast i256* %2927 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %2926, i8* %2928, i64 32)
  %2929 = add i256 32, %2925
  %"SUM < LHS182" = icmp ult i256 %2929, 32
  %2930 = select i1 %"SUM < LHS182", i8 4, i8 0
  %2931 = call i32 @get_thread_id()
  call void @addBugSet(i32 %2931, i8 %2930, i32 2169)
  %2932 = add i256 32, %2925, !pc !102, !intsan !8
  %2933 = getelementptr i8, i8* %MEMORY, i256 0
  %2934 = trunc i256 %2932 to i32
  %2935 = alloca i256
  %2936 = bitcast i256* %2935 to i8*
  call void @__device_sha3(i8* %2933, i32 %2934, i8* %2936)
  %2937 = load i256, i256* %2935
  %2938 = alloca i256
  store i256 %2937, i256* %2938
  %2939 = alloca i256
  %2940 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %2940, i256* %2938, i256* %2939)
  %2941 = bitcast i256* %2938 to i32*
  %2942 = call i32 @__hashword(i32* %2941)
  %2943 = bitcast i256* %2939 to i32*
  %2944 = call i32 @__hashword(i32* %2943)
  %2945 = xor i32 %2942, %2944
  store i32 %2945, i32* %__afl_state, !nosanitize !3
  %2946 = load i256, i256* %2939
  %2947 = icmp ult i256 %2946, %2914
  %2948 = icmp eq i1 %2947, false
  %2949 = icmp eq i1 %2948, false
  %2950 = icmp eq i1 %2949, false
  %2951 = trunc i256 2186 to i64
  %jump.check27 = icmp ne i1 %2950, false
  store i64 %2951, i64* %JMP_TARGET_PTR
  %2952 = load i64, i64* %STACK_DEP_PTR
  %2953 = add i64 %2952, 1
  store i64 %2953, i64* %STACK_DEP_PTR
  %2954 = load i64, i64* %STACK_DEP_PTR
  %2955 = getelementptr i256, i256* %STACK, i64 %2954
  store i256 %2914, i256* %2955
  %2956 = load i64, i64* %STACK_DEP_PTR
  %2957 = add i64 %2956, 1
  store i64 %2957, i64* %STACK_DEP_PTR
  %2958 = load i64, i64* %STACK_DEP_PTR
  %2959 = getelementptr i256, i256* %STACK, i64 %2958
  store i256 0, i256* %2959
  br i1 %jump.check27, label %JumpTable, label %.2182, !EVMBB !4

.2182:                                            ; preds = %2902
  %2960 = load i64, i64* %remaing_gas
  %2961 = icmp ugt i64 40, %2960
  br i1 %2961, label %Abort, label %2962

2962:                                             ; preds = %.2182
  %2963 = load i32, i32* %__afl_state, !nosanitize !3
  %2964 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2965 = xor i32 %2964, 59
  %2966 = xor i32 %2963, %2965
  %2967 = and i32 %2966, 4095
  %2968 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2967
  %2969 = load i8, i8 addrspace(1)* %2968, !nosanitize !3
  %2970 = add i8 %2969, 1
  store i8 %2970, i8 addrspace(1)* %2968, !nosanitize !3
  store i32 29, i32* %__afl_prev_loc, !nosanitize !3
  %2971 = sub i64 %2960, 40
  store i64 %2971, i64* %remaing_gas
  %2972 = load i64, i64* %STACK_DEP_PTR
  %2973 = sub i64 %2972, 0
  store i64 %2973, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.2186:                                            ; preds = %JumpTableCase80
  %2974 = load i64, i64* %remaing_gas
  %2975 = icmp ugt i64 984, %2974
  br i1 %2975, label %Abort, label %2976

2976:                                             ; preds = %.2186
  %2977 = load i32, i32* %__afl_state, !nosanitize !3
  %2978 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %2979 = xor i32 %2978, 1997
  %2980 = xor i32 %2977, %2979
  %2981 = and i32 %2980, 4095
  %2982 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %2981
  %2983 = load i8, i8 addrspace(1)* %2982, !nosanitize !3
  %2984 = add i8 %2983, 1
  store i8 %2984, i8 addrspace(1)* %2982, !nosanitize !3
  store i32 998, i32* %__afl_prev_loc, !nosanitize !3
  %2985 = sub i64 %2974, 984
  store i64 %2985, i64* %remaing_gas
  %2986 = load i64, i64* %STACK_DEP_PTR
  %2987 = getelementptr i256, i256* %STACK, i64 %2986
  %2988 = load i256, i256* %2987
  %2989 = load i64, i64* %STACK_DEP_PTR
  %2990 = sub i64 %2989, 1
  store i64 %2990, i64* %STACK_DEP_PTR
  %2991 = load i64, i64* %STACK_DEP_PTR
  %2992 = getelementptr i256, i256* %STACK, i64 %2991
  %2993 = load i256, i256* %2992
  %2994 = load i64, i64* %STACK_DEP_PTR
  %2995 = sub i64 %2994, 1
  store i64 %2995, i64* %STACK_DEP_PTR
  %2996 = load i64, i64* %STACK_DEP_PTR
  %2997 = getelementptr i256, i256* %STACK, i64 %2996
  %2998 = load i256, i256* %2997
  %2999 = load i64, i64* %STACK_DEP_PTR
  %3000 = sub i64 %2999, 1
  store i64 %3000, i64* %STACK_DEP_PTR
  %3001 = load i160, i160 addrspace(4)* @CALLER
  %3002 = zext i160 %3001 to i256
  %3003 = and i256 1461501637330902918203684832716283019655932542975, %3002
  %3004 = and i256 1461501637330902918203684832716283019655932542975, %3003
  %3005 = trunc i256 0 to i64
  %3006 = alloca i256
  store i256 %3004, i256* %3006
  %3007 = bitcast i256* %3006 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3005, i8* %3007, i64 32)
  %3008 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3008, i8 0, i32 2241)
  %3009 = add i256 32, 0, !pc !103, !intsan !8
  %3010 = trunc i256 %3009 to i64
  %3011 = alloca i256
  store i256 1, i256* %3011
  %3012 = bitcast i256* %3011 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3010, i8* %3012, i64 32)
  %3013 = add i256 32, %3009
  %"SUM < LHS183" = icmp ult i256 %3013, 32
  %3014 = select i1 %"SUM < LHS183", i8 4, i8 0
  %3015 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3015, i8 %3014, i32 2247)
  %3016 = add i256 32, %3009, !pc !104, !intsan !8
  %3017 = getelementptr i8, i8* %MEMORY, i256 0
  %3018 = trunc i256 %3016 to i32
  %3019 = alloca i256
  %3020 = bitcast i256* %3019 to i8*
  call void @__device_sha3(i8* %3017, i32 %3018, i8* %3020)
  %3021 = load i256, i256* %3019
  %3022 = alloca i256
  store i256 %3021, i256* %3022
  %3023 = alloca i256
  %3024 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3024, i256* %3022, i256* %3023)
  %3025 = bitcast i256* %3022 to i32*
  %3026 = call i32 @__hashword(i32* %3025)
  %3027 = bitcast i256* %3023 to i32*
  %3028 = call i32 @__hashword(i32* %3027)
  %3029 = xor i32 %3026, %3028
  store i32 %3029, i32* %__afl_state, !nosanitize !3
  %3030 = load i256, i256* %3023
  %"LHS < RHS184" = icmp ult i256 %3030, %2993
  %3031 = select i1 %"LHS < RHS184", i8 4, i8 0
  %3032 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3032, i8 %3031, i32 2256)
  %3033 = sub i256 %3030, %2993, !pc !105, !intsan !10
  %3034 = alloca i256
  store i256 %3021, i256* %3034
  %3035 = alloca i256
  store i256 %3033, i256* %3035
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %3034, i256* %3035)
  %3036 = and i256 1461501637330902918203684832716283019655932542975, 0
  %3037 = trunc i256 0 to i64
  %3038 = alloca i256
  store i256 %3036, i256* %3038
  %3039 = bitcast i256* %3038 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3037, i8* %3039, i64 32)
  %3040 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3040, i8 0, i32 2296)
  %3041 = add i256 32, 0, !pc !106, !intsan !8
  %3042 = trunc i256 %3041 to i64
  %3043 = alloca i256
  store i256 1, i256* %3043
  %3044 = bitcast i256* %3043 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3042, i8* %3044, i64 32)
  %3045 = add i256 32, %3041
  %"SUM < LHS185" = icmp ult i256 %3045, 32
  %3046 = select i1 %"SUM < LHS185", i8 4, i8 0
  %3047 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3047, i8 %3046, i32 2302)
  %3048 = add i256 32, %3041, !pc !107, !intsan !8
  %3049 = getelementptr i8, i8* %MEMORY, i256 0
  %3050 = trunc i256 %3048 to i32
  %3051 = alloca i256
  %3052 = bitcast i256* %3051 to i8*
  call void @__device_sha3(i8* %3049, i32 %3050, i8* %3052)
  %3053 = load i256, i256* %3051
  %3054 = alloca i256
  store i256 %3053, i256* %3054
  %3055 = alloca i256
  %3056 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3056, i256* %3054, i256* %3055)
  %3057 = load i256, i256* %3055
  %3058 = add i256 %3057, %2993
  %"SUM < LHS186" = icmp ult i256 %3058, %3057
  %3059 = select i1 %"SUM < LHS186", i8 4, i8 0
  %3060 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3060, i8 %3059, i32 2311)
  %3061 = add i256 %3057, %2993, !pc !108, !intsan !8
  %3062 = alloca i256
  store i256 %3053, i256* %3062
  %3063 = alloca i256
  store i256 %3061, i256* %3063
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %3062, i256* %3063)
  %3064 = alloca i256
  store i256 0, i256* %3064
  %3065 = alloca i256
  %3066 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3066, i256* %3064, i256* %3065)
  %3067 = load i256, i256* %3065
  %"LHS < RHS187" = icmp ult i256 %3067, %2993
  %3068 = select i1 %"LHS < RHS187", i8 4, i8 0
  %3069 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3069, i8 %3068, i32 2326)
  %3070 = sub i256 %3067, %2993, !pc !109, !intsan !10
  %3071 = alloca i256
  store i256 0, i256* %3071
  %3072 = alloca i256
  store i256 %3070, i256* %3072
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %3071, i256* %3072)
  %3073 = load i160, i160 addrspace(4)* @CALLER
  %3074 = zext i160 %3073 to i256
  %3075 = and i256 1461501637330902918203684832716283019655932542975, %3074
  %3076 = trunc i256 64 to i64
  %3077 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %3076, i256* %3077)
  %3078 = load i256, i256* %3077
  %3079 = trunc i256 %3078 to i64
  %3080 = alloca i256
  store i256 %2993, i256* %3080
  %3081 = bitcast i256* %3080 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3079, i8* %3081, i64 32)
  %3082 = add i256 32, %3078
  %"SUM < LHS188" = icmp ult i256 %3082, 32
  %3083 = select i1 %"SUM < LHS188", i8 4, i8 0
  %3084 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3084, i8 %3083, i32 2400)
  %3085 = add i256 32, %3078, !pc !110, !intsan !8
  %3086 = trunc i256 64 to i64
  %3087 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %3086, i256* %3087)
  %3088 = load i256, i256* %3087
  %"LHS < RHS189" = icmp ult i256 %3085, %3088
  %3089 = select i1 %"LHS < RHS189", i8 4, i8 0
  %3090 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3090, i8 %3089, i32 2409)
  %3091 = sub i256 %3085, %3088, !pc !111, !intsan !10
  %3092 = trunc i256 %2998 to i64
  store i64 %3092, i64* %JMP_TARGET_PTR
  %3093 = load i64, i64* %STACK_DEP_PTR
  %3094 = add i64 %3093, 1
  store i64 %3094, i64* %STACK_DEP_PTR
  %3095 = load i64, i64* %STACK_DEP_PTR
  %3096 = getelementptr i256, i256* %STACK, i64 %3095
  store i256 1, i256* %3096
  br label %JumpTable, !EVMBB !4

.2420:                                            ; preds = %JumpTableCase79
  %3097 = load i64, i64* %remaing_gas
  %3098 = icmp ugt i64 400, %3097
  br i1 %3098, label %Abort, label %3099

3099:                                             ; preds = %.2420
  %3100 = load i32, i32* %__afl_state, !nosanitize !3
  %3101 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3102 = xor i32 %3101, 1360
  %3103 = xor i32 %3100, %3102
  %3104 = and i32 %3103, 4095
  %3105 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3104
  %3106 = load i8, i8 addrspace(1)* %3105, !nosanitize !3
  %3107 = add i8 %3106, 1
  store i8 %3107, i8 addrspace(1)* %3105, !nosanitize !3
  store i32 680, i32* %__afl_prev_loc, !nosanitize !3
  %3108 = sub i64 %3097, 400
  store i64 %3108, i64* %remaing_gas
  %3109 = load i64, i64* %STACK_DEP_PTR
  %3110 = getelementptr i256, i256* %STACK, i64 %3109
  %3111 = load i256, i256* %3110
  %3112 = load i64, i64* %STACK_DEP_PTR
  %3113 = sub i64 %3112, 1
  store i64 %3113, i64* %STACK_DEP_PTR
  %3114 = load i64, i64* %STACK_DEP_PTR
  %3115 = getelementptr i256, i256* %STACK, i64 %3114
  %3116 = load i256, i256* %3115
  %3117 = load i64, i64* %STACK_DEP_PTR
  %3118 = sub i64 %3117, 1
  store i64 %3118, i64* %STACK_DEP_PTR
  %3119 = trunc i256 32 to i64
  %3120 = alloca i256
  store i256 1, i256* %3120
  %3121 = bitcast i256* %3120 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3119, i8* %3121, i64 32)
  %3122 = trunc i256 0 to i64
  %3123 = alloca i256
  store i256 %3111, i256* %3123
  %3124 = bitcast i256* %3123 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3122, i8* %3124, i64 32)
  %3125 = getelementptr i8, i8* %MEMORY, i256 0
  %3126 = trunc i256 64 to i32
  %3127 = alloca i256
  %3128 = bitcast i256* %3127 to i8*
  call void @__device_sha3(i8* %3125, i32 %3126, i8* %3128)
  %3129 = load i256, i256* %3127
  %3130 = alloca i256
  store i256 %3129, i256* %3130
  %3131 = alloca i256
  %3132 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3132, i256* %3130, i256* %3131)
  %3133 = load i256, i256* %3131
  %3134 = trunc i256 %3116 to i64
  store i64 %3134, i64* %JMP_TARGET_PTR
  %3135 = load i64, i64* %STACK_DEP_PTR
  %3136 = add i64 %3135, 1
  store i64 %3136, i64* %STACK_DEP_PTR
  %3137 = load i64, i64* %STACK_DEP_PTR
  %3138 = getelementptr i256, i256* %STACK, i64 %3137
  store i256 %3116, i256* %3138
  %3139 = load i64, i64* %STACK_DEP_PTR
  %3140 = add i64 %3139, 1
  store i64 %3140, i64* %STACK_DEP_PTR
  %3141 = load i64, i64* %STACK_DEP_PTR
  %3142 = getelementptr i256, i256* %STACK, i64 %3141
  store i256 %3133, i256* %3142
  br label %JumpTable, !EVMBB !4

.2444:                                            ; preds = %JumpTableCase84
  %3143 = load i64, i64* %remaing_gas
  %3144 = icmp ugt i64 224, %3143
  br i1 %3144, label %Abort, label %3145

3145:                                             ; preds = %.2444
  %3146 = load i32, i32* %__afl_state, !nosanitize !3
  %3147 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3148 = xor i32 %3147, 1095
  %3149 = xor i32 %3146, %3148
  %3150 = and i32 %3149, 4095
  %3151 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3150
  %3152 = load i8, i8 addrspace(1)* %3151, !nosanitize !3
  %3153 = add i8 %3152, 1
  store i8 %3153, i8 addrspace(1)* %3151, !nosanitize !3
  store i32 547, i32* %__afl_prev_loc, !nosanitize !3
  %3154 = sub i64 %3143, 224
  store i64 %3154, i64* %remaing_gas
  %3155 = load i64, i64* %STACK_DEP_PTR
  %3156 = getelementptr i256, i256* %STACK, i64 %3155
  %3157 = load i256, i256* %3156
  %3158 = load i64, i64* %STACK_DEP_PTR
  %3159 = sub i64 %3158, 1
  store i64 %3159, i64* %STACK_DEP_PTR
  %3160 = alloca i256
  store i256 0, i256* %3160
  %3161 = alloca i256
  %3162 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3162, i256* %3160, i256* %3161)
  %3163 = bitcast i256* %3160 to i32*
  %3164 = call i32 @__hashword(i32* %3163)
  %3165 = bitcast i256* %3161 to i32*
  %3166 = call i32 @__hashword(i32* %3165)
  %3167 = xor i32 %3164, %3166
  store i32 %3167, i32* %__afl_state, !nosanitize !3
  %3168 = load i256, i256* %3161
  %3169 = trunc i256 %3157 to i64
  store i64 %3169, i64* %JMP_TARGET_PTR
  %3170 = load i64, i64* %STACK_DEP_PTR
  %3171 = add i64 %3170, 1
  store i64 %3171, i64* %STACK_DEP_PTR
  %3172 = load i64, i64* %STACK_DEP_PTR
  %3173 = getelementptr i256, i256* %STACK, i64 %3172
  store i256 %3157, i256* %3173
  %3174 = load i64, i64* %STACK_DEP_PTR
  %3175 = add i64 %3174, 1
  store i64 %3175, i64* %STACK_DEP_PTR
  %3176 = load i64, i64* %STACK_DEP_PTR
  %3177 = getelementptr i256, i256* %STACK, i64 %3176
  store i256 %3168, i256* %3177
  br label %JumpTable, !EVMBB !4

.2450:                                            ; preds = %JumpTableCase90
  %3178 = load i64, i64* %remaing_gas
  %3179 = icmp ugt i64 344, %3178
  br i1 %3179, label %Abort, label %3180

3180:                                             ; preds = %.2450
  %3181 = load i32, i32* %__afl_state, !nosanitize !3
  %3182 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3183 = xor i32 %3182, 348
  %3184 = xor i32 %3181, %3183
  %3185 = and i32 %3184, 4095
  %3186 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3185
  %3187 = load i8, i8 addrspace(1)* %3186, !nosanitize !3
  %3188 = add i8 %3187, 1
  store i8 %3188, i8 addrspace(1)* %3186, !nosanitize !3
  store i32 174, i32* %__afl_prev_loc, !nosanitize !3
  %3189 = sub i64 %3178, 344
  store i64 %3189, i64* %remaing_gas
  %3190 = load i64, i64* %STACK_DEP_PTR
  %3191 = getelementptr i256, i256* %STACK, i64 %3190
  %3192 = load i256, i256* %3191
  %3193 = load i64, i64* %STACK_DEP_PTR
  %3194 = sub i64 %3193, 1
  store i64 %3194, i64* %STACK_DEP_PTR
  %3195 = trunc i256 64 to i64
  %3196 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %3195, i256* %3196)
  %3197 = load i256, i256* %3196
  %3198 = add i256 %3197, 64
  %"SUM < LHS190" = icmp ult i256 %3198, %3197
  %3199 = select i1 %"SUM < LHS190", i8 4, i8 0
  %3200 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3200, i8 %3199, i32 2457)
  %3201 = add i256 %3197, 64, !pc !112, !intsan !8
  %3202 = trunc i256 64 to i64
  %3203 = alloca i256
  store i256 %3201, i256* %3203
  %3204 = bitcast i256* %3203 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3202, i8* %3204, i64 32)
  %3205 = trunc i256 %3197 to i64
  %3206 = alloca i256
  store i256 3, i256* %3206
  %3207 = bitcast i256* %3206 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3205, i8* %3207, i64 32)
  %3208 = add i256 32, %3197
  %"SUM < LHS191" = icmp ult i256 %3208, 32
  %3209 = select i1 %"SUM < LHS191", i8 4, i8 0
  %3210 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3210, i8 %3209, i32 2468)
  %3211 = add i256 32, %3197, !pc !113, !intsan !8
  %3212 = trunc i256 %3211 to i64
  %3213 = alloca i256
  store i256 32722497663686299913911577581425072581932125798873487201857563387159208001536, i256* %3213
  %3214 = bitcast i256* %3213 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3212, i8* %3214, i64 32)
  %3215 = trunc i256 %3192 to i64
  store i64 %3215, i64* %JMP_TARGET_PTR
  %3216 = load i64, i64* %STACK_DEP_PTR
  %3217 = add i64 %3216, 1
  store i64 %3217, i64* %STACK_DEP_PTR
  %3218 = load i64, i64* %STACK_DEP_PTR
  %3219 = getelementptr i256, i256* %STACK, i64 %3218
  store i256 %3192, i256* %3219
  %3220 = load i64, i64* %STACK_DEP_PTR
  %3221 = add i64 %3220, 1
  store i64 %3221, i64* %STACK_DEP_PTR
  %3222 = load i64, i64* %STACK_DEP_PTR
  %3223 = getelementptr i256, i256* %STACK, i64 %3222
  store i256 %3197, i256* %3223
  br label %JumpTable, !EVMBB !4

.2507:                                            ; preds = %JumpTableCase94
  %3224 = load i64, i64* %remaing_gas
  %3225 = icmp ugt i64 480, %3224
  br i1 %3225, label %Abort, label %3226

3226:                                             ; preds = %.2507
  %3227 = load i32, i32* %__afl_state, !nosanitize !3
  %3228 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3229 = xor i32 %3228, 367
  %3230 = xor i32 %3227, %3229
  %3231 = and i32 %3230, 4095
  %3232 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3231
  %3233 = load i8, i8 addrspace(1)* %3232, !nosanitize !3
  %3234 = add i8 %3233, 1
  store i8 %3234, i8 addrspace(1)* %3232, !nosanitize !3
  store i32 183, i32* %__afl_prev_loc, !nosanitize !3
  %3235 = sub i64 %3224, 480
  store i64 %3235, i64* %remaing_gas
  %3236 = load i64, i64* %STACK_DEP_PTR
  %3237 = getelementptr i256, i256* %STACK, i64 %3236
  %3238 = load i256, i256* %3237
  %3239 = load i64, i64* %STACK_DEP_PTR
  %3240 = sub i64 %3239, 1
  store i64 %3240, i64* %STACK_DEP_PTR
  %3241 = load i64, i64* %STACK_DEP_PTR
  %3242 = getelementptr i256, i256* %STACK, i64 %3241
  %3243 = load i256, i256* %3242
  %3244 = load i64, i64* %STACK_DEP_PTR
  %3245 = sub i64 %3244, 1
  store i64 %3245, i64* %STACK_DEP_PTR
  %3246 = load i160, i160 addrspace(4)* @CALLER
  %3247 = trunc i256 2567 to i64
  store i64 %3247, i64* %JMP_TARGET_PTR
  %3248 = load i64, i64* %STACK_DEP_PTR
  %3249 = add i64 %3248, 1
  store i64 %3249, i64* %STACK_DEP_PTR
  %3250 = load i64, i64* %STACK_DEP_PTR
  %3251 = getelementptr i256, i256* %STACK, i64 %3250
  store i256 %3243, i256* %3251
  %3252 = load i64, i64* %STACK_DEP_PTR
  %3253 = add i64 %3252, 1
  store i64 %3253, i64* %STACK_DEP_PTR
  %3254 = load i64, i64* %STACK_DEP_PTR
  %3255 = getelementptr i256, i256* %STACK, i64 %3254
  store i256 %3238, i256* %3255
  %3256 = load i64, i64* %STACK_DEP_PTR
  %3257 = add i64 %3256, 1
  store i64 %3257, i64* %STACK_DEP_PTR
  %3258 = load i64, i64* %STACK_DEP_PTR
  %3259 = getelementptr i256, i256* %STACK, i64 %3258
  store i256 0, i256* %3259
  %3260 = load i64, i64* %STACK_DEP_PTR
  %3261 = add i64 %3260, 1
  store i64 %3261, i64* %STACK_DEP_PTR
  %3262 = load i64, i64* %STACK_DEP_PTR
  %3263 = getelementptr i256, i256* %STACK, i64 %3262
  store i256 2520, i256* %3263
  %3264 = load i64, i64* %STACK_DEP_PTR
  %3265 = add i64 %3264, 1
  store i64 %3265, i64* %STACK_DEP_PTR
  %3266 = zext i160 %3246 to i256
  %3267 = load i64, i64* %STACK_DEP_PTR
  %3268 = getelementptr i256, i256* %STACK, i64 %3267
  store i256 %3266, i256* %3268
  %3269 = load i64, i64* %STACK_DEP_PTR
  %3270 = add i64 %3269, 1
  store i64 %3270, i64* %STACK_DEP_PTR
  %3271 = load i64, i64* %STACK_DEP_PTR
  %3272 = getelementptr i256, i256* %STACK, i64 %3271
  store i256 %3243, i256* %3272
  %3273 = load i64, i64* %STACK_DEP_PTR
  %3274 = add i64 %3273, 1
  store i64 %3274, i64* %STACK_DEP_PTR
  %3275 = load i64, i64* %STACK_DEP_PTR
  %3276 = getelementptr i256, i256* %STACK, i64 %3275
  store i256 %3238, i256* %3276
  br label %JumpTable, !EVMBB !4

.2520:                                            ; preds = %JumpTableCase105
  %3277 = load i64, i64* %remaing_gas
  %3278 = icmp ugt i64 272, %3277
  br i1 %3278, label %Abort, label %3279

3279:                                             ; preds = %.2520
  %3280 = load i32, i32* %__afl_state, !nosanitize !3
  %3281 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3282 = xor i32 %3281, 281
  %3283 = xor i32 %3280, %3282
  %3284 = and i32 %3283, 4095
  %3285 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3284
  %3286 = load i8, i8 addrspace(1)* %3285, !nosanitize !3
  %3287 = add i8 %3286, 1
  store i8 %3287, i8 addrspace(1)* %3285, !nosanitize !3
  store i32 140, i32* %__afl_prev_loc, !nosanitize !3
  %3288 = sub i64 %3277, 272
  store i64 %3288, i64* %remaing_gas
  %3289 = load i64, i64* %STACK_DEP_PTR
  %3290 = getelementptr i256, i256* %STACK, i64 %3289
  %3291 = load i256, i256* %3290
  %3292 = load i64, i64* %STACK_DEP_PTR
  %3293 = sub i64 %3292, 1
  store i64 %3293, i64* %STACK_DEP_PTR
  %3294 = load i64, i64* %STACK_DEP_PTR
  %3295 = getelementptr i256, i256* %STACK, i64 %3294
  %3296 = load i256, i256* %3295
  %3297 = load i64, i64* %STACK_DEP_PTR
  %3298 = sub i64 %3297, 1
  store i64 %3298, i64* %STACK_DEP_PTR
  %3299 = load i64, i64* %STACK_DEP_PTR
  %3300 = getelementptr i256, i256* %STACK, i64 %3299
  %3301 = load i256, i256* %3300
  %3302 = load i64, i64* %STACK_DEP_PTR
  %3303 = sub i64 %3302, 1
  store i64 %3303, i64* %STACK_DEP_PTR
  %3304 = load i64, i64* %STACK_DEP_PTR
  %3305 = getelementptr i256, i256* %STACK, i64 %3304
  %3306 = load i256, i256* %3305
  %3307 = load i64, i64* %STACK_DEP_PTR
  %3308 = sub i64 %3307, 1
  store i64 %3308, i64* %STACK_DEP_PTR
  %3309 = trunc i256 %3306 to i64
  store i64 %3309, i64* %JMP_TARGET_PTR
  %3310 = load i64, i64* %STACK_DEP_PTR
  %3311 = add i64 %3310, 1
  store i64 %3311, i64* %STACK_DEP_PTR
  %3312 = load i64, i64* %STACK_DEP_PTR
  %3313 = getelementptr i256, i256* %STACK, i64 %3312
  store i256 1, i256* %3313
  br label %JumpTable, !EVMBB !4

.2530:                                            ; preds = %JumpTableCase96
  %3314 = load i64, i64* %remaing_gas
  %3315 = icmp ugt i64 576, %3314
  br i1 %3315, label %Abort, label %3316

3316:                                             ; preds = %.2530
  %3317 = load i32, i32* %__afl_state, !nosanitize !3
  %3318 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3319 = xor i32 %3318, 1947
  %3320 = xor i32 %3317, %3319
  %3321 = and i32 %3320, 4095
  %3322 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3321
  %3323 = load i8, i8 addrspace(1)* %3322, !nosanitize !3
  %3324 = add i8 %3323, 1
  store i8 %3324, i8 addrspace(1)* %3322, !nosanitize !3
  store i32 973, i32* %__afl_prev_loc, !nosanitize !3
  %3325 = sub i64 %3314, 576
  store i64 %3325, i64* %remaing_gas
  %3326 = load i64, i64* %STACK_DEP_PTR
  %3327 = getelementptr i256, i256* %STACK, i64 %3326
  %3328 = load i256, i256* %3327
  %3329 = load i64, i64* %STACK_DEP_PTR
  %3330 = sub i64 %3329, 1
  store i64 %3330, i64* %STACK_DEP_PTR
  %3331 = load i64, i64* %STACK_DEP_PTR
  %3332 = getelementptr i256, i256* %STACK, i64 %3331
  %3333 = load i256, i256* %3332
  %3334 = load i64, i64* %STACK_DEP_PTR
  %3335 = sub i64 %3334, 1
  store i64 %3335, i64* %STACK_DEP_PTR
  %3336 = load i64, i64* %STACK_DEP_PTR
  %3337 = getelementptr i256, i256* %STACK, i64 %3336
  %3338 = load i256, i256* %3337
  %3339 = load i64, i64* %STACK_DEP_PTR
  %3340 = sub i64 %3339, 1
  store i64 %3340, i64* %STACK_DEP_PTR
  %3341 = trunc i256 32 to i64
  %3342 = alloca i256
  store i256 2, i256* %3342
  %3343 = bitcast i256* %3342 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3341, i8* %3343, i64 32)
  %3344 = trunc i256 0 to i64
  %3345 = alloca i256
  store i256 %3333, i256* %3345
  %3346 = bitcast i256* %3345 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3344, i8* %3346, i64 32)
  %3347 = getelementptr i8, i8* %MEMORY, i256 0
  %3348 = trunc i256 64 to i32
  %3349 = alloca i256
  %3350 = bitcast i256* %3349 to i8*
  call void @__device_sha3(i8* %3347, i32 %3348, i8* %3350)
  %3351 = load i256, i256* %3349
  %3352 = trunc i256 32 to i64
  %3353 = alloca i256
  store i256 %3351, i256* %3353
  %3354 = bitcast i256* %3353 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3352, i8* %3354, i64 32)
  %3355 = trunc i256 0 to i64
  %3356 = alloca i256
  store i256 %3328, i256* %3356
  %3357 = bitcast i256* %3356 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3355, i8* %3357, i64 32)
  %3358 = getelementptr i8, i8* %MEMORY, i256 0
  %3359 = trunc i256 64 to i32
  %3360 = alloca i256
  %3361 = bitcast i256* %3360 to i8*
  call void @__device_sha3(i8* %3358, i32 %3359, i8* %3361)
  %3362 = load i256, i256* %3360
  %3363 = alloca i256
  store i256 %3362, i256* %3363
  %3364 = alloca i256
  %3365 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3365, i256* %3363, i256* %3364)
  %3366 = bitcast i256* %3363 to i32*
  %3367 = call i32 @__hashword(i32* %3366)
  %3368 = bitcast i256* %3364 to i32*
  %3369 = call i32 @__hashword(i32* %3368)
  %3370 = xor i32 %3367, %3369
  store i32 %3370, i32* %__afl_state, !nosanitize !3
  %3371 = load i256, i256* %3364
  %3372 = trunc i256 %3338 to i64
  store i64 %3372, i64* %JMP_TARGET_PTR
  %3373 = load i64, i64* %STACK_DEP_PTR
  %3374 = add i64 %3373, 1
  store i64 %3374, i64* %STACK_DEP_PTR
  %3375 = load i64, i64* %STACK_DEP_PTR
  %3376 = getelementptr i256, i256* %STACK, i64 %3375
  store i256 %3338, i256* %3376
  %3377 = load i64, i64* %STACK_DEP_PTR
  %3378 = add i64 %3377, 1
  store i64 %3378, i64* %STACK_DEP_PTR
  %3379 = load i64, i64* %STACK_DEP_PTR
  %3380 = getelementptr i256, i256* %STACK, i64 %3379
  store i256 %3371, i256* %3380
  br label %JumpTable, !EVMBB !4

.2567:                                            ; preds = %JumpTableCase66
  %3381 = load i64, i64* %remaing_gas
  %3382 = icmp ugt i64 272, %3381
  br i1 %3382, label %Abort, label %3383

3383:                                             ; preds = %.2567
  %3384 = load i32, i32* %__afl_state, !nosanitize !3
  %3385 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3386 = xor i32 %3385, 1525
  %3387 = xor i32 %3384, %3386
  %3388 = and i32 %3387, 4095
  %3389 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3388
  %3390 = load i8, i8 addrspace(1)* %3389, !nosanitize !3
  %3391 = add i8 %3390, 1
  store i8 %3391, i8 addrspace(1)* %3389, !nosanitize !3
  store i32 762, i32* %__afl_prev_loc, !nosanitize !3
  %3392 = sub i64 %3381, 272
  store i64 %3392, i64* %remaing_gas
  %3393 = load i64, i64* %STACK_DEP_PTR
  %3394 = getelementptr i256, i256* %STACK, i64 %3393
  %3395 = load i256, i256* %3394
  %3396 = load i64, i64* %STACK_DEP_PTR
  %3397 = sub i64 %3396, 1
  store i64 %3397, i64* %STACK_DEP_PTR
  %3398 = load i64, i64* %STACK_DEP_PTR
  %3399 = getelementptr i256, i256* %STACK, i64 %3398
  %3400 = load i256, i256* %3399
  %3401 = load i64, i64* %STACK_DEP_PTR
  %3402 = sub i64 %3401, 1
  store i64 %3402, i64* %STACK_DEP_PTR
  %3403 = and i256 1461501637330902918203684832716283019655932542975, %3400
  %3404 = icmp eq i256 %3403, 0
  %3405 = icmp eq i1 %3404, false
  %3406 = icmp eq i1 %3405, false
  %3407 = icmp eq i1 %3406, false
  %3408 = trunc i256 2605 to i64
  %jump.check21 = icmp ne i1 %3407, false
  store i64 %3408, i64* %JMP_TARGET_PTR
  %3409 = load i64, i64* %STACK_DEP_PTR
  %3410 = add i64 %3409, 1
  store i64 %3410, i64* %STACK_DEP_PTR
  %3411 = load i64, i64* %STACK_DEP_PTR
  %3412 = getelementptr i256, i256* %STACK, i64 %3411
  store i256 %3400, i256* %3412
  %3413 = load i64, i64* %STACK_DEP_PTR
  %3414 = add i64 %3413, 1
  store i64 %3414, i64* %STACK_DEP_PTR
  %3415 = load i64, i64* %STACK_DEP_PTR
  %3416 = getelementptr i256, i256* %STACK, i64 %3415
  store i256 %3395, i256* %3416
  br i1 %jump.check21, label %JumpTable, label %.2601, !EVMBB !4

.2601:                                            ; preds = %3383
  %3417 = load i64, i64* %remaing_gas
  %3418 = icmp ugt i64 40, %3417
  br i1 %3418, label %Abort, label %3419

3419:                                             ; preds = %.2601
  %3420 = load i32, i32* %__afl_state, !nosanitize !3
  %3421 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3422 = xor i32 %3421, 3809
  %3423 = xor i32 %3420, %3422
  %3424 = and i32 %3423, 4095
  %3425 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3424
  %3426 = load i8, i8 addrspace(1)* %3425, !nosanitize !3
  %3427 = add i8 %3426, 1
  store i8 %3427, i8 addrspace(1)* %3425, !nosanitize !3
  store i32 1904, i32* %__afl_prev_loc, !nosanitize !3
  %3428 = sub i64 %3417, 40
  store i64 %3428, i64* %remaing_gas
  %3429 = load i64, i64* %STACK_DEP_PTR
  %3430 = sub i64 %3429, 0
  store i64 %3430, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.2605:                                            ; preds = %JumpTableCase71
  %3431 = load i64, i64* %remaing_gas
  %3432 = icmp ugt i64 584, %3431
  br i1 %3432, label %Abort, label %3433

3433:                                             ; preds = %.2605
  %3434 = load i32, i32* %__afl_state, !nosanitize !3
  %3435 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3436 = xor i32 %3435, 284
  %3437 = xor i32 %3434, %3436
  %3438 = and i32 %3437, 4095
  %3439 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3438
  %3440 = load i8, i8 addrspace(1)* %3439, !nosanitize !3
  %3441 = add i8 %3440, 1
  store i8 %3441, i8 addrspace(1)* %3439, !nosanitize !3
  store i32 142, i32* %__afl_prev_loc, !nosanitize !3
  %3442 = sub i64 %3431, 584
  store i64 %3442, i64* %remaing_gas
  %3443 = load i64, i64* %STACK_DEP_PTR
  %3444 = getelementptr i256, i256* %STACK, i64 %3443
  %3445 = load i256, i256* %3444
  %3446 = load i64, i64* %STACK_DEP_PTR
  %3447 = sub i64 %3446, 1
  store i64 %3447, i64* %STACK_DEP_PTR
  %3448 = load i64, i64* %STACK_DEP_PTR
  %3449 = getelementptr i256, i256* %STACK, i64 %3448
  %3450 = load i256, i256* %3449
  %3451 = load i64, i64* %STACK_DEP_PTR
  %3452 = sub i64 %3451, 1
  store i64 %3452, i64* %STACK_DEP_PTR
  %3453 = load i64, i64* %STACK_DEP_PTR
  %3454 = getelementptr i256, i256* %STACK, i64 %3453
  %3455 = load i256, i256* %3454
  %3456 = load i64, i64* %STACK_DEP_PTR
  %3457 = sub i64 %3456, 1
  store i64 %3457, i64* %STACK_DEP_PTR
  %3458 = and i256 255, 2
  %3459 = add i256 %3445, %3458
  %"SUM < LHS192" = icmp ult i256 %3459, %3445
  %3460 = select i1 %"SUM < LHS192", i8 4, i8 0
  %3461 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3461, i8 %3460, i32 2612)
  %3462 = add i256 %3445, %3458, !pc !114, !intsan !8
  %3463 = and i256 1461501637330902918203684832716283019655932542975, %3455
  %3464 = and i256 1461501637330902918203684832716283019655932542975, %3463
  %3465 = trunc i256 0 to i64
  %3466 = alloca i256
  store i256 %3464, i256* %3466
  %3467 = bitcast i256* %3466 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3465, i8* %3467, i64 32)
  %3468 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3468, i8 0, i32 2666)
  %3469 = add i256 32, 0, !pc !115, !intsan !8
  %3470 = trunc i256 %3469 to i64
  %3471 = alloca i256
  store i256 1, i256* %3471
  %3472 = bitcast i256* %3471 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3470, i8* %3472, i64 32)
  %3473 = add i256 32, %3469
  %"SUM < LHS193" = icmp ult i256 %3473, 32
  %3474 = select i1 %"SUM < LHS193", i8 4, i8 0
  %3475 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3475, i8 %3474, i32 2672)
  %3476 = add i256 32, %3469, !pc !116, !intsan !8
  %3477 = getelementptr i8, i8* %MEMORY, i256 0
  %3478 = trunc i256 %3476 to i32
  %3479 = alloca i256
  %3480 = bitcast i256* %3479 to i8*
  call void @__device_sha3(i8* %3477, i32 %3478, i8* %3480)
  %3481 = load i256, i256* %3479
  %3482 = alloca i256
  store i256 %3481, i256* %3482
  %3483 = alloca i256
  %3484 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3484, i256* %3482, i256* %3483)
  %3485 = load i256, i256* %3483
  %3486 = icmp ult i256 %3485, %3462
  %3487 = icmp eq i1 %3486, false
  %3488 = icmp eq i1 %3487, false
  %3489 = icmp eq i1 %3488, false
  %3490 = trunc i256 2689 to i64
  %jump.check24 = icmp ne i1 %3489, false
  store i64 %3490, i64* %JMP_TARGET_PTR
  %3491 = load i64, i64* %STACK_DEP_PTR
  %3492 = add i64 %3491, 1
  store i64 %3492, i64* %STACK_DEP_PTR
  %3493 = load i64, i64* %STACK_DEP_PTR
  %3494 = getelementptr i256, i256* %STACK, i64 %3493
  store i256 %3455, i256* %3494
  %3495 = load i64, i64* %STACK_DEP_PTR
  %3496 = add i64 %3495, 1
  store i64 %3496, i64* %STACK_DEP_PTR
  %3497 = load i64, i64* %STACK_DEP_PTR
  %3498 = getelementptr i256, i256* %STACK, i64 %3497
  store i256 %3450, i256* %3498
  %3499 = load i64, i64* %STACK_DEP_PTR
  %3500 = add i64 %3499, 1
  store i64 %3500, i64* %STACK_DEP_PTR
  %3501 = load i64, i64* %STACK_DEP_PTR
  %3502 = getelementptr i256, i256* %STACK, i64 %3501
  store i256 %3445, i256* %3502
  br i1 %jump.check24, label %JumpTable, label %.2685, !EVMBB !4

.2685:                                            ; preds = %3433
  %3503 = load i64, i64* %remaing_gas
  %3504 = icmp ugt i64 40, %3503
  br i1 %3504, label %Abort, label %3505

3505:                                             ; preds = %.2685
  %3506 = load i32, i32* %__afl_state, !nosanitize !3
  %3507 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3508 = xor i32 %3507, 3363
  %3509 = xor i32 %3506, %3508
  %3510 = and i32 %3509, 4095
  %3511 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3510
  %3512 = load i8, i8 addrspace(1)* %3511, !nosanitize !3
  %3513 = add i8 %3512, 1
  store i8 %3513, i8 addrspace(1)* %3511, !nosanitize !3
  store i32 1681, i32* %__afl_prev_loc, !nosanitize !3
  %3514 = sub i64 %3503, 40
  store i64 %3514, i64* %remaing_gas
  %3515 = load i64, i64* %STACK_DEP_PTR
  %3516 = sub i64 %3515, 0
  store i64 %3516, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.2689:                                            ; preds = %JumpTableCase76
  %3517 = load i64, i64* %remaing_gas
  %3518 = icmp ugt i64 680, %3517
  br i1 %3518, label %Abort, label %3519

3519:                                             ; preds = %.2689
  %3520 = load i32, i32* %__afl_state, !nosanitize !3
  %3521 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3522 = xor i32 %3521, 41
  %3523 = xor i32 %3520, %3522
  %3524 = and i32 %3523, 4095
  %3525 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3524
  %3526 = load i8, i8 addrspace(1)* %3525, !nosanitize !3
  %3527 = add i8 %3526, 1
  store i8 %3527, i8 addrspace(1)* %3525, !nosanitize !3
  store i32 20, i32* %__afl_prev_loc, !nosanitize !3
  %3528 = sub i64 %3517, 680
  store i64 %3528, i64* %remaing_gas
  %3529 = load i64, i64* %STACK_DEP_PTR
  %3530 = getelementptr i256, i256* %STACK, i64 %3529
  %3531 = load i256, i256* %3530
  %3532 = load i64, i64* %STACK_DEP_PTR
  %3533 = sub i64 %3532, 1
  store i64 %3533, i64* %STACK_DEP_PTR
  %3534 = load i64, i64* %STACK_DEP_PTR
  %3535 = getelementptr i256, i256* %STACK, i64 %3534
  %3536 = load i256, i256* %3535
  %3537 = load i64, i64* %STACK_DEP_PTR
  %3538 = sub i64 %3537, 1
  store i64 %3538, i64* %STACK_DEP_PTR
  %3539 = and i256 1461501637330902918203684832716283019655932542975, %3536
  %3540 = and i256 1461501637330902918203684832716283019655932542975, %3539
  %3541 = trunc i256 0 to i64
  %3542 = alloca i256
  store i256 %3540, i256* %3542
  %3543 = bitcast i256* %3542 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3541, i8* %3543, i64 32)
  %3544 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3544, i8 0, i32 2743)
  %3545 = add i256 32, 0, !pc !117, !intsan !8
  %3546 = trunc i256 %3545 to i64
  %3547 = alloca i256
  store i256 1, i256* %3547
  %3548 = bitcast i256* %3547 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3546, i8* %3548, i64 32)
  %3549 = add i256 32, %3545
  %"SUM < LHS194" = icmp ult i256 %3549, 32
  %3550 = select i1 %"SUM < LHS194", i8 4, i8 0
  %3551 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3551, i8 %3550, i32 2749)
  %3552 = add i256 32, %3545, !pc !118, !intsan !8
  %3553 = getelementptr i8, i8* %MEMORY, i256 0
  %3554 = trunc i256 %3552 to i32
  %3555 = alloca i256
  %3556 = bitcast i256* %3555 to i8*
  call void @__device_sha3(i8* %3553, i32 %3554, i8* %3556)
  %3557 = load i256, i256* %3555
  %3558 = alloca i256
  store i256 %3557, i256* %3558
  %3559 = alloca i256
  %3560 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3560, i256* %3558, i256* %3559)
  %3561 = load i256, i256* %3559
  %3562 = and i256 1461501637330902918203684832716283019655932542975, %3536
  %3563 = and i256 1461501637330902918203684832716283019655932542975, %3562
  %3564 = trunc i256 0 to i64
  %3565 = alloca i256
  store i256 %3563, i256* %3565
  %3566 = bitcast i256* %3565 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3564, i8* %3566, i64 32)
  %3567 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3567, i8 0, i32 2808)
  %3568 = add i256 32, 0, !pc !119, !intsan !8
  %3569 = trunc i256 %3568 to i64
  %3570 = alloca i256
  store i256 1, i256* %3570
  %3571 = bitcast i256* %3570 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3569, i8* %3571, i64 32)
  %3572 = add i256 32, %3568
  %"SUM < LHS195" = icmp ult i256 %3572, 32
  %3573 = select i1 %"SUM < LHS195", i8 4, i8 0
  %3574 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3574, i8 %3573, i32 2814)
  %3575 = add i256 32, %3568, !pc !120, !intsan !8
  %3576 = getelementptr i8, i8* %MEMORY, i256 0
  %3577 = trunc i256 %3575 to i32
  %3578 = alloca i256
  %3579 = bitcast i256* %3578 to i8*
  call void @__device_sha3(i8* %3576, i32 %3577, i8* %3579)
  %3580 = load i256, i256* %3578
  %3581 = alloca i256
  store i256 %3580, i256* %3581
  %3582 = alloca i256
  %3583 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3583, i256* %3581, i256* %3582)
  %3584 = load i256, i256* %3582
  %3585 = add i256 %3584, %3531
  %"SUM < LHS196" = icmp ult i256 %3585, %3584
  %3586 = select i1 %"SUM < LHS196", i8 4, i8 0
  %3587 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3587, i8 %3586, i32 2819)
  %3588 = add i256 %3584, %3531, !pc !121, !intsan !8
  %3589 = icmp ugt i256 %3588, %3561
  %3590 = icmp eq i1 %3589, false
  %3591 = icmp eq i1 %3590, false
  %3592 = trunc i256 2831 to i64
  %jump.check28 = icmp ne i1 %3591, false
  store i64 %3592, i64* %JMP_TARGET_PTR
  %3593 = load i64, i64* %STACK_DEP_PTR
  %3594 = add i64 %3593, 1
  store i64 %3594, i64* %STACK_DEP_PTR
  %3595 = load i64, i64* %STACK_DEP_PTR
  %3596 = getelementptr i256, i256* %STACK, i64 %3595
  store i256 %3536, i256* %3596
  %3597 = load i64, i64* %STACK_DEP_PTR
  %3598 = add i64 %3597, 1
  store i64 %3598, i64* %STACK_DEP_PTR
  %3599 = load i64, i64* %STACK_DEP_PTR
  %3600 = getelementptr i256, i256* %STACK, i64 %3599
  store i256 %3531, i256* %3600
  br i1 %jump.check28, label %JumpTable, label %.2827, !EVMBB !4

.2827:                                            ; preds = %3519
  %3601 = load i64, i64* %remaing_gas
  %3602 = icmp ugt i64 40, %3601
  br i1 %3602, label %Abort, label %3603

3603:                                             ; preds = %.2827
  %3604 = load i32, i32* %__afl_state, !nosanitize !3
  %3605 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3606 = xor i32 %3605, 1188
  %3607 = xor i32 %3604, %3606
  %3608 = and i32 %3607, 4095
  %3609 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3608
  %3610 = load i8, i8 addrspace(1)* %3609, !nosanitize !3
  %3611 = add i8 %3610, 1
  store i8 %3611, i8 addrspace(1)* %3609, !nosanitize !3
  store i32 594, i32* %__afl_prev_loc, !nosanitize !3
  %3612 = sub i64 %3601, 40
  store i64 %3612, i64* %remaing_gas
  %3613 = load i64, i64* %STACK_DEP_PTR
  %3614 = sub i64 %3613, 0
  store i64 %3614, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.2831:                                            ; preds = %JumpTableCase81
  %3615 = load i64, i64* %remaing_gas
  %3616 = icmp ugt i64 1384, %3615
  br i1 %3616, label %Abort, label %3617

3617:                                             ; preds = %.2831
  %3618 = load i32, i32* %__afl_state, !nosanitize !3
  %3619 = load i32, i32* %__afl_prev_loc, !nosanitize !3
  %3620 = xor i32 %3619, 1811
  %3621 = xor i32 %3618, %3620
  %3622 = and i32 %3621, 4095
  %3623 = getelementptr i8, i8 addrspace(1)* %__afl_area_ptr, i32 %3622
  %3624 = load i8, i8 addrspace(1)* %3623, !nosanitize !3
  %3625 = add i8 %3624, 1
  store i8 %3625, i8 addrspace(1)* %3623, !nosanitize !3
  store i32 905, i32* %__afl_prev_loc, !nosanitize !3
  %3626 = sub i64 %3615, 1384
  store i64 %3626, i64* %remaing_gas
  %3627 = load i64, i64* %STACK_DEP_PTR
  %3628 = getelementptr i256, i256* %STACK, i64 %3627
  %3629 = load i256, i256* %3628
  %3630 = load i64, i64* %STACK_DEP_PTR
  %3631 = sub i64 %3630, 1
  store i64 %3631, i64* %STACK_DEP_PTR
  %3632 = load i64, i64* %STACK_DEP_PTR
  %3633 = getelementptr i256, i256* %STACK, i64 %3632
  %3634 = load i256, i256* %3633
  %3635 = load i64, i64* %STACK_DEP_PTR
  %3636 = sub i64 %3635, 1
  store i64 %3636, i64* %STACK_DEP_PTR
  %3637 = load i64, i64* %STACK_DEP_PTR
  %3638 = getelementptr i256, i256* %STACK, i64 %3637
  %3639 = load i256, i256* %3638
  %3640 = load i64, i64* %STACK_DEP_PTR
  %3641 = sub i64 %3640, 1
  store i64 %3641, i64* %STACK_DEP_PTR
  %3642 = load i64, i64* %STACK_DEP_PTR
  %3643 = getelementptr i256, i256* %STACK, i64 %3642
  %3644 = load i256, i256* %3643
  %3645 = load i64, i64* %STACK_DEP_PTR
  %3646 = sub i64 %3645, 1
  store i64 %3646, i64* %STACK_DEP_PTR
  %3647 = and i256 255, 2
  %3648 = add i256 %3629, %3647
  %"SUM < LHS197" = icmp ult i256 %3648, %3629
  %3649 = select i1 %"SUM < LHS197", i8 4, i8 0
  %3650 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3650, i8 %3649, i32 2838)
  %3651 = add i256 %3629, %3647, !pc !122, !intsan !8
  %3652 = and i256 1461501637330902918203684832716283019655932542975, %3639
  %3653 = and i256 1461501637330902918203684832716283019655932542975, %3652
  %3654 = trunc i256 0 to i64
  %3655 = alloca i256
  store i256 %3653, i256* %3655
  %3656 = bitcast i256* %3655 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3654, i8* %3656, i64 32)
  %3657 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3657, i8 0, i32 2892)
  %3658 = add i256 32, 0, !pc !123, !intsan !8
  %3659 = trunc i256 %3658 to i64
  %3660 = alloca i256
  store i256 1, i256* %3660
  %3661 = bitcast i256* %3660 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3659, i8* %3661, i64 32)
  %3662 = add i256 32, %3658
  %"SUM < LHS198" = icmp ult i256 %3662, 32
  %3663 = select i1 %"SUM < LHS198", i8 4, i8 0
  %3664 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3664, i8 %3663, i32 2898)
  %3665 = add i256 32, %3658, !pc !124, !intsan !8
  %3666 = getelementptr i8, i8* %MEMORY, i256 0
  %3667 = trunc i256 %3665 to i32
  %3668 = alloca i256
  %3669 = bitcast i256* %3668 to i8*
  call void @__device_sha3(i8* %3666, i32 %3667, i8* %3669)
  %3670 = load i256, i256* %3668
  %3671 = alloca i256
  store i256 %3670, i256* %3671
  %3672 = alloca i256
  %3673 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3673, i256* %3671, i256* %3672)
  %3674 = load i256, i256* %3672
  %"LHS < RHS199" = icmp ult i256 %3674, %3651
  %3675 = select i1 %"LHS < RHS199", i8 4, i8 0
  %3676 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3676, i8 %3675, i32 2907)
  %3677 = sub i256 %3674, %3651, !pc !125, !intsan !10
  %3678 = alloca i256
  store i256 %3670, i256* %3678
  %3679 = alloca i256
  store i256 %3677, i256* %3679
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %3678, i256* %3679)
  %3680 = and i256 1461501637330902918203684832716283019655932542975, %3634
  %3681 = and i256 1461501637330902918203684832716283019655932542975, %3680
  %3682 = trunc i256 0 to i64
  %3683 = alloca i256
  store i256 %3681, i256* %3683
  %3684 = bitcast i256* %3683 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3682, i8* %3684, i64 32)
  %3685 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3685, i8 0, i32 2969)
  %3686 = add i256 32, 0, !pc !126, !intsan !8
  %3687 = trunc i256 %3686 to i64
  %3688 = alloca i256
  store i256 1, i256* %3688
  %3689 = bitcast i256* %3688 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3687, i8* %3689, i64 32)
  %3690 = add i256 32, %3686
  %"SUM < LHS200" = icmp ult i256 %3690, 32
  %3691 = select i1 %"SUM < LHS200", i8 4, i8 0
  %3692 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3692, i8 %3691, i32 2975)
  %3693 = add i256 32, %3686, !pc !127, !intsan !8
  %3694 = getelementptr i8, i8* %MEMORY, i256 0
  %3695 = trunc i256 %3693 to i32
  %3696 = alloca i256
  %3697 = bitcast i256* %3696 to i8*
  call void @__device_sha3(i8* %3694, i32 %3695, i8* %3697)
  %3698 = load i256, i256* %3696
  %3699 = alloca i256
  store i256 %3698, i256* %3699
  %3700 = alloca i256
  %3701 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3701, i256* %3699, i256* %3700)
  %3702 = load i256, i256* %3700
  %3703 = add i256 %3702, %3629
  %"SUM < LHS201" = icmp ult i256 %3703, %3702
  %3704 = select i1 %"SUM < LHS201", i8 4, i8 0
  %3705 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3705, i8 %3704, i32 2984)
  %3706 = add i256 %3702, %3629, !pc !128, !intsan !8
  %3707 = alloca i256
  store i256 %3698, i256* %3707
  %3708 = alloca i256
  store i256 %3706, i256* %3708
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %3707, i256* %3708)
  %3709 = and i256 255, 2
  %3710 = and i256 1461501637330902918203684832716283019655932542975, 0
  %3711 = trunc i256 0 to i64
  %3712 = alloca i256
  store i256 %3710, i256* %3712
  %3713 = bitcast i256* %3712 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3711, i8* %3713, i64 32)
  %3714 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3714, i8 0, i32 3028)
  %3715 = add i256 32, 0, !pc !129, !intsan !8
  %3716 = trunc i256 %3715 to i64
  %3717 = alloca i256
  store i256 1, i256* %3717
  %3718 = bitcast i256* %3717 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3716, i8* %3718, i64 32)
  %3719 = add i256 32, %3715
  %"SUM < LHS202" = icmp ult i256 %3719, 32
  %3720 = select i1 %"SUM < LHS202", i8 4, i8 0
  %3721 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3721, i8 %3720, i32 3034)
  %3722 = add i256 32, %3715, !pc !130, !intsan !8
  %3723 = getelementptr i8, i8* %MEMORY, i256 0
  %3724 = trunc i256 %3722 to i32
  %3725 = alloca i256
  %3726 = bitcast i256* %3725 to i8*
  call void @__device_sha3(i8* %3723, i32 %3724, i8* %3726)
  %3727 = load i256, i256* %3725
  %3728 = alloca i256
  store i256 %3727, i256* %3728
  %3729 = alloca i256
  %3730 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3730, i256* %3728, i256* %3729)
  %3731 = load i256, i256* %3729
  %3732 = add i256 %3731, %3709
  %"SUM < LHS203" = icmp ult i256 %3732, %3731
  %3733 = select i1 %"SUM < LHS203", i8 4, i8 0
  %3734 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3734, i8 %3733, i32 3043)
  %3735 = add i256 %3731, %3709, !pc !131, !intsan !8
  %3736 = alloca i256
  store i256 %3727, i256* %3736
  %3737 = alloca i256
  store i256 %3735, i256* %3737
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %3736, i256* %3737)
  %3738 = and i256 255, 2
  %3739 = alloca i256
  store i256 0, i256* %3739
  %3740 = alloca i256
  %3741 = load i8, i8 addrspace(1)* %1
  call void @__device_sload(%Slot_t addrspace(1)* %0, i8 %3741, i256* %3739, i256* %3740)
  %3742 = load i256, i256* %3740
  %"LHS < RHS204" = icmp ult i256 %3742, %3738
  %3743 = select i1 %"LHS < RHS204", i8 4, i8 0
  %3744 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3744, i8 %3743, i32 3062)
  %3745 = sub i256 %3742, %3738, !pc !132, !intsan !10
  %3746 = alloca i256
  store i256 0, i256* %3746
  %3747 = alloca i256
  store i256 %3745, i256* %3747
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %3746, i256* %3747)
  %3748 = and i256 1461501637330902918203684832716283019655932542975, %3639
  %3749 = trunc i256 64 to i64
  %3750 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %3749, i256* %3750)
  %3751 = load i256, i256* %3750
  %3752 = and i256 255, 2
  %3753 = trunc i256 %3751 to i64
  %3754 = alloca i256
  store i256 %3752, i256* %3754
  %3755 = bitcast i256* %3754 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3753, i8* %3755, i64 32)
  %3756 = add i256 32, %3751
  %"SUM < LHS205" = icmp ult i256 %3756, 32
  %3757 = select i1 %"SUM < LHS205", i8 4, i8 0
  %3758 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3758, i8 %3757, i32 3140)
  %3759 = add i256 32, %3751, !pc !133, !intsan !8
  %3760 = trunc i256 64 to i64
  %3761 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %3760, i256* %3761)
  %3762 = load i256, i256* %3761
  %"LHS < RHS206" = icmp ult i256 %3759, %3762
  %3763 = select i1 %"LHS < RHS206", i8 4, i8 0
  %3764 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3764, i8 %3763, i32 3149)
  %3765 = sub i256 %3759, %3762, !pc !134, !intsan !10
  %3766 = and i256 1461501637330902918203684832716283019655932542975, %3634
  %3767 = and i256 1461501637330902918203684832716283019655932542975, %3639
  %3768 = trunc i256 64 to i64
  %3769 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %3768, i256* %3769)
  %3770 = load i256, i256* %3769
  %3771 = trunc i256 %3770 to i64
  %3772 = alloca i256
  store i256 %3629, i256* %3772
  %3773 = bitcast i256* %3772 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %3771, i8* %3773, i64 32)
  %3774 = add i256 32, %3770
  %"SUM < LHS207" = icmp ult i256 %3774, 32
  %3775 = select i1 %"SUM < LHS207", i8 4, i8 0
  %3776 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3776, i8 %3775, i32 3241)
  %3777 = add i256 32, %3770, !pc !135, !intsan !8
  %3778 = trunc i256 64 to i64
  %3779 = alloca i256
  call void @__device_mload(i8* %MEMORY, i64 %3778, i256* %3779)
  %3780 = load i256, i256* %3779
  %"LHS < RHS208" = icmp ult i256 %3777, %3780
  %3781 = select i1 %"LHS < RHS208", i8 4, i8 0
  %3782 = call i32 @get_thread_id()
  call void @addBugSet(i32 %3782, i8 %3781, i32 3250)
  %3783 = sub i256 %3777, %3780, !pc !136, !intsan !10
  %3784 = trunc i256 %3644 to i64
  store i64 %3784, i64* %JMP_TARGET_PTR
  br label %JumpTable, !EVMBB !4

JumpTable:                                        ; preds = %3279, %1856, %1798, %1747, %546, %488, %437, %3316, %3226, %2161, %3180, %2037, %2128, %2782, %3145, %1650, %2004, %275, %3617, %2976, %3099, %1562, %1617, %255, %3519, %2902, %1455, %1529, %235, %3433, %2876, %1344, %1422, %215, %3383, %2850, %1256, %1311, %195, %2668, %2824, %1166, %1223, %175, %2432, %2557, %1076, %1133, %155, %2400, %2531, %939, %1043, %135, %2294, %851, %906, %115, %2248, %727, %818, %95, %340, %694, %75, %307, %55, %28, %10
  %3785 = load i64, i64* %JMP_TARGET_PTR
  %3786 = trunc i64 %3785 to i32
  br label %JumpTableCase

Abort:                                            ; preds = %.2831, %.2827, %.2689, %.2685, %.2605, %.2601, %.2567, %.2530, %.2520, %.2507, %.2450, %.2444, %.2420, %.2186, %.2182, %.2106, %.2095, %.2090, %.2085, %.2074, %.1925, %.1921, %.1784, %.1775, %.1535, %.1531, %.1524, %.1384, %.1327, %.1305, %.1220, %.1216, %.1208, %.1182, %.1119, %.1115, %.1107, %.1093, %.1048, %.1030, %.1021, %.975, %.971, %.963, %.941, %.932, %.928, %.920, %.898, %.845, %.841, %.833, %.807, %.776, %.772, %.764, %.742, %.733, %.729, %.721, %.693, %.684, %.680, %.672, %.644, %.635, %.631, %.623, %.597, %.502, %.498, %.490, %.468, %.459, %.455, %.447, %.421, %.358, %.354, %.346, %.332, %.287, %.269, %.260, %.214, %.210, %.202, %.197, %.186, %.175, %.164, %.153, %.142, %.131, %.120, %.109, %.98, %.87, %.76, %.65, %.13, %.0, %JumpTableCase105, %2147, %2023, %1636, %3603, %2962, %1548, %3505, %1441, %3419, %1330, %1242, %2654, %1152, %2420, %1062, %925, %837, %713, %326, %295
  call void @free(i8* %MEMORY)
  call void @free(i8* %7)
  ret i32 0

Exit:                                             ; preds = %2090, %1961, %651, %2215, %1005, %1584, %1384, %1496, %1278, %1188, %1098, %780, %873
  call void @free(i8* %MEMORY)
  call void @free(i8* %7)
  ret i32 1

JumpTableCase:                                    ; preds = %JumpTable
  %3787 = icmp eq i32 197, %3786
  br i1 %3787, label %.197, label %JumpTableCase38

JumpTableCase38:                                  ; preds = %JumpTableCase
  %3788 = icmp eq i32 202, %3786
  br i1 %3788, label %.202, label %JumpTableCase39

JumpTableCase39:                                  ; preds = %JumpTableCase38
  %3789 = icmp eq i32 346, %3786
  br i1 %3789, label %.346, label %JumpTableCase40

JumpTableCase40:                                  ; preds = %JumpTableCase39
  %3790 = icmp eq i32 214, %3786
  br i1 %3790, label %.214, label %JumpTableCase41

JumpTableCase41:                                  ; preds = %JumpTableCase40
  %3791 = icmp eq i32 447, %3786
  br i1 %3791, label %.447, label %JumpTableCase42

JumpTableCase42:                                  ; preds = %JumpTableCase41
  %3792 = icmp eq i32 358, %3786
  br i1 %3792, label %.358, label %JumpTableCase43

JumpTableCase43:                                  ; preds = %JumpTableCase42
  %3793 = icmp eq i32 1327, %3786
  br i1 %3793, label %.1327, label %JumpTableCase44

JumpTableCase44:                                  ; preds = %JumpTableCase43
  %3794 = icmp eq i32 490, %3786
  br i1 %3794, label %.490, label %JumpTableCase45

JumpTableCase45:                                  ; preds = %JumpTableCase44
  %3795 = icmp eq i32 459, %3786
  br i1 %3795, label %.459, label %JumpTableCase46

JumpTableCase46:                                  ; preds = %JumpTableCase45
  %3796 = icmp eq i32 1384, %3786
  br i1 %3796, label %.1384, label %JumpTableCase47

JumpTableCase47:                                  ; preds = %JumpTableCase46
  %3797 = icmp eq i32 223, %3786
  br i1 %3797, label %.223, label %JumpTableCase48

JumpTableCase48:                                  ; preds = %JumpTableCase47
  %3798 = icmp eq i32 623, %3786
  br i1 %3798, label %.623, label %JumpTableCase49

JumpTableCase49:                                  ; preds = %JumpTableCase48
  %3799 = icmp eq i32 502, %3786
  br i1 %3799, label %.502, label %JumpTableCase50

JumpTableCase50:                                  ; preds = %JumpTableCase49
  %3800 = icmp eq i32 1775, %3786
  br i1 %3800, label %.1775, label %JumpTableCase51

JumpTableCase51:                                  ; preds = %JumpTableCase50
  %3801 = icmp eq i32 1524, %3786
  br i1 %3801, label %.1524, label %JumpTableCase52

JumpTableCase52:                                  ; preds = %JumpTableCase51
  %3802 = icmp eq i32 672, %3786
  br i1 %3802, label %.672, label %JumpTableCase53

JumpTableCase53:                                  ; preds = %JumpTableCase52
  %3803 = icmp eq i32 635, %3786
  br i1 %3803, label %.635, label %JumpTableCase54

JumpTableCase54:                                  ; preds = %JumpTableCase53
  %3804 = icmp eq i32 1784, %3786
  br i1 %3804, label %.1784, label %JumpTableCase55

JumpTableCase55:                                  ; preds = %JumpTableCase54
  %3805 = icmp eq i32 468, %3786
  br i1 %3805, label %.468, label %JumpTableCase56

JumpTableCase56:                                  ; preds = %JumpTableCase55
  %3806 = icmp eq i32 1535, %3786
  br i1 %3806, label %.1535, label %JumpTableCase57

JumpTableCase57:                                  ; preds = %JumpTableCase56
  %3807 = icmp eq i32 721, %3786
  br i1 %3807, label %.721, label %JumpTableCase58

JumpTableCase58:                                  ; preds = %JumpTableCase57
  %3808 = icmp eq i32 684, %3786
  br i1 %3808, label %.684, label %JumpTableCase59

JumpTableCase59:                                  ; preds = %JumpTableCase58
  %3809 = icmp eq i32 2085, %3786
  br i1 %3809, label %.2085, label %JumpTableCase60

JumpTableCase60:                                  ; preds = %JumpTableCase59
  %3810 = icmp eq i32 1925, %3786
  br i1 %3810, label %.1925, label %JumpTableCase61

JumpTableCase61:                                  ; preds = %JumpTableCase60
  %3811 = icmp eq i32 421, %3786
  br i1 %3811, label %.421, label %JumpTableCase62

JumpTableCase62:                                  ; preds = %JumpTableCase61
  %3812 = icmp eq i32 764, %3786
  br i1 %3812, label %.764, label %JumpTableCase63

JumpTableCase63:                                  ; preds = %JumpTableCase62
  %3813 = icmp eq i32 733, %3786
  br i1 %3813, label %.733, label %JumpTableCase64

JumpTableCase64:                                  ; preds = %JumpTableCase63
  %3814 = icmp eq i32 2090, %3786
  br i1 %3814, label %.2090, label %JumpTableCase65

JumpTableCase65:                                  ; preds = %JumpTableCase64
  %3815 = icmp eq i32 644, %3786
  br i1 %3815, label %.644, label %JumpTableCase66

JumpTableCase66:                                  ; preds = %JumpTableCase65
  %3816 = icmp eq i32 2567, %3786
  br i1 %3816, label %.2567, label %JumpTableCase67

JumpTableCase67:                                  ; preds = %JumpTableCase66
  %3817 = icmp eq i32 833, %3786
  br i1 %3817, label %.833, label %JumpTableCase68

JumpTableCase68:                                  ; preds = %JumpTableCase67
  %3818 = icmp eq i32 776, %3786
  br i1 %3818, label %.776, label %JumpTableCase69

JumpTableCase69:                                  ; preds = %JumpTableCase68
  %3819 = icmp eq i32 2095, %3786
  br i1 %3819, label %.2095, label %JumpTableCase70

JumpTableCase70:                                  ; preds = %JumpTableCase69
  %3820 = icmp eq i32 693, %3786
  br i1 %3820, label %.693, label %JumpTableCase71

JumpTableCase71:                                  ; preds = %JumpTableCase70
  %3821 = icmp eq i32 2605, %3786
  br i1 %3821, label %.2605, label %JumpTableCase72

JumpTableCase72:                                  ; preds = %JumpTableCase71
  %3822 = icmp eq i32 920, %3786
  br i1 %3822, label %.920, label %JumpTableCase73

JumpTableCase73:                                  ; preds = %JumpTableCase72
  %3823 = icmp eq i32 845, %3786
  br i1 %3823, label %.845, label %JumpTableCase74

JumpTableCase74:                                  ; preds = %JumpTableCase73
  %3824 = icmp eq i32 2106, %3786
  br i1 %3824, label %.2106, label %JumpTableCase75

JumpTableCase75:                                  ; preds = %JumpTableCase74
  %3825 = icmp eq i32 742, %3786
  br i1 %3825, label %.742, label %JumpTableCase76

JumpTableCase76:                                  ; preds = %JumpTableCase75
  %3826 = icmp eq i32 2689, %3786
  br i1 %3826, label %.2689, label %JumpTableCase77

JumpTableCase77:                                  ; preds = %JumpTableCase76
  %3827 = icmp eq i32 963, %3786
  br i1 %3827, label %.963, label %JumpTableCase78

JumpTableCase78:                                  ; preds = %JumpTableCase77
  %3828 = icmp eq i32 932, %3786
  br i1 %3828, label %.932, label %JumpTableCase79

JumpTableCase79:                                  ; preds = %JumpTableCase78
  %3829 = icmp eq i32 2420, %3786
  br i1 %3829, label %.2420, label %JumpTableCase80

JumpTableCase80:                                  ; preds = %JumpTableCase79
  %3830 = icmp eq i32 2186, %3786
  br i1 %3830, label %.2186, label %JumpTableCase81

JumpTableCase81:                                  ; preds = %JumpTableCase80
  %3831 = icmp eq i32 2831, %3786
  br i1 %3831, label %.2831, label %JumpTableCase82

JumpTableCase82:                                  ; preds = %JumpTableCase81
  %3832 = icmp eq i32 1107, %3786
  br i1 %3832, label %.1107, label %JumpTableCase83

JumpTableCase83:                                  ; preds = %JumpTableCase82
  %3833 = icmp eq i32 975, %3786
  br i1 %3833, label %.975, label %JumpTableCase84

JumpTableCase84:                                  ; preds = %JumpTableCase83
  %3834 = icmp eq i32 2444, %3786
  br i1 %3834, label %.2444, label %JumpTableCase85

JumpTableCase85:                                  ; preds = %JumpTableCase84
  %3835 = icmp eq i32 898, %3786
  br i1 %3835, label %.898, label %JumpTableCase86

JumpTableCase86:                                  ; preds = %JumpTableCase85
  %3836 = icmp eq i32 807, %3786
  br i1 %3836, label %.807, label %JumpTableCase87

JumpTableCase87:                                  ; preds = %JumpTableCase86
  %3837 = icmp eq i32 2074, %3786
  br i1 %3837, label %.2074, label %JumpTableCase88

JumpTableCase88:                                  ; preds = %JumpTableCase87
  %3838 = icmp eq i32 1208, %3786
  br i1 %3838, label %.1208, label %JumpTableCase89

JumpTableCase89:                                  ; preds = %JumpTableCase88
  %3839 = icmp eq i32 1119, %3786
  br i1 %3839, label %.1119, label %JumpTableCase90

JumpTableCase90:                                  ; preds = %JumpTableCase89
  %3840 = icmp eq i32 2450, %3786
  br i1 %3840, label %.2450, label %JumpTableCase91

JumpTableCase91:                                  ; preds = %JumpTableCase90
  %3841 = icmp eq i32 941, %3786
  br i1 %3841, label %.941, label %JumpTableCase92

JumpTableCase92:                                  ; preds = %JumpTableCase91
  %3842 = icmp eq i32 597, %3786
  br i1 %3842, label %.597, label %JumpTableCase93

JumpTableCase93:                                  ; preds = %JumpTableCase92
  %3843 = icmp eq i32 1220, %3786
  br i1 %3843, label %.1220, label %JumpTableCase94

JumpTableCase94:                                  ; preds = %JumpTableCase93
  %3844 = icmp eq i32 2507, %3786
  br i1 %3844, label %.2507, label %JumpTableCase95

JumpTableCase95:                                  ; preds = %JumpTableCase94
  %3845 = icmp eq i32 984, %3786
  br i1 %3845, label %.984, label %JumpTableCase96

JumpTableCase96:                                  ; preds = %JumpTableCase95
  %3846 = icmp eq i32 2530, %3786
  br i1 %3846, label %.2530, label %JumpTableCase97

JumpTableCase97:                                  ; preds = %JumpTableCase96
  %3847 = icmp eq i32 1305, %3786
  br i1 %3847, label %.1305, label %JumpTableCase98

JumpTableCase98:                                  ; preds = %JumpTableCase97
  %3848 = icmp eq i32 260, %3786
  br i1 %3848, label %.260, label %JumpTableCase99

JumpTableCase99:                                  ; preds = %JumpTableCase98
  %3849 = icmp eq i32 287, %3786
  br i1 %3849, label %.287, label %JumpTableCase100

JumpTableCase100:                                 ; preds = %JumpTableCase99
  %3850 = icmp eq i32 332, %3786
  br i1 %3850, label %.332, label %JumpTableCase101

JumpTableCase101:                                 ; preds = %JumpTableCase100
  %3851 = icmp eq i32 1021, %3786
  br i1 %3851, label %.1021, label %JumpTableCase102

JumpTableCase102:                                 ; preds = %JumpTableCase101
  %3852 = icmp eq i32 1048, %3786
  br i1 %3852, label %.1048, label %JumpTableCase103

JumpTableCase103:                                 ; preds = %JumpTableCase102
  %3853 = icmp eq i32 1093, %3786
  br i1 %3853, label %.1093, label %JumpTableCase104

JumpTableCase104:                                 ; preds = %JumpTableCase103
  %3854 = icmp eq i32 1182, %3786
  br i1 %3854, label %.1182, label %JumpTableCase105

JumpTableCase105:                                 ; preds = %JumpTableCase104
  %3855 = icmp eq i32 2520, %3786
  br i1 %3855, label %.2520, label %Abort
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

declare void @__device_mstore(i8*, i64, i8*, i64)

declare void @__device_calldataload(i8*, i8 addrspace(1)*, i64)

; Function Attrs: nounwind readnone
define internal void @evm.udivrem.i256(i256* %x_ptr, i256* %y_ptr, i256* %q_Ptr, i256* %r_ptr) #0 {
Entry:
  %0 = load i256, i256* %x_ptr
  %1 = load i256, i256* %y_ptr
  %2 = icmp ule i256 %1, %0
  br i1 %2, label %Main, label %Return

Main:                                             ; preds = %Entry
  %y.lz = call i256 @llvm.ctlz.i256(i256 %1, i1 false)
  %r.lz = call i256 @llvm.ctlz.i256(i256 %0, i1 false)
  %i0 = sub nuw i256 %y.lz, %r.lz
  br label %beforeloopY

beforeloopY:                                      ; preds = %LoopY, %Main
  %i0.phi = phi i256 [ %i0, %Main ], [ %4, %LoopY ]
  %y0 = phi i256 [ %1, %Main ], [ %3, %LoopY ]
  %i0.nonzero = icmp ne i256 %i0.phi, 0
  br i1 %i0.nonzero, label %LoopY, label %Loop

LoopY:                                            ; preds = %beforeloopY
  %3 = shl i256 %y0, 1
  %4 = sub i256 %i0.phi, 1
  br label %beforeloopY

Loop:                                             ; preds = %Continue, %beforeloopY
  %y.phi = phi i256 [ %y0, %beforeloopY ], [ %11, %Continue ]
  %r.phi = phi i256 [ %0, %beforeloopY ], [ %r1, %Continue ]
  %i.phi = phi i256 [ %i0, %beforeloopY ], [ %9, %Continue ]
  %q.phi = phi i256 [ 0, %beforeloopY ], [ %10, %Continue ]
  %5 = sub nuw i256 %r.phi, %y.phi
  %6 = or i256 %q.phi, 1
  %7 = icmp uge i256 %r.phi, %y.phi
  %r1 = select i1 %7, i256 %5, i256 %r.phi
  %q = select i1 %7, i256 %6, i256 %q.phi
  %8 = icmp eq i256 %i.phi, 0
  br i1 %8, label %Return, label %Continue

Continue:                                         ; preds = %Loop
  %9 = sub nuw i256 %i.phi, 1
  %10 = shl i256 %q, 1
  %11 = lshr i256 %y.phi, 1
  br label %Loop

Return:                                           ; preds = %Loop, %Entry
  %q.ret = phi i256 [ 0, %Entry ], [ %q, %Loop ]
  %r.ret = phi i256 [ %0, %Entry ], [ %r1, %Loop ]
  store i256 %q.ret, i256* %q_Ptr
  store i256 %r.ret, i256* %r_ptr
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i256 @llvm.ctlz.i256(i256, i1 immarg) #2

; Function Attrs: nounwind
define internal void @evm.udiv.i256(i256* %_x_ptr, i256* %_y_ptr, i256* %_q_ptr) #1 {
  %1 = alloca i256
  call void @evm.udivrem.i256(i256* %_x_ptr, i256* %_y_ptr, i256* %_q_ptr, i256* %1)
  ret void
}

declare void @__device_mload(i8*, i64, i256*)

declare void @__device_sload(%Slot_t addrspace(1)*, i8, i256*, i256*)

declare void @__device_sha3(i8*, i32, i8*)

declare void @__device_sstore(%Slot_t addrspace(1)*, i8 addrspace(1)*, i256*, i256*)

declare void @__power_word(i256*, i256*, i256*)

; Function Attrs: nounwind
declare void @free(i8* nocapture) #1

define void @main_contract(i8 addrspace(1)* %0, i8 addrspace(1)* %1, i8 addrspace(1)* %2, i32 %3) {
entry:
  %4 = call i32 @get_thread_id()
  %5 = add i32 %3, %4
  %6 = getelementptr [2 x i8 addrspace(1)*], [2 x i8 addrspace(1)*] addrspace(1)* @__bitmaps, i32 0, i32 %5
  %7 = load i8 addrspace(1)*, i8 addrspace(1)* addrspace(1)* %6
  %8 = getelementptr [2 x i8], [2 x i8] addrspace(1)* @__l2snap_lens, i32 0, i32 %5
  %9 = getelementptr [2 x [32 x %Slot_t]], [2 x [32 x %Slot_t]] addrspace(1)* @__l2snaps, i32 0, i32 %5, i32 0
  %10 = mul i32 %4, 512
  %11 = getelementptr i8, i8 addrspace(1)* %0, i32 %10
  %12 = getelementptr i8, i8 addrspace(1)* %11, i32 0
  %13 = bitcast i8 addrspace(1)* %12 to i64 addrspace(1)*
  %14 = load i64, i64 addrspace(1)* %13
  %15 = getelementptr i8, i8 addrspace(1)* %11, i32 8
  %16 = bitcast i8 addrspace(1)* %15 to i32 addrspace(1)*
  %17 = load i32, i32 addrspace(1)* %16
  %18 = getelementptr i8, i8 addrspace(1)* %11, i32 12
  %19 = call i32 @contract(%Slot_t addrspace(1)* %9, i8 addrspace(1)* %8, i64 %14, i32 %17, i8 addrspace(1)* %18, i8 addrspace(1)* %7, i8 addrspace(1)* %7, i1 false)
  ret void
}

declare i32 @__hashword(i32*)

declare void @addBugSet(i32, i8, i32)

define internal i32 @deployer(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i64 %2, i32 %3, i8 addrspace(1)* %4, i8 addrspace(1)* %5, i8 addrspace(1)* %6, i1 %7) {
Entry:
  %remaing_gas = alloca i64
  store i64 21000, i64* %remaing_gas
  %MEMORY = call i8* @malloc(i64 1448)
  %8 = call i8* @malloc(i64 4096)
  %STACK = bitcast i8* %8 to i256*
  %STACK_DEP_PTR = alloca i64
  store i64 0, i64* %STACK_DEP_PTR
  %JMP_TARGET_PTR = alloca i64
  store i64 0, i64* %JMP_TARGET_PTR
  br label %.0

.0:                                               ; preds = %Entry
  %9 = load i64, i64* %remaing_gas
  %10 = icmp ugt i64 184, %9
  br i1 %10, label %Abort, label %11

11:                                               ; preds = %.0
  %12 = sub i64 %9, 184
  store i64 %12, i64* %remaing_gas
  %13 = trunc i256 64 to i64
  %14 = alloca i256
  store i256 128, i256* %14
  %15 = bitcast i256* %14 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %13, i8* %15, i64 32)
  %16 = alloca i256
  store i256 0, i256* %16
  %17 = alloca i256
  store i256 420000000000000, i256* %17
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %16, i256* %17)
  %18 = icmp eq i64 %2, 0
  %19 = trunc i256 27 to i64
  %jump.check = icmp ne i1 %18, false
  store i64 %19, i64* %JMP_TARGET_PTR
  %20 = load i64, i64* %STACK_DEP_PTR
  %21 = add i64 %20, 1
  store i64 %21, i64* %STACK_DEP_PTR
  %22 = zext i64 %2 to i256
  %23 = load i64, i64* %STACK_DEP_PTR
  %24 = getelementptr i256, i256* %STACK, i64 %23
  store i256 %22, i256* %24
  br i1 %jump.check, label %JumpTable, label %.23, !EVMBB !4

.23:                                              ; preds = %11
  %25 = load i64, i64* %remaing_gas
  %26 = icmp ugt i64 40, %25
  br i1 %26, label %Abort, label %27

27:                                               ; preds = %.23
  %28 = sub i64 %25, 40
  store i64 %28, i64* %remaing_gas
  %29 = load i64, i64* %STACK_DEP_PTR
  %30 = sub i64 %29, 0
  store i64 %30, i64* %STACK_DEP_PTR
  br label %Abort, !EVMBB !4

.27:                                              ; preds = %JumpTableCase
  %31 = load i64, i64* %remaing_gas
  %32 = icmp ugt i64 320, %31
  br i1 %32, label %Abort, label %33

33:                                               ; preds = %.27
  %34 = sub i64 %31, 320
  store i64 %34, i64* %remaing_gas
  %35 = load i64, i64* %STACK_DEP_PTR
  %36 = getelementptr i256, i256* %STACK, i64 %35
  %37 = load i256, i256* %36
  %38 = load i64, i64* %STACK_DEP_PTR
  %39 = sub i64 %38, 1
  store i64 %39, i64* %STACK_DEP_PTR
  %40 = load i160, i160 addrspace(4)* @CALLER
  %41 = zext i160 %40 to i256
  %42 = and i256 1461501637330902918203684832716283019655932542975, %41
  %43 = and i256 1461501637330902918203684832716283019655932542975, %42
  %44 = trunc i256 0 to i64
  %45 = alloca i256
  store i256 %43, i256* %45
  %46 = bitcast i256* %45 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %44, i8* %46, i64 32)
  %47 = add i256 32, 0, !pc !137, !intsan !8
  %48 = trunc i256 %47 to i64
  %49 = alloca i256
  store i256 1, i256* %49
  %50 = bitcast i256* %49 to i8*
  call void @__device_mstore(i8* %MEMORY, i64 %48, i8* %50, i64 32)
  %51 = add i256 32, %47, !pc !138, !intsan !8
  %52 = getelementptr i8, i8* %MEMORY, i256 0
  %53 = trunc i256 %51 to i32
  %54 = alloca i256
  %55 = bitcast i256* %54 to i8*
  call void @__device_sha3(i8* %52, i32 %53, i8* %55)
  %56 = load i256, i256* %54
  %57 = alloca i256
  store i256 %56, i256* %57
  %58 = alloca i256
  store i256 420000000000000, i256* %58
  call void @__device_sstore(%Slot_t addrspace(1)* %0, i8 addrspace(1)* %1, i256* %57, i256* %58)
  %59 = getelementptr i8, i8* %MEMORY, i256 0
  %60 = trunc i256 3301 to i32
  %61 = load i32, i32 addrspace(4)* @__evmCodeSize
  %62 = getelementptr [32769 x i8], [32769 x i8] addrspace(4)* @__evmCode, i32 0, i256 118
  call void @llvm.memcpy.p0i8.p4i8.i32(i8* %59, i8 addrspace(4)* %62, i32 %60, i1 false)
  br label %Exit, !EVMBB !4

JumpTable:                                        ; preds = %11
  %63 = load i64, i64* %JMP_TARGET_PTR
  %64 = trunc i64 %63 to i32
  br label %JumpTableCase

Abort:                                            ; preds = %.27, %.23, %.0, %JumpTableCase, %27
  call void @free(i8* %MEMORY)
  call void @free(i8* %8)
  ret i32 0

Exit:                                             ; preds = %33
  call void @free(i8* %MEMORY)
  call void @free(i8* %8)
  ret i32 1

JumpTableCase:                                    ; preds = %JumpTable
  %65 = icmp eq i32 27, %64
  br i1 %65, label %.27, label %Abort
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p4i8.i32(i8* noalias nocapture writeonly, i8 addrspace(4)* noalias nocapture readonly, i32, i1 immarg) #3

define void @main_deployer(i8 addrspace(1)* %0, i8 addrspace(1)* %1) {
entry:
  %2 = load i8 addrspace(1)*, i8 addrspace(1)* addrspace(1)* getelementptr inbounds ([2 x i8 addrspace(1)*], [2 x i8 addrspace(1)*] addrspace(1)* @__bitmaps, i32 0, i32 0)
  %3 = getelementptr i8, i8 addrspace(1)* %0, i32 0
  %4 = getelementptr i8, i8 addrspace(1)* %3, i32 0
  %5 = bitcast i8 addrspace(1)* %4 to i64 addrspace(1)*
  %6 = load i64, i64 addrspace(1)* %5
  %7 = getelementptr i8, i8 addrspace(1)* %3, i32 8
  %8 = bitcast i8 addrspace(1)* %7 to i32 addrspace(1)*
  %9 = load i32, i32 addrspace(1)* %8
  %10 = getelementptr i8, i8 addrspace(1)* %3, i32 12
  store i8 0, i8 addrspace(1)* @__l3snap_len
  store i8 0, i8 addrspace(1)* getelementptr inbounds ([2 x i8], [2 x i8] addrspace(1)* @__l2snap_lens, i32 0, i32 0)
  %11 = call i32 @deployer(%Slot_t addrspace(1)* getelementptr inbounds ([2 x [32 x %Slot_t]], [2 x [32 x %Slot_t]] addrspace(1)* @__l2snaps, i32 0, i32 0, i32 0), i8 addrspace(1)* getelementptr inbounds ([2 x i8], [2 x i8] addrspace(1)* @__l2snap_lens, i32 0, i32 0), i64 %6, i32 %9, i8 addrspace(1)* %10, i8 addrspace(1)* %2, i8 addrspace(1)* %2, i1 false)
  %12 = load i8, i8 addrspace(1)* getelementptr inbounds ([2 x i8], [2 x i8] addrspace(1)* @__l2snap_lens, i32 0, i32 0)
  store i8 %12, i8 addrspace(1)* @__l3snap_len
  store i8 0, i8 addrspace(1)* getelementptr inbounds ([2 x i8], [2 x i8] addrspace(1)* @__l2snap_lens, i32 0, i32 0)
  %13 = zext i8 %12 to i32
  %14 = mul i32 %13, 64
  %15 = bitcast %Slot_t addrspace(1)* getelementptr inbounds ([32 x %Slot_t], [32 x %Slot_t] addrspace(1)* @__l3snap, i32 0, i32 0) to i8 addrspace(1)*
  %16 = bitcast %Slot_t addrspace(1)* getelementptr inbounds ([2 x [32 x %Slot_t]], [2 x [32 x %Slot_t]] addrspace(1)* @__l2snaps, i32 0, i32 0, i32 0) to i8 addrspace(1)*
  call void @llvm.memcpy.p1i8.p1i8.i32(i8 addrspace(1)* align 32 %15, i8 addrspace(1)* align 32 %16, i32 %14, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p1i8.p1i8.i32(i8 addrspace(1)* noalias nocapture writeonly, i8 addrspace(1)* noalias nocapture readonly, i32, i1 immarg) #3

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { argmemonly nounwind willreturn }

!nvvm.annotations = !{!0, !1, !2}

!0 = !{void (i64 addrspace(1)*, i8 addrspace(1)*)* @updateBits, !"kernel", i32 1}
!1 = !{void (i8 addrspace(1)*, i8 addrspace(1)*, i8 addrspace(1)*, i32)* @main_contract, !"kernel", i32 1}
!2 = !{void (i8 addrspace(1)*, i8 addrspace(1)*)* @main_deployer, !"kernel", i32 1}
!3 = !{}
!4 = !{!"BB"}
!5 = !{i32 47}
!6 = !{!"udiv"}
!7 = !{i32 231}
!8 = !{!"add"}
!9 = !{i32 234}
!10 = !{!"sub"}
!11 = !{i32 245}
!12 = !{i32 253}
!13 = !{i32 271}
!14 = !{i32 275}
!15 = !{i32 280}
!16 = !{i32 296}
!17 = !{i32 309}
!18 = !{i32 317}
!19 = !{i32 322}
!20 = !{i32 329}
!21 = !{i32 343}
!22 = !{i32 367}
!23 = !{i32 369}
!24 = !{i32 399}
!25 = !{i32 409}
!26 = !{i32 435}
!27 = !{i32 444}
!28 = !{i32 478}
!29 = !{i32 487}
!30 = !{i32 511}
!31 = !{i32 513}
!32 = !{i32 543}
!33 = !{i32 575}
!34 = !{i32 585}
!35 = !{i32 611}
!36 = !{i32 620}
!37 = !{i32 660}
!38 = !{i32 669}
!39 = !{i32 709}
!40 = !{i32 718}
!41 = !{i32 752}
!42 = !{i32 761}
!43 = !{i32 785}
!44 = !{i32 787}
!45 = !{i32 795}
!46 = !{i32 821}
!47 = !{i32 830}
!48 = !{i32 854}
!49 = !{i32 856}
!50 = !{i32 886}
!51 = !{i32 908}
!52 = !{i32 917}
!53 = !{i32 951}
!54 = !{i32 960}
!55 = !{i32 992}
!56 = !{i32 995}
!57 = !{i32 1006}
!58 = !{i32 1014}
!59 = !{i32 1032}
!60 = !{i32 1036}
!61 = !{i32 1041}
!62 = !{i32 1057}
!63 = !{i32 1070}
!64 = !{i32 1078}
!65 = !{i32 1083}
!66 = !{i32 1090}
!67 = !{i32 1104}
!68 = !{i32 1128}
!69 = !{i32 1130}
!70 = !{i32 1160}
!71 = !{i32 1170}
!72 = !{i32 1196}
!73 = !{i32 1205}
!74 = !{i32 1229}
!75 = !{i32 1231}
!76 = !{i32 1261}
!77 = !{i32 1293}
!78 = !{i32 1315}
!79 = !{i32 1324}
!80 = !{i32 1334}
!81 = !{i32 1345}
!82 = !{i32 1451}
!83 = !{i32 1457}
!84 = !{i32 1512}
!85 = !{i32 1518}
!86 = !{i32 1590}
!87 = !{i32 1596}
!88 = !{i32 1651}
!89 = !{i32 1657}
!90 = !{i32 1754}
!91 = !{i32 1763}
!92 = !{i32 1841}
!93 = !{i32 1847}
!94 = !{i32 1902}
!95 = !{i32 1908}
!96 = !{i32 1980}
!97 = !{i32 1986}
!98 = !{i32 2041}
!99 = !{i32 2047}
!100 = !{i32 2056}
!101 = !{i32 2163}
!102 = !{i32 2169}
!103 = !{i32 2241}
!104 = !{i32 2247}
!105 = !{i32 2256}
!106 = !{i32 2296}
!107 = !{i32 2302}
!108 = !{i32 2311}
!109 = !{i32 2326}
!110 = !{i32 2400}
!111 = !{i32 2409}
!112 = !{i32 2457}
!113 = !{i32 2468}
!114 = !{i32 2612}
!115 = !{i32 2666}
!116 = !{i32 2672}
!117 = !{i32 2743}
!118 = !{i32 2749}
!119 = !{i32 2808}
!120 = !{i32 2814}
!121 = !{i32 2819}
!122 = !{i32 2838}
!123 = !{i32 2892}
!124 = !{i32 2898}
!125 = !{i32 2907}
!126 = !{i32 2969}
!127 = !{i32 2975}
!128 = !{i32 2984}
!129 = !{i32 3028}
!130 = !{i32 3034}
!131 = !{i32 3043}
!132 = !{i32 3062}
!133 = !{i32 3140}
!134 = !{i32 3149}
!135 = !{i32 3241}
!136 = !{i32 3250}
!137 = !{i32 90}
!138 = !{i32 96}
